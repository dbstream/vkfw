/**
 * Vulkan functions. Generated by gen_vkfunctions.py
 * Copyright (C) 2024  dbstream
 */

#ifdef VKFW_USE_XCB
#define VK_USE_PLATFORM_XCB_KHR 1
#endif
#include <VKFW/vkfw.h>

/* VKFW_GEN_PFNS */
#if defined(VK_VERSION_1_0)
PFN_vkAllocateCommandBuffers pfn_vkAllocateCommandBuffers;
PFN_vkAllocateDescriptorSets pfn_vkAllocateDescriptorSets;
PFN_vkAllocateMemory pfn_vkAllocateMemory;
PFN_vkBeginCommandBuffer pfn_vkBeginCommandBuffer;
PFN_vkBindBufferMemory pfn_vkBindBufferMemory;
PFN_vkBindImageMemory pfn_vkBindImageMemory;
PFN_vkCmdBeginQuery pfn_vkCmdBeginQuery;
PFN_vkCmdBeginRenderPass pfn_vkCmdBeginRenderPass;
PFN_vkCmdBindDescriptorSets pfn_vkCmdBindDescriptorSets;
PFN_vkCmdBindIndexBuffer pfn_vkCmdBindIndexBuffer;
PFN_vkCmdBindPipeline pfn_vkCmdBindPipeline;
PFN_vkCmdBindVertexBuffers pfn_vkCmdBindVertexBuffers;
PFN_vkCmdBlitImage pfn_vkCmdBlitImage;
PFN_vkCmdClearAttachments pfn_vkCmdClearAttachments;
PFN_vkCmdClearColorImage pfn_vkCmdClearColorImage;
PFN_vkCmdClearDepthStencilImage pfn_vkCmdClearDepthStencilImage;
PFN_vkCmdCopyBuffer pfn_vkCmdCopyBuffer;
PFN_vkCmdCopyBufferToImage pfn_vkCmdCopyBufferToImage;
PFN_vkCmdCopyImage pfn_vkCmdCopyImage;
PFN_vkCmdCopyImageToBuffer pfn_vkCmdCopyImageToBuffer;
PFN_vkCmdCopyQueryPoolResults pfn_vkCmdCopyQueryPoolResults;
PFN_vkCmdDispatch pfn_vkCmdDispatch;
PFN_vkCmdDispatchIndirect pfn_vkCmdDispatchIndirect;
PFN_vkCmdDraw pfn_vkCmdDraw;
PFN_vkCmdDrawIndexed pfn_vkCmdDrawIndexed;
PFN_vkCmdDrawIndexedIndirect pfn_vkCmdDrawIndexedIndirect;
PFN_vkCmdDrawIndirect pfn_vkCmdDrawIndirect;
PFN_vkCmdEndQuery pfn_vkCmdEndQuery;
PFN_vkCmdEndRenderPass pfn_vkCmdEndRenderPass;
PFN_vkCmdExecuteCommands pfn_vkCmdExecuteCommands;
PFN_vkCmdFillBuffer pfn_vkCmdFillBuffer;
PFN_vkCmdNextSubpass pfn_vkCmdNextSubpass;
PFN_vkCmdPipelineBarrier pfn_vkCmdPipelineBarrier;
PFN_vkCmdPushConstants pfn_vkCmdPushConstants;
PFN_vkCmdResetEvent pfn_vkCmdResetEvent;
PFN_vkCmdResetQueryPool pfn_vkCmdResetQueryPool;
PFN_vkCmdResolveImage pfn_vkCmdResolveImage;
PFN_vkCmdSetBlendConstants pfn_vkCmdSetBlendConstants;
PFN_vkCmdSetDepthBias pfn_vkCmdSetDepthBias;
PFN_vkCmdSetDepthBounds pfn_vkCmdSetDepthBounds;
PFN_vkCmdSetEvent pfn_vkCmdSetEvent;
PFN_vkCmdSetLineWidth pfn_vkCmdSetLineWidth;
PFN_vkCmdSetScissor pfn_vkCmdSetScissor;
PFN_vkCmdSetStencilCompareMask pfn_vkCmdSetStencilCompareMask;
PFN_vkCmdSetStencilReference pfn_vkCmdSetStencilReference;
PFN_vkCmdSetStencilWriteMask pfn_vkCmdSetStencilWriteMask;
PFN_vkCmdSetViewport pfn_vkCmdSetViewport;
PFN_vkCmdUpdateBuffer pfn_vkCmdUpdateBuffer;
PFN_vkCmdWaitEvents pfn_vkCmdWaitEvents;
PFN_vkCmdWriteTimestamp pfn_vkCmdWriteTimestamp;
PFN_vkCreateBuffer pfn_vkCreateBuffer;
PFN_vkCreateBufferView pfn_vkCreateBufferView;
PFN_vkCreateCommandPool pfn_vkCreateCommandPool;
PFN_vkCreateComputePipelines pfn_vkCreateComputePipelines;
PFN_vkCreateDescriptorPool pfn_vkCreateDescriptorPool;
PFN_vkCreateDescriptorSetLayout pfn_vkCreateDescriptorSetLayout;
PFN_vkCreateDevice pfn_vkCreateDevice;
PFN_vkCreateEvent pfn_vkCreateEvent;
PFN_vkCreateFence pfn_vkCreateFence;
PFN_vkCreateFramebuffer pfn_vkCreateFramebuffer;
PFN_vkCreateGraphicsPipelines pfn_vkCreateGraphicsPipelines;
PFN_vkCreateImage pfn_vkCreateImage;
PFN_vkCreateImageView pfn_vkCreateImageView;
PFN_vkCreateInstance pfn_vkCreateInstance;
PFN_vkCreatePipelineCache pfn_vkCreatePipelineCache;
PFN_vkCreatePipelineLayout pfn_vkCreatePipelineLayout;
PFN_vkCreateQueryPool pfn_vkCreateQueryPool;
PFN_vkCreateRenderPass pfn_vkCreateRenderPass;
PFN_vkCreateSampler pfn_vkCreateSampler;
PFN_vkCreateSemaphore pfn_vkCreateSemaphore;
PFN_vkCreateShaderModule pfn_vkCreateShaderModule;
PFN_vkDestroyBuffer pfn_vkDestroyBuffer;
PFN_vkDestroyBufferView pfn_vkDestroyBufferView;
PFN_vkDestroyCommandPool pfn_vkDestroyCommandPool;
PFN_vkDestroyDescriptorPool pfn_vkDestroyDescriptorPool;
PFN_vkDestroyDescriptorSetLayout pfn_vkDestroyDescriptorSetLayout;
PFN_vkDestroyDevice pfn_vkDestroyDevice;
PFN_vkDestroyEvent pfn_vkDestroyEvent;
PFN_vkDestroyFence pfn_vkDestroyFence;
PFN_vkDestroyFramebuffer pfn_vkDestroyFramebuffer;
PFN_vkDestroyImage pfn_vkDestroyImage;
PFN_vkDestroyImageView pfn_vkDestroyImageView;
PFN_vkDestroyInstance pfn_vkDestroyInstance;
PFN_vkDestroyPipeline pfn_vkDestroyPipeline;
PFN_vkDestroyPipelineCache pfn_vkDestroyPipelineCache;
PFN_vkDestroyPipelineLayout pfn_vkDestroyPipelineLayout;
PFN_vkDestroyQueryPool pfn_vkDestroyQueryPool;
PFN_vkDestroyRenderPass pfn_vkDestroyRenderPass;
PFN_vkDestroySampler pfn_vkDestroySampler;
PFN_vkDestroySemaphore pfn_vkDestroySemaphore;
PFN_vkDestroyShaderModule pfn_vkDestroyShaderModule;
PFN_vkDeviceWaitIdle pfn_vkDeviceWaitIdle;
PFN_vkEndCommandBuffer pfn_vkEndCommandBuffer;
PFN_vkEnumerateDeviceExtensionProperties pfn_vkEnumerateDeviceExtensionProperties;
PFN_vkEnumerateDeviceLayerProperties pfn_vkEnumerateDeviceLayerProperties;
PFN_vkEnumerateInstanceExtensionProperties pfn_vkEnumerateInstanceExtensionProperties;
PFN_vkEnumerateInstanceLayerProperties pfn_vkEnumerateInstanceLayerProperties;
PFN_vkEnumeratePhysicalDevices pfn_vkEnumeratePhysicalDevices;
PFN_vkFlushMappedMemoryRanges pfn_vkFlushMappedMemoryRanges;
PFN_vkFreeCommandBuffers pfn_vkFreeCommandBuffers;
PFN_vkFreeDescriptorSets pfn_vkFreeDescriptorSets;
PFN_vkFreeMemory pfn_vkFreeMemory;
PFN_vkGetBufferMemoryRequirements pfn_vkGetBufferMemoryRequirements;
PFN_vkGetDeviceMemoryCommitment pfn_vkGetDeviceMemoryCommitment;
PFN_vkGetDeviceProcAddr pfn_vkGetDeviceProcAddr;
PFN_vkGetDeviceQueue pfn_vkGetDeviceQueue;
PFN_vkGetEventStatus pfn_vkGetEventStatus;
PFN_vkGetFenceStatus pfn_vkGetFenceStatus;
PFN_vkGetImageMemoryRequirements pfn_vkGetImageMemoryRequirements;
PFN_vkGetImageSparseMemoryRequirements pfn_vkGetImageSparseMemoryRequirements;
PFN_vkGetImageSubresourceLayout pfn_vkGetImageSubresourceLayout;
PFN_vkGetInstanceProcAddr pfn_vkGetInstanceProcAddr;
PFN_vkGetPhysicalDeviceFeatures pfn_vkGetPhysicalDeviceFeatures;
PFN_vkGetPhysicalDeviceFormatProperties pfn_vkGetPhysicalDeviceFormatProperties;
PFN_vkGetPhysicalDeviceImageFormatProperties pfn_vkGetPhysicalDeviceImageFormatProperties;
PFN_vkGetPhysicalDeviceMemoryProperties pfn_vkGetPhysicalDeviceMemoryProperties;
PFN_vkGetPhysicalDeviceProperties pfn_vkGetPhysicalDeviceProperties;
PFN_vkGetPhysicalDeviceQueueFamilyProperties pfn_vkGetPhysicalDeviceQueueFamilyProperties;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties pfn_vkGetPhysicalDeviceSparseImageFormatProperties;
PFN_vkGetPipelineCacheData pfn_vkGetPipelineCacheData;
PFN_vkGetQueryPoolResults pfn_vkGetQueryPoolResults;
PFN_vkGetRenderAreaGranularity pfn_vkGetRenderAreaGranularity;
PFN_vkInvalidateMappedMemoryRanges pfn_vkInvalidateMappedMemoryRanges;
PFN_vkMapMemory pfn_vkMapMemory;
PFN_vkMergePipelineCaches pfn_vkMergePipelineCaches;
PFN_vkQueueBindSparse pfn_vkQueueBindSparse;
PFN_vkQueueSubmit pfn_vkQueueSubmit;
PFN_vkQueueWaitIdle pfn_vkQueueWaitIdle;
PFN_vkResetCommandBuffer pfn_vkResetCommandBuffer;
PFN_vkResetCommandPool pfn_vkResetCommandPool;
PFN_vkResetDescriptorPool pfn_vkResetDescriptorPool;
PFN_vkResetEvent pfn_vkResetEvent;
PFN_vkResetFences pfn_vkResetFences;
PFN_vkSetEvent pfn_vkSetEvent;
PFN_vkUnmapMemory pfn_vkUnmapMemory;
PFN_vkUpdateDescriptorSets pfn_vkUpdateDescriptorSets;
PFN_vkWaitForFences pfn_vkWaitForFences;
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
PFN_vkBindBufferMemory2 pfn_vkBindBufferMemory2;
PFN_vkBindImageMemory2 pfn_vkBindImageMemory2;
PFN_vkCmdDispatchBase pfn_vkCmdDispatchBase;
PFN_vkCmdSetDeviceMask pfn_vkCmdSetDeviceMask;
PFN_vkCreateDescriptorUpdateTemplate pfn_vkCreateDescriptorUpdateTemplate;
PFN_vkCreateSamplerYcbcrConversion pfn_vkCreateSamplerYcbcrConversion;
PFN_vkDestroyDescriptorUpdateTemplate pfn_vkDestroyDescriptorUpdateTemplate;
PFN_vkDestroySamplerYcbcrConversion pfn_vkDestroySamplerYcbcrConversion;
PFN_vkEnumerateInstanceVersion pfn_vkEnumerateInstanceVersion;
PFN_vkEnumeratePhysicalDeviceGroups pfn_vkEnumeratePhysicalDeviceGroups;
PFN_vkGetBufferMemoryRequirements2 pfn_vkGetBufferMemoryRequirements2;
PFN_vkGetDescriptorSetLayoutSupport pfn_vkGetDescriptorSetLayoutSupport;
PFN_vkGetDeviceGroupPeerMemoryFeatures pfn_vkGetDeviceGroupPeerMemoryFeatures;
PFN_vkGetDeviceQueue2 pfn_vkGetDeviceQueue2;
PFN_vkGetImageMemoryRequirements2 pfn_vkGetImageMemoryRequirements2;
PFN_vkGetImageSparseMemoryRequirements2 pfn_vkGetImageSparseMemoryRequirements2;
PFN_vkGetPhysicalDeviceExternalBufferProperties pfn_vkGetPhysicalDeviceExternalBufferProperties;
PFN_vkGetPhysicalDeviceExternalFenceProperties pfn_vkGetPhysicalDeviceExternalFenceProperties;
PFN_vkGetPhysicalDeviceExternalSemaphoreProperties pfn_vkGetPhysicalDeviceExternalSemaphoreProperties;
PFN_vkGetPhysicalDeviceFeatures2 pfn_vkGetPhysicalDeviceFeatures2;
PFN_vkGetPhysicalDeviceFormatProperties2 pfn_vkGetPhysicalDeviceFormatProperties2;
PFN_vkGetPhysicalDeviceImageFormatProperties2 pfn_vkGetPhysicalDeviceImageFormatProperties2;
PFN_vkGetPhysicalDeviceMemoryProperties2 pfn_vkGetPhysicalDeviceMemoryProperties2;
PFN_vkGetPhysicalDeviceProperties2 pfn_vkGetPhysicalDeviceProperties2;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2 pfn_vkGetPhysicalDeviceQueueFamilyProperties2;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 pfn_vkGetPhysicalDeviceSparseImageFormatProperties2;
PFN_vkTrimCommandPool pfn_vkTrimCommandPool;
PFN_vkUpdateDescriptorSetWithTemplate pfn_vkUpdateDescriptorSetWithTemplate;
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
PFN_vkCmdBeginRenderPass2 pfn_vkCmdBeginRenderPass2;
PFN_vkCmdDrawIndexedIndirectCount pfn_vkCmdDrawIndexedIndirectCount;
PFN_vkCmdDrawIndirectCount pfn_vkCmdDrawIndirectCount;
PFN_vkCmdEndRenderPass2 pfn_vkCmdEndRenderPass2;
PFN_vkCmdNextSubpass2 pfn_vkCmdNextSubpass2;
PFN_vkCreateRenderPass2 pfn_vkCreateRenderPass2;
PFN_vkGetBufferDeviceAddress pfn_vkGetBufferDeviceAddress;
PFN_vkGetBufferOpaqueCaptureAddress pfn_vkGetBufferOpaqueCaptureAddress;
PFN_vkGetDeviceMemoryOpaqueCaptureAddress pfn_vkGetDeviceMemoryOpaqueCaptureAddress;
PFN_vkGetSemaphoreCounterValue pfn_vkGetSemaphoreCounterValue;
PFN_vkResetQueryPool pfn_vkResetQueryPool;
PFN_vkSignalSemaphore pfn_vkSignalSemaphore;
PFN_vkWaitSemaphores pfn_vkWaitSemaphores;
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
PFN_vkCmdBeginRendering pfn_vkCmdBeginRendering;
PFN_vkCmdBindVertexBuffers2 pfn_vkCmdBindVertexBuffers2;
PFN_vkCmdBlitImage2 pfn_vkCmdBlitImage2;
PFN_vkCmdCopyBuffer2 pfn_vkCmdCopyBuffer2;
PFN_vkCmdCopyBufferToImage2 pfn_vkCmdCopyBufferToImage2;
PFN_vkCmdCopyImage2 pfn_vkCmdCopyImage2;
PFN_vkCmdCopyImageToBuffer2 pfn_vkCmdCopyImageToBuffer2;
PFN_vkCmdEndRendering pfn_vkCmdEndRendering;
PFN_vkCmdPipelineBarrier2 pfn_vkCmdPipelineBarrier2;
PFN_vkCmdResetEvent2 pfn_vkCmdResetEvent2;
PFN_vkCmdResolveImage2 pfn_vkCmdResolveImage2;
PFN_vkCmdSetCullMode pfn_vkCmdSetCullMode;
PFN_vkCmdSetDepthBiasEnable pfn_vkCmdSetDepthBiasEnable;
PFN_vkCmdSetDepthBoundsTestEnable pfn_vkCmdSetDepthBoundsTestEnable;
PFN_vkCmdSetDepthCompareOp pfn_vkCmdSetDepthCompareOp;
PFN_vkCmdSetDepthTestEnable pfn_vkCmdSetDepthTestEnable;
PFN_vkCmdSetDepthWriteEnable pfn_vkCmdSetDepthWriteEnable;
PFN_vkCmdSetEvent2 pfn_vkCmdSetEvent2;
PFN_vkCmdSetFrontFace pfn_vkCmdSetFrontFace;
PFN_vkCmdSetPrimitiveRestartEnable pfn_vkCmdSetPrimitiveRestartEnable;
PFN_vkCmdSetPrimitiveTopology pfn_vkCmdSetPrimitiveTopology;
PFN_vkCmdSetRasterizerDiscardEnable pfn_vkCmdSetRasterizerDiscardEnable;
PFN_vkCmdSetScissorWithCount pfn_vkCmdSetScissorWithCount;
PFN_vkCmdSetStencilOp pfn_vkCmdSetStencilOp;
PFN_vkCmdSetStencilTestEnable pfn_vkCmdSetStencilTestEnable;
PFN_vkCmdSetViewportWithCount pfn_vkCmdSetViewportWithCount;
PFN_vkCmdWaitEvents2 pfn_vkCmdWaitEvents2;
PFN_vkCmdWriteTimestamp2 pfn_vkCmdWriteTimestamp2;
PFN_vkCreatePrivateDataSlot pfn_vkCreatePrivateDataSlot;
PFN_vkDestroyPrivateDataSlot pfn_vkDestroyPrivateDataSlot;
PFN_vkGetDeviceBufferMemoryRequirements pfn_vkGetDeviceBufferMemoryRequirements;
PFN_vkGetDeviceImageMemoryRequirements pfn_vkGetDeviceImageMemoryRequirements;
PFN_vkGetDeviceImageSparseMemoryRequirements pfn_vkGetDeviceImageSparseMemoryRequirements;
PFN_vkGetPhysicalDeviceToolProperties pfn_vkGetPhysicalDeviceToolProperties;
PFN_vkGetPrivateData pfn_vkGetPrivateData;
PFN_vkQueueSubmit2 pfn_vkQueueSubmit2;
PFN_vkSetPrivateData pfn_vkSetPrivateData;
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_AMDX_shader_enqueue)
PFN_vkCmdDispatchGraphAMDX pfn_vkCmdDispatchGraphAMDX;
PFN_vkCmdDispatchGraphIndirectAMDX pfn_vkCmdDispatchGraphIndirectAMDX;
PFN_vkCmdDispatchGraphIndirectCountAMDX pfn_vkCmdDispatchGraphIndirectCountAMDX;
PFN_vkCmdInitializeGraphScratchMemoryAMDX pfn_vkCmdInitializeGraphScratchMemoryAMDX;
PFN_vkCreateExecutionGraphPipelinesAMDX pfn_vkCreateExecutionGraphPipelinesAMDX;
PFN_vkGetExecutionGraphPipelineNodeIndexAMDX pfn_vkGetExecutionGraphPipelineNodeIndexAMDX;
PFN_vkGetExecutionGraphPipelineScratchSizeAMDX pfn_vkGetExecutionGraphPipelineScratchSizeAMDX;
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_AMD_buffer_marker)
PFN_vkCmdWriteBufferMarkerAMD pfn_vkCmdWriteBufferMarkerAMD;
#endif /* defined(VK_AMD_buffer_marker) */
#if defined(VK_AMD_display_native_hdr)
PFN_vkSetLocalDimmingAMD pfn_vkSetLocalDimmingAMD;
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_AMD_draw_indirect_count)
PFN_vkCmdDrawIndexedIndirectCountAMD pfn_vkCmdDrawIndexedIndirectCountAMD;
PFN_vkCmdDrawIndirectCountAMD pfn_vkCmdDrawIndirectCountAMD;
#endif /* defined(VK_AMD_draw_indirect_count) */
#if defined(VK_AMD_shader_info)
PFN_vkGetShaderInfoAMD pfn_vkGetShaderInfoAMD;
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
PFN_vkGetAndroidHardwareBufferPropertiesANDROID pfn_vkGetAndroidHardwareBufferPropertiesANDROID;
PFN_vkGetMemoryAndroidHardwareBufferANDROID pfn_vkGetMemoryAndroidHardwareBufferANDROID;
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_EXT_acquire_drm_display)
PFN_vkAcquireDrmDisplayEXT pfn_vkAcquireDrmDisplayEXT;
PFN_vkGetDrmDisplayEXT pfn_vkGetDrmDisplayEXT;
#endif /* defined(VK_EXT_acquire_drm_display) */
#if defined(VK_EXT_acquire_xlib_display)
PFN_vkAcquireXlibDisplayEXT pfn_vkAcquireXlibDisplayEXT;
PFN_vkGetRandROutputDisplayEXT pfn_vkGetRandROutputDisplayEXT;
#endif /* defined(VK_EXT_acquire_xlib_display) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT;
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_EXT_buffer_device_address)
PFN_vkGetBufferDeviceAddressEXT pfn_vkGetBufferDeviceAddressEXT;
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_EXT_calibrated_timestamps)
PFN_vkGetCalibratedTimestampsEXT pfn_vkGetCalibratedTimestampsEXT;
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_EXT_color_write_enable)
PFN_vkCmdSetColorWriteEnableEXT pfn_vkCmdSetColorWriteEnableEXT;
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_EXT_conditional_rendering)
PFN_vkCmdBeginConditionalRenderingEXT pfn_vkCmdBeginConditionalRenderingEXT;
PFN_vkCmdEndConditionalRenderingEXT pfn_vkCmdEndConditionalRenderingEXT;
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_EXT_debug_marker)
PFN_vkCmdDebugMarkerBeginEXT pfn_vkCmdDebugMarkerBeginEXT;
PFN_vkCmdDebugMarkerEndEXT pfn_vkCmdDebugMarkerEndEXT;
PFN_vkCmdDebugMarkerInsertEXT pfn_vkCmdDebugMarkerInsertEXT;
PFN_vkDebugMarkerSetObjectNameEXT pfn_vkDebugMarkerSetObjectNameEXT;
PFN_vkDebugMarkerSetObjectTagEXT pfn_vkDebugMarkerSetObjectTagEXT;
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_EXT_debug_report)
PFN_vkCreateDebugReportCallbackEXT pfn_vkCreateDebugReportCallbackEXT;
PFN_vkDebugReportMessageEXT pfn_vkDebugReportMessageEXT;
PFN_vkDestroyDebugReportCallbackEXT pfn_vkDestroyDebugReportCallbackEXT;
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
PFN_vkCmdBeginDebugUtilsLabelEXT pfn_vkCmdBeginDebugUtilsLabelEXT;
PFN_vkCmdEndDebugUtilsLabelEXT pfn_vkCmdEndDebugUtilsLabelEXT;
PFN_vkCmdInsertDebugUtilsLabelEXT pfn_vkCmdInsertDebugUtilsLabelEXT;
PFN_vkCreateDebugUtilsMessengerEXT pfn_vkCreateDebugUtilsMessengerEXT;
PFN_vkDestroyDebugUtilsMessengerEXT pfn_vkDestroyDebugUtilsMessengerEXT;
PFN_vkQueueBeginDebugUtilsLabelEXT pfn_vkQueueBeginDebugUtilsLabelEXT;
PFN_vkQueueEndDebugUtilsLabelEXT pfn_vkQueueEndDebugUtilsLabelEXT;
PFN_vkQueueInsertDebugUtilsLabelEXT pfn_vkQueueInsertDebugUtilsLabelEXT;
PFN_vkSetDebugUtilsObjectNameEXT pfn_vkSetDebugUtilsObjectNameEXT;
PFN_vkSetDebugUtilsObjectTagEXT pfn_vkSetDebugUtilsObjectTagEXT;
PFN_vkSubmitDebugUtilsMessageEXT pfn_vkSubmitDebugUtilsMessageEXT;
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_depth_bias_control)
PFN_vkCmdSetDepthBias2EXT pfn_vkCmdSetDepthBias2EXT;
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_descriptor_buffer)
PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
PFN_vkCmdBindDescriptorBuffersEXT pfn_vkCmdBindDescriptorBuffersEXT;
PFN_vkCmdSetDescriptorBufferOffsetsEXT pfn_vkCmdSetDescriptorBufferOffsetsEXT;
PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT;
PFN_vkGetDescriptorEXT pfn_vkGetDescriptorEXT;
PFN_vkGetDescriptorSetLayoutBindingOffsetEXT pfn_vkGetDescriptorSetLayoutBindingOffsetEXT;
PFN_vkGetDescriptorSetLayoutSizeEXT pfn_vkGetDescriptorSetLayoutSizeEXT;
PFN_vkGetImageOpaqueCaptureDescriptorDataEXT pfn_vkGetImageOpaqueCaptureDescriptorDataEXT;
PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#endif /* defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)) */
#if defined(VK_EXT_device_fault)
PFN_vkGetDeviceFaultInfoEXT pfn_vkGetDeviceFaultInfoEXT;
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_EXT_direct_mode_display)
PFN_vkReleaseDisplayEXT pfn_vkReleaseDisplayEXT;
#endif /* defined(VK_EXT_direct_mode_display) */
#if defined(VK_EXT_directfb_surface)
PFN_vkCreateDirectFBSurfaceEXT pfn_vkCreateDirectFBSurfaceEXT;
PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_EXT_discard_rectangles)
PFN_vkCmdSetDiscardRectangleEXT pfn_vkCmdSetDiscardRectangleEXT;
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2
PFN_vkCmdSetDiscardRectangleEnableEXT pfn_vkCmdSetDiscardRectangleEnableEXT;
PFN_vkCmdSetDiscardRectangleModeEXT pfn_vkCmdSetDiscardRectangleModeEXT;
#endif /* defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2 */
#if defined(VK_EXT_display_control)
PFN_vkDisplayPowerControlEXT pfn_vkDisplayPowerControlEXT;
PFN_vkGetSwapchainCounterEXT pfn_vkGetSwapchainCounterEXT;
PFN_vkRegisterDeviceEventEXT pfn_vkRegisterDeviceEventEXT;
PFN_vkRegisterDisplayEventEXT pfn_vkRegisterDisplayEventEXT;
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_EXT_display_surface_counter)
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_EXT_external_memory_host)
PFN_vkGetMemoryHostPointerPropertiesEXT pfn_vkGetMemoryHostPointerPropertiesEXT;
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_EXT_full_screen_exclusive)
PFN_vkAcquireFullScreenExclusiveModeEXT pfn_vkAcquireFullScreenExclusiveModeEXT;
PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT;
PFN_vkReleaseFullScreenExclusiveModeEXT pfn_vkReleaseFullScreenExclusiveModeEXT;
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_hdr_metadata)
PFN_vkSetHdrMetadataEXT pfn_vkSetHdrMetadataEXT;
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_EXT_headless_surface)
PFN_vkCreateHeadlessSurfaceEXT pfn_vkCreateHeadlessSurfaceEXT;
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_EXT_host_image_copy)
PFN_vkCopyImageToImageEXT pfn_vkCopyImageToImageEXT;
PFN_vkCopyImageToMemoryEXT pfn_vkCopyImageToMemoryEXT;
PFN_vkCopyMemoryToImageEXT pfn_vkCopyMemoryToImageEXT;
PFN_vkTransitionImageLayoutEXT pfn_vkTransitionImageLayoutEXT;
#endif /* defined(VK_EXT_host_image_copy) */
#if defined(VK_EXT_host_query_reset)
PFN_vkResetQueryPoolEXT pfn_vkResetQueryPoolEXT;
#endif /* defined(VK_EXT_host_query_reset) */
#if defined(VK_EXT_image_drm_format_modifier)
PFN_vkGetImageDrmFormatModifierPropertiesEXT pfn_vkGetImageDrmFormatModifierPropertiesEXT;
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_line_rasterization)
PFN_vkCmdSetLineStippleEXT pfn_vkCmdSetLineStippleEXT;
#endif /* defined(VK_EXT_line_rasterization) */
#if defined(VK_EXT_mesh_shader)
PFN_vkCmdDrawMeshTasksEXT pfn_vkCmdDrawMeshTasksEXT;
PFN_vkCmdDrawMeshTasksIndirectCountEXT pfn_vkCmdDrawMeshTasksIndirectCountEXT;
PFN_vkCmdDrawMeshTasksIndirectEXT pfn_vkCmdDrawMeshTasksIndirectEXT;
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_EXT_metal_objects)
PFN_vkExportMetalObjectsEXT pfn_vkExportMetalObjectsEXT;
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_EXT_metal_surface)
PFN_vkCreateMetalSurfaceEXT pfn_vkCreateMetalSurfaceEXT;
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_EXT_multi_draw)
PFN_vkCmdDrawMultiEXT pfn_vkCmdDrawMultiEXT;
PFN_vkCmdDrawMultiIndexedEXT pfn_vkCmdDrawMultiIndexedEXT;
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_opacity_micromap)
PFN_vkBuildMicromapsEXT pfn_vkBuildMicromapsEXT;
PFN_vkCmdBuildMicromapsEXT pfn_vkCmdBuildMicromapsEXT;
PFN_vkCmdCopyMemoryToMicromapEXT pfn_vkCmdCopyMemoryToMicromapEXT;
PFN_vkCmdCopyMicromapEXT pfn_vkCmdCopyMicromapEXT;
PFN_vkCmdCopyMicromapToMemoryEXT pfn_vkCmdCopyMicromapToMemoryEXT;
PFN_vkCmdWriteMicromapsPropertiesEXT pfn_vkCmdWriteMicromapsPropertiesEXT;
PFN_vkCopyMemoryToMicromapEXT pfn_vkCopyMemoryToMicromapEXT;
PFN_vkCopyMicromapEXT pfn_vkCopyMicromapEXT;
PFN_vkCopyMicromapToMemoryEXT pfn_vkCopyMicromapToMemoryEXT;
PFN_vkCreateMicromapEXT pfn_vkCreateMicromapEXT;
PFN_vkDestroyMicromapEXT pfn_vkDestroyMicromapEXT;
PFN_vkGetDeviceMicromapCompatibilityEXT pfn_vkGetDeviceMicromapCompatibilityEXT;
PFN_vkGetMicromapBuildSizesEXT pfn_vkGetMicromapBuildSizesEXT;
PFN_vkWriteMicromapsPropertiesEXT pfn_vkWriteMicromapsPropertiesEXT;
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_pageable_device_local_memory)
PFN_vkSetDeviceMemoryPriorityEXT pfn_vkSetDeviceMemoryPriorityEXT;
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_EXT_pipeline_properties)
PFN_vkGetPipelinePropertiesEXT pfn_vkGetPipelinePropertiesEXT;
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_EXT_private_data)
PFN_vkCreatePrivateDataSlotEXT pfn_vkCreatePrivateDataSlotEXT;
PFN_vkDestroyPrivateDataSlotEXT pfn_vkDestroyPrivateDataSlotEXT;
PFN_vkGetPrivateDataEXT pfn_vkGetPrivateDataEXT;
PFN_vkSetPrivateDataEXT pfn_vkSetPrivateDataEXT;
#endif /* defined(VK_EXT_private_data) */
#if defined(VK_EXT_sample_locations)
PFN_vkCmdSetSampleLocationsEXT pfn_vkCmdSetSampleLocationsEXT;
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT;
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_shader_module_identifier)
PFN_vkGetShaderModuleCreateInfoIdentifierEXT pfn_vkGetShaderModuleCreateInfoIdentifierEXT;
PFN_vkGetShaderModuleIdentifierEXT pfn_vkGetShaderModuleIdentifierEXT;
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_shader_object)
PFN_vkCmdBindShadersEXT pfn_vkCmdBindShadersEXT;
PFN_vkCreateShadersEXT pfn_vkCreateShadersEXT;
PFN_vkDestroyShaderEXT pfn_vkDestroyShaderEXT;
PFN_vkGetShaderBinaryDataEXT pfn_vkGetShaderBinaryDataEXT;
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_EXT_swapchain_maintenance1)
PFN_vkReleaseSwapchainImagesEXT pfn_vkReleaseSwapchainImagesEXT;
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_EXT_tooling_info)
PFN_vkGetPhysicalDeviceToolPropertiesEXT pfn_vkGetPhysicalDeviceToolPropertiesEXT;
#endif /* defined(VK_EXT_tooling_info) */
#if defined(VK_EXT_transform_feedback)
PFN_vkCmdBeginQueryIndexedEXT pfn_vkCmdBeginQueryIndexedEXT;
PFN_vkCmdBeginTransformFeedbackEXT pfn_vkCmdBeginTransformFeedbackEXT;
PFN_vkCmdBindTransformFeedbackBuffersEXT pfn_vkCmdBindTransformFeedbackBuffersEXT;
PFN_vkCmdDrawIndirectByteCountEXT pfn_vkCmdDrawIndirectByteCountEXT;
PFN_vkCmdEndQueryIndexedEXT pfn_vkCmdEndQueryIndexedEXT;
PFN_vkCmdEndTransformFeedbackEXT pfn_vkCmdEndTransformFeedbackEXT;
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_EXT_validation_cache)
PFN_vkCreateValidationCacheEXT pfn_vkCreateValidationCacheEXT;
PFN_vkDestroyValidationCacheEXT pfn_vkDestroyValidationCacheEXT;
PFN_vkGetValidationCacheDataEXT pfn_vkGetValidationCacheDataEXT;
PFN_vkMergeValidationCachesEXT pfn_vkMergeValidationCachesEXT;
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_FUCHSIA_buffer_collection)
PFN_vkCreateBufferCollectionFUCHSIA pfn_vkCreateBufferCollectionFUCHSIA;
PFN_vkDestroyBufferCollectionFUCHSIA pfn_vkDestroyBufferCollectionFUCHSIA;
PFN_vkGetBufferCollectionPropertiesFUCHSIA pfn_vkGetBufferCollectionPropertiesFUCHSIA;
PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA;
PFN_vkSetBufferCollectionImageConstraintsFUCHSIA pfn_vkSetBufferCollectionImageConstraintsFUCHSIA;
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_FUCHSIA_external_memory)
PFN_vkGetMemoryZirconHandleFUCHSIA pfn_vkGetMemoryZirconHandleFUCHSIA;
PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA;
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_FUCHSIA_external_semaphore)
PFN_vkGetSemaphoreZirconHandleFUCHSIA pfn_vkGetSemaphoreZirconHandleFUCHSIA;
PFN_vkImportSemaphoreZirconHandleFUCHSIA pfn_vkImportSemaphoreZirconHandleFUCHSIA;
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_FUCHSIA_imagepipe_surface)
PFN_vkCreateImagePipeSurfaceFUCHSIA pfn_vkCreateImagePipeSurfaceFUCHSIA;
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_GGP_stream_descriptor_surface)
PFN_vkCreateStreamDescriptorSurfaceGGP pfn_vkCreateStreamDescriptorSurfaceGGP;
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_GOOGLE_display_timing)
PFN_vkGetPastPresentationTimingGOOGLE pfn_vkGetPastPresentationTimingGOOGLE;
PFN_vkGetRefreshCycleDurationGOOGLE pfn_vkGetRefreshCycleDurationGOOGLE;
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_HUAWEI_cluster_culling_shader)
PFN_vkCmdDrawClusterHUAWEI pfn_vkCmdDrawClusterHUAWEI;
PFN_vkCmdDrawClusterIndirectHUAWEI pfn_vkCmdDrawClusterIndirectHUAWEI;
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_HUAWEI_invocation_mask)
PFN_vkCmdBindInvocationMaskHUAWEI pfn_vkCmdBindInvocationMaskHUAWEI;
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_HUAWEI_subpass_shading)
PFN_vkCmdSubpassShadingHUAWEI pfn_vkCmdSubpassShadingHUAWEI;
PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_INTEL_performance_query)
PFN_vkAcquirePerformanceConfigurationINTEL pfn_vkAcquirePerformanceConfigurationINTEL;
PFN_vkCmdSetPerformanceMarkerINTEL pfn_vkCmdSetPerformanceMarkerINTEL;
PFN_vkCmdSetPerformanceOverrideINTEL pfn_vkCmdSetPerformanceOverrideINTEL;
PFN_vkCmdSetPerformanceStreamMarkerINTEL pfn_vkCmdSetPerformanceStreamMarkerINTEL;
PFN_vkGetPerformanceParameterINTEL pfn_vkGetPerformanceParameterINTEL;
PFN_vkInitializePerformanceApiINTEL pfn_vkInitializePerformanceApiINTEL;
PFN_vkQueueSetPerformanceConfigurationINTEL pfn_vkQueueSetPerformanceConfigurationINTEL;
PFN_vkReleasePerformanceConfigurationINTEL pfn_vkReleasePerformanceConfigurationINTEL;
PFN_vkUninitializePerformanceApiINTEL pfn_vkUninitializePerformanceApiINTEL;
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_acceleration_structure)
PFN_vkBuildAccelerationStructuresKHR pfn_vkBuildAccelerationStructuresKHR;
PFN_vkCmdBuildAccelerationStructuresIndirectKHR pfn_vkCmdBuildAccelerationStructuresIndirectKHR;
PFN_vkCmdBuildAccelerationStructuresKHR pfn_vkCmdBuildAccelerationStructuresKHR;
PFN_vkCmdCopyAccelerationStructureKHR pfn_vkCmdCopyAccelerationStructureKHR;
PFN_vkCmdCopyAccelerationStructureToMemoryKHR pfn_vkCmdCopyAccelerationStructureToMemoryKHR;
PFN_vkCmdCopyMemoryToAccelerationStructureKHR pfn_vkCmdCopyMemoryToAccelerationStructureKHR;
PFN_vkCmdWriteAccelerationStructuresPropertiesKHR pfn_vkCmdWriteAccelerationStructuresPropertiesKHR;
PFN_vkCopyAccelerationStructureKHR pfn_vkCopyAccelerationStructureKHR;
PFN_vkCopyAccelerationStructureToMemoryKHR pfn_vkCopyAccelerationStructureToMemoryKHR;
PFN_vkCopyMemoryToAccelerationStructureKHR pfn_vkCopyMemoryToAccelerationStructureKHR;
PFN_vkCreateAccelerationStructureKHR pfn_vkCreateAccelerationStructureKHR;
PFN_vkDestroyAccelerationStructureKHR pfn_vkDestroyAccelerationStructureKHR;
PFN_vkGetAccelerationStructureBuildSizesKHR pfn_vkGetAccelerationStructureBuildSizesKHR;
PFN_vkGetAccelerationStructureDeviceAddressKHR pfn_vkGetAccelerationStructureDeviceAddressKHR;
PFN_vkGetDeviceAccelerationStructureCompatibilityKHR pfn_vkGetDeviceAccelerationStructureCompatibilityKHR;
PFN_vkWriteAccelerationStructuresPropertiesKHR pfn_vkWriteAccelerationStructuresPropertiesKHR;
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_android_surface)
PFN_vkCreateAndroidSurfaceKHR pfn_vkCreateAndroidSurfaceKHR;
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_KHR_bind_memory2)
PFN_vkBindBufferMemory2KHR pfn_vkBindBufferMemory2KHR;
PFN_vkBindImageMemory2KHR pfn_vkBindImageMemory2KHR;
#endif /* defined(VK_KHR_bind_memory2) */
#if defined(VK_KHR_buffer_device_address)
PFN_vkGetBufferDeviceAddressKHR pfn_vkGetBufferDeviceAddressKHR;
PFN_vkGetBufferOpaqueCaptureAddressKHR pfn_vkGetBufferOpaqueCaptureAddressKHR;
PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
#endif /* defined(VK_KHR_buffer_device_address) */
#if defined(VK_KHR_calibrated_timestamps)
PFN_vkGetCalibratedTimestampsKHR pfn_vkGetCalibratedTimestampsKHR;
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_KHR_cooperative_matrix)
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_KHR_copy_commands2)
PFN_vkCmdBlitImage2KHR pfn_vkCmdBlitImage2KHR;
PFN_vkCmdCopyBuffer2KHR pfn_vkCmdCopyBuffer2KHR;
PFN_vkCmdCopyBufferToImage2KHR pfn_vkCmdCopyBufferToImage2KHR;
PFN_vkCmdCopyImage2KHR pfn_vkCmdCopyImage2KHR;
PFN_vkCmdCopyImageToBuffer2KHR pfn_vkCmdCopyImageToBuffer2KHR;
PFN_vkCmdResolveImage2KHR pfn_vkCmdResolveImage2KHR;
#endif /* defined(VK_KHR_copy_commands2) */
#if defined(VK_KHR_create_renderpass2)
PFN_vkCmdBeginRenderPass2KHR pfn_vkCmdBeginRenderPass2KHR;
PFN_vkCmdEndRenderPass2KHR pfn_vkCmdEndRenderPass2KHR;
PFN_vkCmdNextSubpass2KHR pfn_vkCmdNextSubpass2KHR;
PFN_vkCreateRenderPass2KHR pfn_vkCreateRenderPass2KHR;
#endif /* defined(VK_KHR_create_renderpass2) */
#if defined(VK_KHR_deferred_host_operations)
PFN_vkCreateDeferredOperationKHR pfn_vkCreateDeferredOperationKHR;
PFN_vkDeferredOperationJoinKHR pfn_vkDeferredOperationJoinKHR;
PFN_vkDestroyDeferredOperationKHR pfn_vkDestroyDeferredOperationKHR;
PFN_vkGetDeferredOperationMaxConcurrencyKHR pfn_vkGetDeferredOperationMaxConcurrencyKHR;
PFN_vkGetDeferredOperationResultKHR pfn_vkGetDeferredOperationResultKHR;
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_descriptor_update_template)
PFN_vkCreateDescriptorUpdateTemplateKHR pfn_vkCreateDescriptorUpdateTemplateKHR;
PFN_vkDestroyDescriptorUpdateTemplateKHR pfn_vkDestroyDescriptorUpdateTemplateKHR;
PFN_vkUpdateDescriptorSetWithTemplateKHR pfn_vkUpdateDescriptorSetWithTemplateKHR;
#endif /* defined(VK_KHR_descriptor_update_template) */
#if defined(VK_KHR_device_group)
PFN_vkCmdDispatchBaseKHR pfn_vkCmdDispatchBaseKHR;
PFN_vkCmdSetDeviceMaskKHR pfn_vkCmdSetDeviceMaskKHR;
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR;
#endif /* defined(VK_KHR_device_group) */
#if defined(VK_KHR_device_group_creation)
PFN_vkEnumeratePhysicalDeviceGroupsKHR pfn_vkEnumeratePhysicalDeviceGroupsKHR;
#endif /* defined(VK_KHR_device_group_creation) */
#if defined(VK_KHR_display)
PFN_vkCreateDisplayModeKHR pfn_vkCreateDisplayModeKHR;
PFN_vkCreateDisplayPlaneSurfaceKHR pfn_vkCreateDisplayPlaneSurfaceKHR;
PFN_vkGetDisplayModePropertiesKHR pfn_vkGetDisplayModePropertiesKHR;
PFN_vkGetDisplayPlaneCapabilitiesKHR pfn_vkGetDisplayPlaneCapabilitiesKHR;
PFN_vkGetDisplayPlaneSupportedDisplaysKHR pfn_vkGetDisplayPlaneSupportedDisplaysKHR;
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR pfn_vkGetPhysicalDeviceDisplayPropertiesKHR;
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_display_swapchain)
PFN_vkCreateSharedSwapchainsKHR pfn_vkCreateSharedSwapchainsKHR;
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_KHR_draw_indirect_count)
PFN_vkCmdDrawIndexedIndirectCountKHR pfn_vkCmdDrawIndexedIndirectCountKHR;
PFN_vkCmdDrawIndirectCountKHR pfn_vkCmdDrawIndirectCountKHR;
#endif /* defined(VK_KHR_draw_indirect_count) */
#if defined(VK_KHR_dynamic_rendering)
PFN_vkCmdBeginRenderingKHR pfn_vkCmdBeginRenderingKHR;
PFN_vkCmdEndRenderingKHR pfn_vkCmdEndRenderingKHR;
#endif /* defined(VK_KHR_dynamic_rendering) */
#if defined(VK_KHR_dynamic_rendering_local_read)
PFN_vkCmdSetRenderingAttachmentLocationsKHR pfn_vkCmdSetRenderingAttachmentLocationsKHR;
PFN_vkCmdSetRenderingInputAttachmentIndicesKHR pfn_vkCmdSetRenderingInputAttachmentIndicesKHR;
#endif /* defined(VK_KHR_dynamic_rendering_local_read) */
#if defined(VK_KHR_external_fence_capabilities)
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR;
#endif /* defined(VK_KHR_external_fence_capabilities) */
#if defined(VK_KHR_external_fence_fd)
PFN_vkGetFenceFdKHR pfn_vkGetFenceFdKHR;
PFN_vkImportFenceFdKHR pfn_vkImportFenceFdKHR;
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
PFN_vkGetFenceWin32HandleKHR pfn_vkGetFenceWin32HandleKHR;
PFN_vkImportFenceWin32HandleKHR pfn_vkImportFenceWin32HandleKHR;
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_KHR_external_memory_capabilities)
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
#endif /* defined(VK_KHR_external_memory_capabilities) */
#if defined(VK_KHR_external_memory_fd)
PFN_vkGetMemoryFdKHR pfn_vkGetMemoryFdKHR;
PFN_vkGetMemoryFdPropertiesKHR pfn_vkGetMemoryFdPropertiesKHR;
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_KHR_external_memory_win32)
PFN_vkGetMemoryWin32HandleKHR pfn_vkGetMemoryWin32HandleKHR;
PFN_vkGetMemoryWin32HandlePropertiesKHR pfn_vkGetMemoryWin32HandlePropertiesKHR;
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_KHR_external_semaphore_capabilities)
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
#endif /* defined(VK_KHR_external_semaphore_capabilities) */
#if defined(VK_KHR_external_semaphore_fd)
PFN_vkGetSemaphoreFdKHR pfn_vkGetSemaphoreFdKHR;
PFN_vkImportSemaphoreFdKHR pfn_vkImportSemaphoreFdKHR;
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
PFN_vkGetSemaphoreWin32HandleKHR pfn_vkGetSemaphoreWin32HandleKHR;
PFN_vkImportSemaphoreWin32HandleKHR pfn_vkImportSemaphoreWin32HandleKHR;
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_KHR_fragment_shading_rate)
PFN_vkCmdSetFragmentShadingRateKHR pfn_vkCmdSetFragmentShadingRateKHR;
PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR;
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_KHR_get_display_properties2)
PFN_vkGetDisplayModeProperties2KHR pfn_vkGetDisplayModeProperties2KHR;
PFN_vkGetDisplayPlaneCapabilities2KHR pfn_vkGetDisplayPlaneCapabilities2KHR;
PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
PFN_vkGetPhysicalDeviceDisplayProperties2KHR pfn_vkGetPhysicalDeviceDisplayProperties2KHR;
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_get_memory_requirements2)
PFN_vkGetBufferMemoryRequirements2KHR pfn_vkGetBufferMemoryRequirements2KHR;
PFN_vkGetImageMemoryRequirements2KHR pfn_vkGetImageMemoryRequirements2KHR;
PFN_vkGetImageSparseMemoryRequirements2KHR pfn_vkGetImageSparseMemoryRequirements2KHR;
#endif /* defined(VK_KHR_get_memory_requirements2) */
#if defined(VK_KHR_get_physical_device_properties2)
PFN_vkGetPhysicalDeviceFeatures2KHR pfn_vkGetPhysicalDeviceFeatures2KHR;
PFN_vkGetPhysicalDeviceFormatProperties2KHR pfn_vkGetPhysicalDeviceFormatProperties2KHR;
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR pfn_vkGetPhysicalDeviceImageFormatProperties2KHR;
PFN_vkGetPhysicalDeviceMemoryProperties2KHR pfn_vkGetPhysicalDeviceMemoryProperties2KHR;
PFN_vkGetPhysicalDeviceProperties2KHR pfn_vkGetPhysicalDeviceProperties2KHR;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
#endif /* defined(VK_KHR_get_physical_device_properties2) */
#if defined(VK_KHR_get_surface_capabilities2)
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR pfn_vkGetPhysicalDeviceSurfaceFormats2KHR;
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_KHR_line_rasterization)
PFN_vkCmdSetLineStippleKHR pfn_vkCmdSetLineStippleKHR;
#endif /* defined(VK_KHR_line_rasterization) */
#if defined(VK_KHR_maintenance1)
PFN_vkTrimCommandPoolKHR pfn_vkTrimCommandPoolKHR;
#endif /* defined(VK_KHR_maintenance1) */
#if defined(VK_KHR_maintenance3)
PFN_vkGetDescriptorSetLayoutSupportKHR pfn_vkGetDescriptorSetLayoutSupportKHR;
#endif /* defined(VK_KHR_maintenance3) */
#if defined(VK_KHR_maintenance4)
PFN_vkGetDeviceBufferMemoryRequirementsKHR pfn_vkGetDeviceBufferMemoryRequirementsKHR;
PFN_vkGetDeviceImageMemoryRequirementsKHR pfn_vkGetDeviceImageMemoryRequirementsKHR;
PFN_vkGetDeviceImageSparseMemoryRequirementsKHR pfn_vkGetDeviceImageSparseMemoryRequirementsKHR;
#endif /* defined(VK_KHR_maintenance4) */
#if defined(VK_KHR_maintenance5)
PFN_vkCmdBindIndexBuffer2KHR pfn_vkCmdBindIndexBuffer2KHR;
PFN_vkGetDeviceImageSubresourceLayoutKHR pfn_vkGetDeviceImageSubresourceLayoutKHR;
PFN_vkGetImageSubresourceLayout2KHR pfn_vkGetImageSubresourceLayout2KHR;
PFN_vkGetRenderingAreaGranularityKHR pfn_vkGetRenderingAreaGranularityKHR;
#endif /* defined(VK_KHR_maintenance5) */
#if defined(VK_KHR_maintenance6)
PFN_vkCmdBindDescriptorSets2KHR pfn_vkCmdBindDescriptorSets2KHR;
PFN_vkCmdPushConstants2KHR pfn_vkCmdPushConstants2KHR;
#endif /* defined(VK_KHR_maintenance6) */
#if defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor)
PFN_vkCmdPushDescriptorSet2KHR pfn_vkCmdPushDescriptorSet2KHR;
PFN_vkCmdPushDescriptorSetWithTemplate2KHR pfn_vkCmdPushDescriptorSetWithTemplate2KHR;
#endif /* defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
PFN_vkCmdSetDescriptorBufferOffsets2EXT pfn_vkCmdSetDescriptorBufferOffsets2EXT;
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_KHR_map_memory2)
PFN_vkMapMemory2KHR pfn_vkMapMemory2KHR;
PFN_vkUnmapMemory2KHR pfn_vkUnmapMemory2KHR;
#endif /* defined(VK_KHR_map_memory2) */
#if defined(VK_KHR_performance_query)
PFN_vkAcquireProfilingLockKHR pfn_vkAcquireProfilingLockKHR;
PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
PFN_vkReleaseProfilingLockKHR pfn_vkReleaseProfilingLockKHR;
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_pipeline_executable_properties)
PFN_vkGetPipelineExecutableInternalRepresentationsKHR pfn_vkGetPipelineExecutableInternalRepresentationsKHR;
PFN_vkGetPipelineExecutablePropertiesKHR pfn_vkGetPipelineExecutablePropertiesKHR;
PFN_vkGetPipelineExecutableStatisticsKHR pfn_vkGetPipelineExecutableStatisticsKHR;
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_KHR_present_wait)
PFN_vkWaitForPresentKHR pfn_vkWaitForPresentKHR;
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_KHR_push_descriptor)
PFN_vkCmdPushDescriptorSetKHR pfn_vkCmdPushDescriptorSetKHR;
#endif /* defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
PFN_vkCmdTraceRaysIndirect2KHR pfn_vkCmdTraceRaysIndirect2KHR;
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_pipeline)
PFN_vkCmdSetRayTracingPipelineStackSizeKHR pfn_vkCmdSetRayTracingPipelineStackSizeKHR;
PFN_vkCmdTraceRaysIndirectKHR pfn_vkCmdTraceRaysIndirectKHR;
PFN_vkCmdTraceRaysKHR pfn_vkCmdTraceRaysKHR;
PFN_vkCreateRayTracingPipelinesKHR pfn_vkCreateRayTracingPipelinesKHR;
PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
PFN_vkGetRayTracingShaderGroupHandlesKHR pfn_vkGetRayTracingShaderGroupHandlesKHR;
PFN_vkGetRayTracingShaderGroupStackSizeKHR pfn_vkGetRayTracingShaderGroupStackSizeKHR;
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_sampler_ycbcr_conversion)
PFN_vkCreateSamplerYcbcrConversionKHR pfn_vkCreateSamplerYcbcrConversionKHR;
PFN_vkDestroySamplerYcbcrConversionKHR pfn_vkDestroySamplerYcbcrConversionKHR;
#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */
#if defined(VK_KHR_shared_presentable_image)
PFN_vkGetSwapchainStatusKHR pfn_vkGetSwapchainStatusKHR;
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_KHR_surface)
PFN_vkDestroySurfaceKHR pfn_vkDestroySurfaceKHR;
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR pfn_vkGetPhysicalDeviceSurfaceFormatsKHR;
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR pfn_vkGetPhysicalDeviceSurfacePresentModesKHR;
PFN_vkGetPhysicalDeviceSurfaceSupportKHR pfn_vkGetPhysicalDeviceSurfaceSupportKHR;
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_swapchain)
PFN_vkAcquireNextImageKHR pfn_vkAcquireNextImageKHR;
PFN_vkCreateSwapchainKHR pfn_vkCreateSwapchainKHR;
PFN_vkDestroySwapchainKHR pfn_vkDestroySwapchainKHR;
PFN_vkGetSwapchainImagesKHR pfn_vkGetSwapchainImagesKHR;
PFN_vkQueuePresentKHR pfn_vkQueuePresentKHR;
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_synchronization2)
PFN_vkCmdPipelineBarrier2KHR pfn_vkCmdPipelineBarrier2KHR;
PFN_vkCmdResetEvent2KHR pfn_vkCmdResetEvent2KHR;
PFN_vkCmdSetEvent2KHR pfn_vkCmdSetEvent2KHR;
PFN_vkCmdWaitEvents2KHR pfn_vkCmdWaitEvents2KHR;
PFN_vkCmdWriteTimestamp2KHR pfn_vkCmdWriteTimestamp2KHR;
PFN_vkQueueSubmit2KHR pfn_vkQueueSubmit2KHR;
#endif /* defined(VK_KHR_synchronization2) */
#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)
PFN_vkCmdWriteBufferMarker2AMD pfn_vkCmdWriteBufferMarker2AMD;
#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */
#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)
PFN_vkGetQueueCheckpointData2NV pfn_vkGetQueueCheckpointData2NV;
#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_KHR_timeline_semaphore)
PFN_vkGetSemaphoreCounterValueKHR pfn_vkGetSemaphoreCounterValueKHR;
PFN_vkSignalSemaphoreKHR pfn_vkSignalSemaphoreKHR;
PFN_vkWaitSemaphoresKHR pfn_vkWaitSemaphoresKHR;
#endif /* defined(VK_KHR_timeline_semaphore) */
#if defined(VK_KHR_video_decode_queue)
PFN_vkCmdDecodeVideoKHR pfn_vkCmdDecodeVideoKHR;
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_encode_queue)
PFN_vkCmdEncodeVideoKHR pfn_vkCmdEncodeVideoKHR;
PFN_vkGetEncodedVideoSessionParametersKHR pfn_vkGetEncodedVideoSessionParametersKHR;
PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
PFN_vkBindVideoSessionMemoryKHR pfn_vkBindVideoSessionMemoryKHR;
PFN_vkCmdBeginVideoCodingKHR pfn_vkCmdBeginVideoCodingKHR;
PFN_vkCmdControlVideoCodingKHR pfn_vkCmdControlVideoCodingKHR;
PFN_vkCmdEndVideoCodingKHR pfn_vkCmdEndVideoCodingKHR;
PFN_vkCreateVideoSessionKHR pfn_vkCreateVideoSessionKHR;
PFN_vkCreateVideoSessionParametersKHR pfn_vkCreateVideoSessionParametersKHR;
PFN_vkDestroyVideoSessionKHR pfn_vkDestroyVideoSessionKHR;
PFN_vkDestroyVideoSessionParametersKHR pfn_vkDestroyVideoSessionParametersKHR;
PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR;
PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
PFN_vkGetVideoSessionMemoryRequirementsKHR pfn_vkGetVideoSessionMemoryRequirementsKHR;
PFN_vkUpdateVideoSessionParametersKHR pfn_vkUpdateVideoSessionParametersKHR;
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_wayland_surface)
PFN_vkCreateWaylandSurfaceKHR pfn_vkCreateWaylandSurfaceKHR;
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_win32_surface)
PFN_vkCreateWin32SurfaceKHR pfn_vkCreateWin32SurfaceKHR;
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR;
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_KHR_xcb_surface)
PFN_vkCreateXcbSurfaceKHR pfn_vkCreateXcbSurfaceKHR;
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR;
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_xlib_surface)
PFN_vkCreateXlibSurfaceKHR pfn_vkCreateXlibSurfaceKHR;
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR;
#endif /* defined(VK_KHR_xlib_surface) */
#if defined(VK_MVK_ios_surface)
PFN_vkCreateIOSSurfaceMVK pfn_vkCreateIOSSurfaceMVK;
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MVK_macos_surface)
PFN_vkCreateMacOSSurfaceMVK pfn_vkCreateMacOSSurfaceMVK;
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_NN_vi_surface)
PFN_vkCreateViSurfaceNN pfn_vkCreateViSurfaceNN;
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_NVX_binary_import)
PFN_vkCmdCuLaunchKernelNVX pfn_vkCmdCuLaunchKernelNVX;
PFN_vkCreateCuFunctionNVX pfn_vkCreateCuFunctionNVX;
PFN_vkCreateCuModuleNVX pfn_vkCreateCuModuleNVX;
PFN_vkDestroyCuFunctionNVX pfn_vkDestroyCuFunctionNVX;
PFN_vkDestroyCuModuleNVX pfn_vkDestroyCuModuleNVX;
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NVX_image_view_handle)
PFN_vkGetImageViewAddressNVX pfn_vkGetImageViewAddressNVX;
PFN_vkGetImageViewHandleNVX pfn_vkGetImageViewHandleNVX;
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_NV_acquire_winrt_display)
PFN_vkAcquireWinrtDisplayNV pfn_vkAcquireWinrtDisplayNV;
PFN_vkGetWinrtDisplayNV pfn_vkGetWinrtDisplayNV;
#endif /* defined(VK_NV_acquire_winrt_display) */
#if defined(VK_NV_clip_space_w_scaling)
PFN_vkCmdSetViewportWScalingNV pfn_vkCmdSetViewportWScalingNV;
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_NV_cooperative_matrix)
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_copy_memory_indirect)
PFN_vkCmdCopyMemoryIndirectNV pfn_vkCmdCopyMemoryIndirectNV;
PFN_vkCmdCopyMemoryToImageIndirectNV pfn_vkCmdCopyMemoryToImageIndirectNV;
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_coverage_reduction_mode)
PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_NV_cuda_kernel_launch)
PFN_vkCmdCudaLaunchKernelNV pfn_vkCmdCudaLaunchKernelNV;
PFN_vkCreateCudaFunctionNV pfn_vkCreateCudaFunctionNV;
PFN_vkCreateCudaModuleNV pfn_vkCreateCudaModuleNV;
PFN_vkDestroyCudaFunctionNV pfn_vkDestroyCudaFunctionNV;
PFN_vkDestroyCudaModuleNV pfn_vkDestroyCudaModuleNV;
PFN_vkGetCudaModuleCacheNV pfn_vkGetCudaModuleCacheNV;
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_NV_device_diagnostic_checkpoints)
PFN_vkCmdSetCheckpointNV pfn_vkCmdSetCheckpointNV;
PFN_vkGetQueueCheckpointDataNV pfn_vkGetQueueCheckpointDataNV;
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_NV_device_generated_commands)
PFN_vkCmdBindPipelineShaderGroupNV pfn_vkCmdBindPipelineShaderGroupNV;
PFN_vkCmdExecuteGeneratedCommandsNV pfn_vkCmdExecuteGeneratedCommandsNV;
PFN_vkCmdPreprocessGeneratedCommandsNV pfn_vkCmdPreprocessGeneratedCommandsNV;
PFN_vkCreateIndirectCommandsLayoutNV pfn_vkCreateIndirectCommandsLayoutNV;
PFN_vkDestroyIndirectCommandsLayoutNV pfn_vkDestroyIndirectCommandsLayoutNV;
PFN_vkGetGeneratedCommandsMemoryRequirementsNV pfn_vkGetGeneratedCommandsMemoryRequirementsNV;
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_NV_device_generated_commands_compute)
PFN_vkCmdUpdatePipelineIndirectBufferNV pfn_vkCmdUpdatePipelineIndirectBufferNV;
PFN_vkGetPipelineIndirectDeviceAddressNV pfn_vkGetPipelineIndirectDeviceAddressNV;
PFN_vkGetPipelineIndirectMemoryRequirementsNV pfn_vkGetPipelineIndirectMemoryRequirementsNV;
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_NV_external_memory_capabilities)
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_NV_external_memory_rdma)
PFN_vkGetMemoryRemoteAddressNV pfn_vkGetMemoryRemoteAddressNV;
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_NV_external_memory_win32)
PFN_vkGetMemoryWin32HandleNV pfn_vkGetMemoryWin32HandleNV;
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_NV_fragment_shading_rate_enums)
PFN_vkCmdSetFragmentShadingRateEnumNV pfn_vkCmdSetFragmentShadingRateEnumNV;
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_NV_low_latency2)
PFN_vkGetLatencyTimingsNV pfn_vkGetLatencyTimingsNV;
PFN_vkLatencySleepNV pfn_vkLatencySleepNV;
PFN_vkQueueNotifyOutOfBandNV pfn_vkQueueNotifyOutOfBandNV;
PFN_vkSetLatencyMarkerNV pfn_vkSetLatencyMarkerNV;
PFN_vkSetLatencySleepModeNV pfn_vkSetLatencySleepModeNV;
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_memory_decompression)
PFN_vkCmdDecompressMemoryIndirectCountNV pfn_vkCmdDecompressMemoryIndirectCountNV;
PFN_vkCmdDecompressMemoryNV pfn_vkCmdDecompressMemoryNV;
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_mesh_shader)
PFN_vkCmdDrawMeshTasksIndirectCountNV pfn_vkCmdDrawMeshTasksIndirectCountNV;
PFN_vkCmdDrawMeshTasksIndirectNV pfn_vkCmdDrawMeshTasksIndirectNV;
PFN_vkCmdDrawMeshTasksNV pfn_vkCmdDrawMeshTasksNV;
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_NV_optical_flow)
PFN_vkBindOpticalFlowSessionImageNV pfn_vkBindOpticalFlowSessionImageNV;
PFN_vkCmdOpticalFlowExecuteNV pfn_vkCmdOpticalFlowExecuteNV;
PFN_vkCreateOpticalFlowSessionNV pfn_vkCreateOpticalFlowSessionNV;
PFN_vkDestroyOpticalFlowSessionNV pfn_vkDestroyOpticalFlowSessionNV;
PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_ray_tracing)
PFN_vkBindAccelerationStructureMemoryNV pfn_vkBindAccelerationStructureMemoryNV;
PFN_vkCmdBuildAccelerationStructureNV pfn_vkCmdBuildAccelerationStructureNV;
PFN_vkCmdCopyAccelerationStructureNV pfn_vkCmdCopyAccelerationStructureNV;
PFN_vkCmdTraceRaysNV pfn_vkCmdTraceRaysNV;
PFN_vkCmdWriteAccelerationStructuresPropertiesNV pfn_vkCmdWriteAccelerationStructuresPropertiesNV;
PFN_vkCompileDeferredNV pfn_vkCompileDeferredNV;
PFN_vkCreateAccelerationStructureNV pfn_vkCreateAccelerationStructureNV;
PFN_vkCreateRayTracingPipelinesNV pfn_vkCreateRayTracingPipelinesNV;
PFN_vkDestroyAccelerationStructureNV pfn_vkDestroyAccelerationStructureNV;
PFN_vkGetAccelerationStructureHandleNV pfn_vkGetAccelerationStructureHandleNV;
PFN_vkGetAccelerationStructureMemoryRequirementsNV pfn_vkGetAccelerationStructureMemoryRequirementsNV;
PFN_vkGetRayTracingShaderGroupHandlesNV pfn_vkGetRayTracingShaderGroupHandlesNV;
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2
PFN_vkCmdSetExclusiveScissorEnableNV pfn_vkCmdSetExclusiveScissorEnableNV;
#endif /* defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2 */
#if defined(VK_NV_scissor_exclusive)
PFN_vkCmdSetExclusiveScissorNV pfn_vkCmdSetExclusiveScissorNV;
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_shading_rate_image)
PFN_vkCmdBindShadingRateImageNV pfn_vkCmdBindShadingRateImageNV;
PFN_vkCmdSetCoarseSampleOrderNV pfn_vkCmdSetCoarseSampleOrderNV;
PFN_vkCmdSetViewportShadingRatePaletteNV pfn_vkCmdSetViewportShadingRatePaletteNV;
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_QCOM_tile_properties)
PFN_vkGetDynamicRenderingTilePropertiesQCOM pfn_vkGetDynamicRenderingTilePropertiesQCOM;
PFN_vkGetFramebufferTilePropertiesQCOM pfn_vkGetFramebufferTilePropertiesQCOM;
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_QNX_external_memory_screen_buffer)
PFN_vkGetScreenBufferPropertiesQNX pfn_vkGetScreenBufferPropertiesQNX;
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_QNX_screen_surface)
PFN_vkCreateScreenSurfaceQNX pfn_vkCreateScreenSurfaceQNX;
PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX;
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
PFN_vkGetDescriptorSetHostMappingVALVE pfn_vkGetDescriptorSetHostMappingVALVE;
PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object))
PFN_vkCmdBindVertexBuffers2EXT pfn_vkCmdBindVertexBuffers2EXT;
PFN_vkCmdSetCullModeEXT pfn_vkCmdSetCullModeEXT;
PFN_vkCmdSetDepthBoundsTestEnableEXT pfn_vkCmdSetDepthBoundsTestEnableEXT;
PFN_vkCmdSetDepthCompareOpEXT pfn_vkCmdSetDepthCompareOpEXT;
PFN_vkCmdSetDepthTestEnableEXT pfn_vkCmdSetDepthTestEnableEXT;
PFN_vkCmdSetDepthWriteEnableEXT pfn_vkCmdSetDepthWriteEnableEXT;
PFN_vkCmdSetFrontFaceEXT pfn_vkCmdSetFrontFaceEXT;
PFN_vkCmdSetPrimitiveTopologyEXT pfn_vkCmdSetPrimitiveTopologyEXT;
PFN_vkCmdSetScissorWithCountEXT pfn_vkCmdSetScissorWithCountEXT;
PFN_vkCmdSetStencilOpEXT pfn_vkCmdSetStencilOpEXT;
PFN_vkCmdSetStencilTestEnableEXT pfn_vkCmdSetStencilTestEnableEXT;
PFN_vkCmdSetViewportWithCountEXT pfn_vkCmdSetViewportWithCountEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object))
PFN_vkCmdSetDepthBiasEnableEXT pfn_vkCmdSetDepthBiasEnableEXT;
PFN_vkCmdSetLogicOpEXT pfn_vkCmdSetLogicOpEXT;
PFN_vkCmdSetPatchControlPointsEXT pfn_vkCmdSetPatchControlPointsEXT;
PFN_vkCmdSetPrimitiveRestartEnableEXT pfn_vkCmdSetPrimitiveRestartEnableEXT;
PFN_vkCmdSetRasterizerDiscardEnableEXT pfn_vkCmdSetRasterizerDiscardEnableEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object))
PFN_vkCmdSetAlphaToCoverageEnableEXT pfn_vkCmdSetAlphaToCoverageEnableEXT;
PFN_vkCmdSetAlphaToOneEnableEXT pfn_vkCmdSetAlphaToOneEnableEXT;
PFN_vkCmdSetColorBlendEnableEXT pfn_vkCmdSetColorBlendEnableEXT;
PFN_vkCmdSetColorBlendEquationEXT pfn_vkCmdSetColorBlendEquationEXT;
PFN_vkCmdSetColorWriteMaskEXT pfn_vkCmdSetColorWriteMaskEXT;
PFN_vkCmdSetDepthClampEnableEXT pfn_vkCmdSetDepthClampEnableEXT;
PFN_vkCmdSetLogicOpEnableEXT pfn_vkCmdSetLogicOpEnableEXT;
PFN_vkCmdSetPolygonModeEXT pfn_vkCmdSetPolygonModeEXT;
PFN_vkCmdSetRasterizationSamplesEXT pfn_vkCmdSetRasterizationSamplesEXT;
PFN_vkCmdSetSampleMaskEXT pfn_vkCmdSetSampleMaskEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object))
PFN_vkCmdSetTessellationDomainOriginEXT pfn_vkCmdSetTessellationDomainOriginEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback))
PFN_vkCmdSetRasterizationStreamEXT pfn_vkCmdSetRasterizationStreamEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
PFN_vkCmdSetConservativeRasterizationModeEXT pfn_vkCmdSetConservativeRasterizationModeEXT;
PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable))
PFN_vkCmdSetDepthClipEnableEXT pfn_vkCmdSetDepthClipEnableEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations))
PFN_vkCmdSetSampleLocationsEnableEXT pfn_vkCmdSetSampleLocationsEnableEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced))
PFN_vkCmdSetColorBlendAdvancedEXT pfn_vkCmdSetColorBlendAdvancedEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex))
PFN_vkCmdSetProvokingVertexModeEXT pfn_vkCmdSetProvokingVertexModeEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
PFN_vkCmdSetLineRasterizationModeEXT pfn_vkCmdSetLineRasterizationModeEXT;
PFN_vkCmdSetLineStippleEnableEXT pfn_vkCmdSetLineStippleEnableEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control))
PFN_vkCmdSetDepthClipNegativeOneToOneEXT pfn_vkCmdSetDepthClipNegativeOneToOneEXT;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
PFN_vkCmdSetViewportWScalingEnableNV pfn_vkCmdSetViewportWScalingEnableNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
PFN_vkCmdSetViewportSwizzleNV pfn_vkCmdSetViewportSwizzleNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
PFN_vkCmdSetCoverageToColorEnableNV pfn_vkCmdSetCoverageToColorEnableNV;
PFN_vkCmdSetCoverageToColorLocationNV pfn_vkCmdSetCoverageToColorLocationNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
PFN_vkCmdSetCoverageModulationModeNV pfn_vkCmdSetCoverageModulationModeNV;
PFN_vkCmdSetCoverageModulationTableEnableNV pfn_vkCmdSetCoverageModulationTableEnableNV;
PFN_vkCmdSetCoverageModulationTableNV pfn_vkCmdSetCoverageModulationTableNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
PFN_vkCmdSetShadingRateImageEnableNV pfn_vkCmdSetShadingRateImageEnableNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
PFN_vkCmdSetRepresentativeFragmentTestEnableNV pfn_vkCmdSetRepresentativeFragmentTestEnableNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
PFN_vkCmdSetCoverageReductionModeNV pfn_vkCmdSetCoverageReductionModeNV;
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */
#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))
PFN_vkGetDeviceGroupSurfacePresentModes2EXT pfn_vkGetDeviceGroupSurfacePresentModes2EXT;
#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */
#if (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control))
PFN_vkGetImageSubresourceLayout2EXT pfn_vkGetImageSubresourceLayout2EXT;
#endif /* (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control)) */
#if (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state))
PFN_vkCmdSetVertexInputEXT pfn_vkCmdSetVertexInputEXT;
#endif /* (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state)) */
#if (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template))
PFN_vkCmdPushDescriptorSetWithTemplateKHR pfn_vkCmdPushDescriptorSetWithTemplateKHR;
#endif /* (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
PFN_vkGetDeviceGroupPresentCapabilitiesKHR pfn_vkGetDeviceGroupPresentCapabilitiesKHR;
PFN_vkGetDeviceGroupSurfacePresentModesKHR pfn_vkGetDeviceGroupSurfacePresentModesKHR;
PFN_vkGetPhysicalDevicePresentRectanglesKHR pfn_vkGetPhysicalDevicePresentRectanglesKHR;
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
PFN_vkAcquireNextImage2KHR pfn_vkAcquireNextImage2KHR;
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
/* VKFW_GEN_PFNS */

void
vkfwLoadLoader (PFN_vkGetInstanceProcAddr load)
{
	pfn_vkGetInstanceProcAddr = load;
	VkInstance context = VK_NULL_HANDLE;
/* VKFW_GEN_LOAD_LOADER */
#if defined(VK_VERSION_1_0)
	pfn_vkCreateInstance = (PFN_vkCreateInstance) load (context, "vkCreateInstance");
	pfn_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties) load (context, "vkEnumerateInstanceExtensionProperties");
	pfn_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties) load (context, "vkEnumerateInstanceLayerProperties");
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
	pfn_vkEnumerateInstanceVersion = (PFN_vkEnumerateInstanceVersion) load (context, "vkEnumerateInstanceVersion");
#endif /* defined(VK_VERSION_1_1) */
/* VKFW_GEN_LOAD_LOADER */
}

void
vkfwLoadInstance (VkInstance context)
{
	PFN_vkGetInstanceProcAddr load = vkGetInstanceProcAddr;
/* VKFW_GEN_LOAD_INSTANCE */
#if defined(VK_VERSION_1_0)
	pfn_vkCreateDevice = (PFN_vkCreateDevice) load (context, "vkCreateDevice");
	pfn_vkDestroyInstance = (PFN_vkDestroyInstance) load (context, "vkDestroyInstance");
	pfn_vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties) load (context, "vkEnumerateDeviceExtensionProperties");
	pfn_vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties) load (context, "vkEnumerateDeviceLayerProperties");
	pfn_vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices) load (context, "vkEnumeratePhysicalDevices");
	pfn_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr) load (context, "vkGetDeviceProcAddr");
	pfn_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr) load (context, "vkGetInstanceProcAddr");
	pfn_vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures) load (context, "vkGetPhysicalDeviceFeatures");
	pfn_vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties) load (context, "vkGetPhysicalDeviceFormatProperties");
	pfn_vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties) load (context, "vkGetPhysicalDeviceImageFormatProperties");
	pfn_vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties) load (context, "vkGetPhysicalDeviceMemoryProperties");
	pfn_vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties) load (context, "vkGetPhysicalDeviceProperties");
	pfn_vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties) load (context, "vkGetPhysicalDeviceQueueFamilyProperties");
	pfn_vkGetPhysicalDeviceSparseImageFormatProperties = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties) load (context, "vkGetPhysicalDeviceSparseImageFormatProperties");
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
	pfn_vkEnumeratePhysicalDeviceGroups = (PFN_vkEnumeratePhysicalDeviceGroups) load (context, "vkEnumeratePhysicalDeviceGroups");
	pfn_vkGetPhysicalDeviceExternalBufferProperties = (PFN_vkGetPhysicalDeviceExternalBufferProperties) load (context, "vkGetPhysicalDeviceExternalBufferProperties");
	pfn_vkGetPhysicalDeviceExternalFenceProperties = (PFN_vkGetPhysicalDeviceExternalFenceProperties) load (context, "vkGetPhysicalDeviceExternalFenceProperties");
	pfn_vkGetPhysicalDeviceExternalSemaphoreProperties = (PFN_vkGetPhysicalDeviceExternalSemaphoreProperties) load (context, "vkGetPhysicalDeviceExternalSemaphoreProperties");
	pfn_vkGetPhysicalDeviceFeatures2 = (PFN_vkGetPhysicalDeviceFeatures2) load (context, "vkGetPhysicalDeviceFeatures2");
	pfn_vkGetPhysicalDeviceFormatProperties2 = (PFN_vkGetPhysicalDeviceFormatProperties2) load (context, "vkGetPhysicalDeviceFormatProperties2");
	pfn_vkGetPhysicalDeviceImageFormatProperties2 = (PFN_vkGetPhysicalDeviceImageFormatProperties2) load (context, "vkGetPhysicalDeviceImageFormatProperties2");
	pfn_vkGetPhysicalDeviceMemoryProperties2 = (PFN_vkGetPhysicalDeviceMemoryProperties2) load (context, "vkGetPhysicalDeviceMemoryProperties2");
	pfn_vkGetPhysicalDeviceProperties2 = (PFN_vkGetPhysicalDeviceProperties2) load (context, "vkGetPhysicalDeviceProperties2");
	pfn_vkGetPhysicalDeviceQueueFamilyProperties2 = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2) load (context, "vkGetPhysicalDeviceQueueFamilyProperties2");
	pfn_vkGetPhysicalDeviceSparseImageFormatProperties2 = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2) load (context, "vkGetPhysicalDeviceSparseImageFormatProperties2");
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
	pfn_vkGetPhysicalDeviceToolProperties = (PFN_vkGetPhysicalDeviceToolProperties) load (context, "vkGetPhysicalDeviceToolProperties");
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_acquire_drm_display)
	pfn_vkAcquireDrmDisplayEXT = (PFN_vkAcquireDrmDisplayEXT) load (context, "vkAcquireDrmDisplayEXT");
	pfn_vkGetDrmDisplayEXT = (PFN_vkGetDrmDisplayEXT) load (context, "vkGetDrmDisplayEXT");
#endif /* defined(VK_EXT_acquire_drm_display) */
#if defined(VK_EXT_acquire_xlib_display)
	pfn_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT) load (context, "vkAcquireXlibDisplayEXT");
	pfn_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT) load (context, "vkGetRandROutputDisplayEXT");
#endif /* defined(VK_EXT_acquire_xlib_display) */
#if defined(VK_EXT_calibrated_timestamps)
	pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) load (context, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_EXT_debug_report)
	pfn_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT) load (context, "vkCreateDebugReportCallbackEXT");
	pfn_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT) load (context, "vkDebugReportMessageEXT");
	pfn_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT) load (context, "vkDestroyDebugReportCallbackEXT");
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
	pfn_vkCmdBeginDebugUtilsLabelEXT = (PFN_vkCmdBeginDebugUtilsLabelEXT) load (context, "vkCmdBeginDebugUtilsLabelEXT");
	pfn_vkCmdEndDebugUtilsLabelEXT = (PFN_vkCmdEndDebugUtilsLabelEXT) load (context, "vkCmdEndDebugUtilsLabelEXT");
	pfn_vkCmdInsertDebugUtilsLabelEXT = (PFN_vkCmdInsertDebugUtilsLabelEXT) load (context, "vkCmdInsertDebugUtilsLabelEXT");
	pfn_vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT) load (context, "vkCreateDebugUtilsMessengerEXT");
	pfn_vkDestroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT) load (context, "vkDestroyDebugUtilsMessengerEXT");
	pfn_vkQueueBeginDebugUtilsLabelEXT = (PFN_vkQueueBeginDebugUtilsLabelEXT) load (context, "vkQueueBeginDebugUtilsLabelEXT");
	pfn_vkQueueEndDebugUtilsLabelEXT = (PFN_vkQueueEndDebugUtilsLabelEXT) load (context, "vkQueueEndDebugUtilsLabelEXT");
	pfn_vkQueueInsertDebugUtilsLabelEXT = (PFN_vkQueueInsertDebugUtilsLabelEXT) load (context, "vkQueueInsertDebugUtilsLabelEXT");
	pfn_vkSetDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT) load (context, "vkSetDebugUtilsObjectNameEXT");
	pfn_vkSetDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT) load (context, "vkSetDebugUtilsObjectTagEXT");
	pfn_vkSubmitDebugUtilsMessageEXT = (PFN_vkSubmitDebugUtilsMessageEXT) load (context, "vkSubmitDebugUtilsMessageEXT");
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_direct_mode_display)
	pfn_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT) load (context, "vkReleaseDisplayEXT");
#endif /* defined(VK_EXT_direct_mode_display) */
#if defined(VK_EXT_directfb_surface)
	pfn_vkCreateDirectFBSurfaceEXT = (PFN_vkCreateDirectFBSurfaceEXT) load (context, "vkCreateDirectFBSurfaceEXT");
	pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = (PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT) load (context, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_EXT_display_surface_counter)
	pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT) load (context, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_EXT_full_screen_exclusive)
	pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT = (PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT) load (context, "vkGetPhysicalDeviceSurfacePresentModes2EXT");
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_headless_surface)
	pfn_vkCreateHeadlessSurfaceEXT = (PFN_vkCreateHeadlessSurfaceEXT) load (context, "vkCreateHeadlessSurfaceEXT");
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_EXT_metal_surface)
	pfn_vkCreateMetalSurfaceEXT = (PFN_vkCreateMetalSurfaceEXT) load (context, "vkCreateMetalSurfaceEXT");
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_EXT_sample_locations)
	pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT) load (context, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_tooling_info)
	pfn_vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT) load (context, "vkGetPhysicalDeviceToolPropertiesEXT");
#endif /* defined(VK_EXT_tooling_info) */
#if defined(VK_FUCHSIA_imagepipe_surface)
	pfn_vkCreateImagePipeSurfaceFUCHSIA = (PFN_vkCreateImagePipeSurfaceFUCHSIA) load (context, "vkCreateImagePipeSurfaceFUCHSIA");
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_GGP_stream_descriptor_surface)
	pfn_vkCreateStreamDescriptorSurfaceGGP = (PFN_vkCreateStreamDescriptorSurfaceGGP) load (context, "vkCreateStreamDescriptorSurfaceGGP");
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_KHR_android_surface)
	pfn_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR) load (context, "vkCreateAndroidSurfaceKHR");
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_KHR_calibrated_timestamps)
	pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR) load (context, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR");
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_KHR_cooperative_matrix)
	pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR) load (context, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_KHR_device_group_creation)
	pfn_vkEnumeratePhysicalDeviceGroupsKHR = (PFN_vkEnumeratePhysicalDeviceGroupsKHR) load (context, "vkEnumeratePhysicalDeviceGroupsKHR");
#endif /* defined(VK_KHR_device_group_creation) */
#if defined(VK_KHR_display)
	pfn_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR) load (context, "vkCreateDisplayModeKHR");
	pfn_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR) load (context, "vkCreateDisplayPlaneSurfaceKHR");
	pfn_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR) load (context, "vkGetDisplayModePropertiesKHR");
	pfn_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR) load (context, "vkGetDisplayPlaneCapabilitiesKHR");
	pfn_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR) load (context, "vkGetDisplayPlaneSupportedDisplaysKHR");
	pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) load (context, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
	pfn_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR) load (context, "vkGetPhysicalDeviceDisplayPropertiesKHR");
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_external_fence_capabilities)
	pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR) load (context, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
#endif /* defined(VK_KHR_external_fence_capabilities) */
#if defined(VK_KHR_external_memory_capabilities)
	pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR) load (context, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
#endif /* defined(VK_KHR_external_memory_capabilities) */
#if defined(VK_KHR_external_semaphore_capabilities)
	pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) load (context, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
#endif /* defined(VK_KHR_external_semaphore_capabilities) */
#if defined(VK_KHR_fragment_shading_rate)
	pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR = (PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR) load (context, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_KHR_get_display_properties2)
	pfn_vkGetDisplayModeProperties2KHR = (PFN_vkGetDisplayModeProperties2KHR) load (context, "vkGetDisplayModeProperties2KHR");
	pfn_vkGetDisplayPlaneCapabilities2KHR = (PFN_vkGetDisplayPlaneCapabilities2KHR) load (context, "vkGetDisplayPlaneCapabilities2KHR");
	pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR) load (context, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
	pfn_vkGetPhysicalDeviceDisplayProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayProperties2KHR) load (context, "vkGetPhysicalDeviceDisplayProperties2KHR");
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_get_physical_device_properties2)
	pfn_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR) load (context, "vkGetPhysicalDeviceFeatures2KHR");
	pfn_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR) load (context, "vkGetPhysicalDeviceFormatProperties2KHR");
	pfn_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR) load (context, "vkGetPhysicalDeviceImageFormatProperties2KHR");
	pfn_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR) load (context, "vkGetPhysicalDeviceMemoryProperties2KHR");
	pfn_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR) load (context, "vkGetPhysicalDeviceProperties2KHR");
	pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR) load (context, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
	pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR) load (context, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
#endif /* defined(VK_KHR_get_physical_device_properties2) */
#if defined(VK_KHR_get_surface_capabilities2)
	pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR) load (context, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
	pfn_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR) load (context, "vkGetPhysicalDeviceSurfaceFormats2KHR");
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_KHR_performance_query)
	pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) load (context, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
	pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) load (context, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_surface)
	pfn_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR) load (context, "vkDestroySurfaceKHR");
	pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) load (context, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
	pfn_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) load (context, "vkGetPhysicalDeviceSurfaceFormatsKHR");
	pfn_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) load (context, "vkGetPhysicalDeviceSurfacePresentModesKHR");
	pfn_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) load (context, "vkGetPhysicalDeviceSurfaceSupportKHR");
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_video_encode_queue)
	pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR) load (context, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
	pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR = (PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR) load (context, "vkGetPhysicalDeviceVideoCapabilitiesKHR");
	pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR) load (context, "vkGetPhysicalDeviceVideoFormatPropertiesKHR");
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_wayland_surface)
	pfn_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR) load (context, "vkCreateWaylandSurfaceKHR");
	pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR) load (context, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_win32_surface)
	pfn_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR) load (context, "vkCreateWin32SurfaceKHR");
	pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR) load (context, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_KHR_xcb_surface)
	pfn_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR) load (context, "vkCreateXcbSurfaceKHR");
	pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR) load (context, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_xlib_surface)
	pfn_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR) load (context, "vkCreateXlibSurfaceKHR");
	pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR) load (context, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
#endif /* defined(VK_KHR_xlib_surface) */
#if defined(VK_MVK_ios_surface)
	pfn_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK) load (context, "vkCreateIOSSurfaceMVK");
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MVK_macos_surface)
	pfn_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK) load (context, "vkCreateMacOSSurfaceMVK");
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_NN_vi_surface)
	pfn_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN) load (context, "vkCreateViSurfaceNN");
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_NV_acquire_winrt_display)
	pfn_vkAcquireWinrtDisplayNV = (PFN_vkAcquireWinrtDisplayNV) load (context, "vkAcquireWinrtDisplayNV");
	pfn_vkGetWinrtDisplayNV = (PFN_vkGetWinrtDisplayNV) load (context, "vkGetWinrtDisplayNV");
#endif /* defined(VK_NV_acquire_winrt_display) */
#if defined(VK_NV_cooperative_matrix)
	pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) load (context, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_coverage_reduction_mode)
	pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) load (context, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_NV_external_memory_capabilities)
	pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) load (context, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_NV_optical_flow)
	pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = (PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV) load (context, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_QNX_screen_surface)
	pfn_vkCreateScreenSurfaceQNX = (PFN_vkCreateScreenSurfaceQNX) load (context, "vkCreateScreenSurfaceQNX");
	pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX = (PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX) load (context, "vkGetPhysicalDeviceScreenPresentationSupportQNX");
#endif /* defined(VK_QNX_screen_surface) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
	pfn_vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR) load (context, "vkGetPhysicalDevicePresentRectanglesKHR");
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
/* VKFW_GEN_LOAD_INSTANCE */
}

void
vkfwLoadDevice (VkDevice context)
{
	PFN_vkGetDeviceProcAddr load = vkGetDeviceProcAddr;
/* VKFW_GEN_LOAD_DEVICE */
#if defined(VK_VERSION_1_0)
	pfn_vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers) load (context, "vkAllocateCommandBuffers");
	pfn_vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets) load (context, "vkAllocateDescriptorSets");
	pfn_vkAllocateMemory = (PFN_vkAllocateMemory) load (context, "vkAllocateMemory");
	pfn_vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer) load (context, "vkBeginCommandBuffer");
	pfn_vkBindBufferMemory = (PFN_vkBindBufferMemory) load (context, "vkBindBufferMemory");
	pfn_vkBindImageMemory = (PFN_vkBindImageMemory) load (context, "vkBindImageMemory");
	pfn_vkCmdBeginQuery = (PFN_vkCmdBeginQuery) load (context, "vkCmdBeginQuery");
	pfn_vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass) load (context, "vkCmdBeginRenderPass");
	pfn_vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets) load (context, "vkCmdBindDescriptorSets");
	pfn_vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer) load (context, "vkCmdBindIndexBuffer");
	pfn_vkCmdBindPipeline = (PFN_vkCmdBindPipeline) load (context, "vkCmdBindPipeline");
	pfn_vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers) load (context, "vkCmdBindVertexBuffers");
	pfn_vkCmdBlitImage = (PFN_vkCmdBlitImage) load (context, "vkCmdBlitImage");
	pfn_vkCmdClearAttachments = (PFN_vkCmdClearAttachments) load (context, "vkCmdClearAttachments");
	pfn_vkCmdClearColorImage = (PFN_vkCmdClearColorImage) load (context, "vkCmdClearColorImage");
	pfn_vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage) load (context, "vkCmdClearDepthStencilImage");
	pfn_vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer) load (context, "vkCmdCopyBuffer");
	pfn_vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage) load (context, "vkCmdCopyBufferToImage");
	pfn_vkCmdCopyImage = (PFN_vkCmdCopyImage) load (context, "vkCmdCopyImage");
	pfn_vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer) load (context, "vkCmdCopyImageToBuffer");
	pfn_vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults) load (context, "vkCmdCopyQueryPoolResults");
	pfn_vkCmdDispatch = (PFN_vkCmdDispatch) load (context, "vkCmdDispatch");
	pfn_vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect) load (context, "vkCmdDispatchIndirect");
	pfn_vkCmdDraw = (PFN_vkCmdDraw) load (context, "vkCmdDraw");
	pfn_vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed) load (context, "vkCmdDrawIndexed");
	pfn_vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect) load (context, "vkCmdDrawIndexedIndirect");
	pfn_vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect) load (context, "vkCmdDrawIndirect");
	pfn_vkCmdEndQuery = (PFN_vkCmdEndQuery) load (context, "vkCmdEndQuery");
	pfn_vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass) load (context, "vkCmdEndRenderPass");
	pfn_vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands) load (context, "vkCmdExecuteCommands");
	pfn_vkCmdFillBuffer = (PFN_vkCmdFillBuffer) load (context, "vkCmdFillBuffer");
	pfn_vkCmdNextSubpass = (PFN_vkCmdNextSubpass) load (context, "vkCmdNextSubpass");
	pfn_vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier) load (context, "vkCmdPipelineBarrier");
	pfn_vkCmdPushConstants = (PFN_vkCmdPushConstants) load (context, "vkCmdPushConstants");
	pfn_vkCmdResetEvent = (PFN_vkCmdResetEvent) load (context, "vkCmdResetEvent");
	pfn_vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool) load (context, "vkCmdResetQueryPool");
	pfn_vkCmdResolveImage = (PFN_vkCmdResolveImage) load (context, "vkCmdResolveImage");
	pfn_vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants) load (context, "vkCmdSetBlendConstants");
	pfn_vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias) load (context, "vkCmdSetDepthBias");
	pfn_vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds) load (context, "vkCmdSetDepthBounds");
	pfn_vkCmdSetEvent = (PFN_vkCmdSetEvent) load (context, "vkCmdSetEvent");
	pfn_vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth) load (context, "vkCmdSetLineWidth");
	pfn_vkCmdSetScissor = (PFN_vkCmdSetScissor) load (context, "vkCmdSetScissor");
	pfn_vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask) load (context, "vkCmdSetStencilCompareMask");
	pfn_vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference) load (context, "vkCmdSetStencilReference");
	pfn_vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask) load (context, "vkCmdSetStencilWriteMask");
	pfn_vkCmdSetViewport = (PFN_vkCmdSetViewport) load (context, "vkCmdSetViewport");
	pfn_vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer) load (context, "vkCmdUpdateBuffer");
	pfn_vkCmdWaitEvents = (PFN_vkCmdWaitEvents) load (context, "vkCmdWaitEvents");
	pfn_vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp) load (context, "vkCmdWriteTimestamp");
	pfn_vkCreateBuffer = (PFN_vkCreateBuffer) load (context, "vkCreateBuffer");
	pfn_vkCreateBufferView = (PFN_vkCreateBufferView) load (context, "vkCreateBufferView");
	pfn_vkCreateCommandPool = (PFN_vkCreateCommandPool) load (context, "vkCreateCommandPool");
	pfn_vkCreateComputePipelines = (PFN_vkCreateComputePipelines) load (context, "vkCreateComputePipelines");
	pfn_vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool) load (context, "vkCreateDescriptorPool");
	pfn_vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout) load (context, "vkCreateDescriptorSetLayout");
	pfn_vkCreateEvent = (PFN_vkCreateEvent) load (context, "vkCreateEvent");
	pfn_vkCreateFence = (PFN_vkCreateFence) load (context, "vkCreateFence");
	pfn_vkCreateFramebuffer = (PFN_vkCreateFramebuffer) load (context, "vkCreateFramebuffer");
	pfn_vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines) load (context, "vkCreateGraphicsPipelines");
	pfn_vkCreateImage = (PFN_vkCreateImage) load (context, "vkCreateImage");
	pfn_vkCreateImageView = (PFN_vkCreateImageView) load (context, "vkCreateImageView");
	pfn_vkCreatePipelineCache = (PFN_vkCreatePipelineCache) load (context, "vkCreatePipelineCache");
	pfn_vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout) load (context, "vkCreatePipelineLayout");
	pfn_vkCreateQueryPool = (PFN_vkCreateQueryPool) load (context, "vkCreateQueryPool");
	pfn_vkCreateRenderPass = (PFN_vkCreateRenderPass) load (context, "vkCreateRenderPass");
	pfn_vkCreateSampler = (PFN_vkCreateSampler) load (context, "vkCreateSampler");
	pfn_vkCreateSemaphore = (PFN_vkCreateSemaphore) load (context, "vkCreateSemaphore");
	pfn_vkCreateShaderModule = (PFN_vkCreateShaderModule) load (context, "vkCreateShaderModule");
	pfn_vkDestroyBuffer = (PFN_vkDestroyBuffer) load (context, "vkDestroyBuffer");
	pfn_vkDestroyBufferView = (PFN_vkDestroyBufferView) load (context, "vkDestroyBufferView");
	pfn_vkDestroyCommandPool = (PFN_vkDestroyCommandPool) load (context, "vkDestroyCommandPool");
	pfn_vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool) load (context, "vkDestroyDescriptorPool");
	pfn_vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout) load (context, "vkDestroyDescriptorSetLayout");
	pfn_vkDestroyDevice = (PFN_vkDestroyDevice) load (context, "vkDestroyDevice");
	pfn_vkDestroyEvent = (PFN_vkDestroyEvent) load (context, "vkDestroyEvent");
	pfn_vkDestroyFence = (PFN_vkDestroyFence) load (context, "vkDestroyFence");
	pfn_vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer) load (context, "vkDestroyFramebuffer");
	pfn_vkDestroyImage = (PFN_vkDestroyImage) load (context, "vkDestroyImage");
	pfn_vkDestroyImageView = (PFN_vkDestroyImageView) load (context, "vkDestroyImageView");
	pfn_vkDestroyPipeline = (PFN_vkDestroyPipeline) load (context, "vkDestroyPipeline");
	pfn_vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache) load (context, "vkDestroyPipelineCache");
	pfn_vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout) load (context, "vkDestroyPipelineLayout");
	pfn_vkDestroyQueryPool = (PFN_vkDestroyQueryPool) load (context, "vkDestroyQueryPool");
	pfn_vkDestroyRenderPass = (PFN_vkDestroyRenderPass) load (context, "vkDestroyRenderPass");
	pfn_vkDestroySampler = (PFN_vkDestroySampler) load (context, "vkDestroySampler");
	pfn_vkDestroySemaphore = (PFN_vkDestroySemaphore) load (context, "vkDestroySemaphore");
	pfn_vkDestroyShaderModule = (PFN_vkDestroyShaderModule) load (context, "vkDestroyShaderModule");
	pfn_vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle) load (context, "vkDeviceWaitIdle");
	pfn_vkEndCommandBuffer = (PFN_vkEndCommandBuffer) load (context, "vkEndCommandBuffer");
	pfn_vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges) load (context, "vkFlushMappedMemoryRanges");
	pfn_vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers) load (context, "vkFreeCommandBuffers");
	pfn_vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets) load (context, "vkFreeDescriptorSets");
	pfn_vkFreeMemory = (PFN_vkFreeMemory) load (context, "vkFreeMemory");
	pfn_vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements) load (context, "vkGetBufferMemoryRequirements");
	pfn_vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment) load (context, "vkGetDeviceMemoryCommitment");
	pfn_vkGetDeviceQueue = (PFN_vkGetDeviceQueue) load (context, "vkGetDeviceQueue");
	pfn_vkGetEventStatus = (PFN_vkGetEventStatus) load (context, "vkGetEventStatus");
	pfn_vkGetFenceStatus = (PFN_vkGetFenceStatus) load (context, "vkGetFenceStatus");
	pfn_vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements) load (context, "vkGetImageMemoryRequirements");
	pfn_vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements) load (context, "vkGetImageSparseMemoryRequirements");
	pfn_vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout) load (context, "vkGetImageSubresourceLayout");
	pfn_vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData) load (context, "vkGetPipelineCacheData");
	pfn_vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults) load (context, "vkGetQueryPoolResults");
	pfn_vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity) load (context, "vkGetRenderAreaGranularity");
	pfn_vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges) load (context, "vkInvalidateMappedMemoryRanges");
	pfn_vkMapMemory = (PFN_vkMapMemory) load (context, "vkMapMemory");
	pfn_vkMergePipelineCaches = (PFN_vkMergePipelineCaches) load (context, "vkMergePipelineCaches");
	pfn_vkQueueBindSparse = (PFN_vkQueueBindSparse) load (context, "vkQueueBindSparse");
	pfn_vkQueueSubmit = (PFN_vkQueueSubmit) load (context, "vkQueueSubmit");
	pfn_vkQueueWaitIdle = (PFN_vkQueueWaitIdle) load (context, "vkQueueWaitIdle");
	pfn_vkResetCommandBuffer = (PFN_vkResetCommandBuffer) load (context, "vkResetCommandBuffer");
	pfn_vkResetCommandPool = (PFN_vkResetCommandPool) load (context, "vkResetCommandPool");
	pfn_vkResetDescriptorPool = (PFN_vkResetDescriptorPool) load (context, "vkResetDescriptorPool");
	pfn_vkResetEvent = (PFN_vkResetEvent) load (context, "vkResetEvent");
	pfn_vkResetFences = (PFN_vkResetFences) load (context, "vkResetFences");
	pfn_vkSetEvent = (PFN_vkSetEvent) load (context, "vkSetEvent");
	pfn_vkUnmapMemory = (PFN_vkUnmapMemory) load (context, "vkUnmapMemory");
	pfn_vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets) load (context, "vkUpdateDescriptorSets");
	pfn_vkWaitForFences = (PFN_vkWaitForFences) load (context, "vkWaitForFences");
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
	pfn_vkBindBufferMemory2 = (PFN_vkBindBufferMemory2) load (context, "vkBindBufferMemory2");
	pfn_vkBindImageMemory2 = (PFN_vkBindImageMemory2) load (context, "vkBindImageMemory2");
	pfn_vkCmdDispatchBase = (PFN_vkCmdDispatchBase) load (context, "vkCmdDispatchBase");
	pfn_vkCmdSetDeviceMask = (PFN_vkCmdSetDeviceMask) load (context, "vkCmdSetDeviceMask");
	pfn_vkCreateDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate) load (context, "vkCreateDescriptorUpdateTemplate");
	pfn_vkCreateSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion) load (context, "vkCreateSamplerYcbcrConversion");
	pfn_vkDestroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate) load (context, "vkDestroyDescriptorUpdateTemplate");
	pfn_vkDestroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion) load (context, "vkDestroySamplerYcbcrConversion");
	pfn_vkGetBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2) load (context, "vkGetBufferMemoryRequirements2");
	pfn_vkGetDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport) load (context, "vkGetDescriptorSetLayoutSupport");
	pfn_vkGetDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures) load (context, "vkGetDeviceGroupPeerMemoryFeatures");
	pfn_vkGetDeviceQueue2 = (PFN_vkGetDeviceQueue2) load (context, "vkGetDeviceQueue2");
	pfn_vkGetImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2) load (context, "vkGetImageMemoryRequirements2");
	pfn_vkGetImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2) load (context, "vkGetImageSparseMemoryRequirements2");
	pfn_vkTrimCommandPool = (PFN_vkTrimCommandPool) load (context, "vkTrimCommandPool");
	pfn_vkUpdateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate) load (context, "vkUpdateDescriptorSetWithTemplate");
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
	pfn_vkCmdBeginRenderPass2 = (PFN_vkCmdBeginRenderPass2) load (context, "vkCmdBeginRenderPass2");
	pfn_vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount) load (context, "vkCmdDrawIndexedIndirectCount");
	pfn_vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount) load (context, "vkCmdDrawIndirectCount");
	pfn_vkCmdEndRenderPass2 = (PFN_vkCmdEndRenderPass2) load (context, "vkCmdEndRenderPass2");
	pfn_vkCmdNextSubpass2 = (PFN_vkCmdNextSubpass2) load (context, "vkCmdNextSubpass2");
	pfn_vkCreateRenderPass2 = (PFN_vkCreateRenderPass2) load (context, "vkCreateRenderPass2");
	pfn_vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress) load (context, "vkGetBufferDeviceAddress");
	pfn_vkGetBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress) load (context, "vkGetBufferOpaqueCaptureAddress");
	pfn_vkGetDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress) load (context, "vkGetDeviceMemoryOpaqueCaptureAddress");
	pfn_vkGetSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue) load (context, "vkGetSemaphoreCounterValue");
	pfn_vkResetQueryPool = (PFN_vkResetQueryPool) load (context, "vkResetQueryPool");
	pfn_vkSignalSemaphore = (PFN_vkSignalSemaphore) load (context, "vkSignalSemaphore");
	pfn_vkWaitSemaphores = (PFN_vkWaitSemaphores) load (context, "vkWaitSemaphores");
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
	pfn_vkCmdBeginRendering = (PFN_vkCmdBeginRendering) load (context, "vkCmdBeginRendering");
	pfn_vkCmdBindVertexBuffers2 = (PFN_vkCmdBindVertexBuffers2) load (context, "vkCmdBindVertexBuffers2");
	pfn_vkCmdBlitImage2 = (PFN_vkCmdBlitImage2) load (context, "vkCmdBlitImage2");
	pfn_vkCmdCopyBuffer2 = (PFN_vkCmdCopyBuffer2) load (context, "vkCmdCopyBuffer2");
	pfn_vkCmdCopyBufferToImage2 = (PFN_vkCmdCopyBufferToImage2) load (context, "vkCmdCopyBufferToImage2");
	pfn_vkCmdCopyImage2 = (PFN_vkCmdCopyImage2) load (context, "vkCmdCopyImage2");
	pfn_vkCmdCopyImageToBuffer2 = (PFN_vkCmdCopyImageToBuffer2) load (context, "vkCmdCopyImageToBuffer2");
	pfn_vkCmdEndRendering = (PFN_vkCmdEndRendering) load (context, "vkCmdEndRendering");
	pfn_vkCmdPipelineBarrier2 = (PFN_vkCmdPipelineBarrier2) load (context, "vkCmdPipelineBarrier2");
	pfn_vkCmdResetEvent2 = (PFN_vkCmdResetEvent2) load (context, "vkCmdResetEvent2");
	pfn_vkCmdResolveImage2 = (PFN_vkCmdResolveImage2) load (context, "vkCmdResolveImage2");
	pfn_vkCmdSetCullMode = (PFN_vkCmdSetCullMode) load (context, "vkCmdSetCullMode");
	pfn_vkCmdSetDepthBiasEnable = (PFN_vkCmdSetDepthBiasEnable) load (context, "vkCmdSetDepthBiasEnable");
	pfn_vkCmdSetDepthBoundsTestEnable = (PFN_vkCmdSetDepthBoundsTestEnable) load (context, "vkCmdSetDepthBoundsTestEnable");
	pfn_vkCmdSetDepthCompareOp = (PFN_vkCmdSetDepthCompareOp) load (context, "vkCmdSetDepthCompareOp");
	pfn_vkCmdSetDepthTestEnable = (PFN_vkCmdSetDepthTestEnable) load (context, "vkCmdSetDepthTestEnable");
	pfn_vkCmdSetDepthWriteEnable = (PFN_vkCmdSetDepthWriteEnable) load (context, "vkCmdSetDepthWriteEnable");
	pfn_vkCmdSetEvent2 = (PFN_vkCmdSetEvent2) load (context, "vkCmdSetEvent2");
	pfn_vkCmdSetFrontFace = (PFN_vkCmdSetFrontFace) load (context, "vkCmdSetFrontFace");
	pfn_vkCmdSetPrimitiveRestartEnable = (PFN_vkCmdSetPrimitiveRestartEnable) load (context, "vkCmdSetPrimitiveRestartEnable");
	pfn_vkCmdSetPrimitiveTopology = (PFN_vkCmdSetPrimitiveTopology) load (context, "vkCmdSetPrimitiveTopology");
	pfn_vkCmdSetRasterizerDiscardEnable = (PFN_vkCmdSetRasterizerDiscardEnable) load (context, "vkCmdSetRasterizerDiscardEnable");
	pfn_vkCmdSetScissorWithCount = (PFN_vkCmdSetScissorWithCount) load (context, "vkCmdSetScissorWithCount");
	pfn_vkCmdSetStencilOp = (PFN_vkCmdSetStencilOp) load (context, "vkCmdSetStencilOp");
	pfn_vkCmdSetStencilTestEnable = (PFN_vkCmdSetStencilTestEnable) load (context, "vkCmdSetStencilTestEnable");
	pfn_vkCmdSetViewportWithCount = (PFN_vkCmdSetViewportWithCount) load (context, "vkCmdSetViewportWithCount");
	pfn_vkCmdWaitEvents2 = (PFN_vkCmdWaitEvents2) load (context, "vkCmdWaitEvents2");
	pfn_vkCmdWriteTimestamp2 = (PFN_vkCmdWriteTimestamp2) load (context, "vkCmdWriteTimestamp2");
	pfn_vkCreatePrivateDataSlot = (PFN_vkCreatePrivateDataSlot) load (context, "vkCreatePrivateDataSlot");
	pfn_vkDestroyPrivateDataSlot = (PFN_vkDestroyPrivateDataSlot) load (context, "vkDestroyPrivateDataSlot");
	pfn_vkGetDeviceBufferMemoryRequirements = (PFN_vkGetDeviceBufferMemoryRequirements) load (context, "vkGetDeviceBufferMemoryRequirements");
	pfn_vkGetDeviceImageMemoryRequirements = (PFN_vkGetDeviceImageMemoryRequirements) load (context, "vkGetDeviceImageMemoryRequirements");
	pfn_vkGetDeviceImageSparseMemoryRequirements = (PFN_vkGetDeviceImageSparseMemoryRequirements) load (context, "vkGetDeviceImageSparseMemoryRequirements");
	pfn_vkGetPrivateData = (PFN_vkGetPrivateData) load (context, "vkGetPrivateData");
	pfn_vkQueueSubmit2 = (PFN_vkQueueSubmit2) load (context, "vkQueueSubmit2");
	pfn_vkSetPrivateData = (PFN_vkSetPrivateData) load (context, "vkSetPrivateData");
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_AMDX_shader_enqueue)
	pfn_vkCmdDispatchGraphAMDX = (PFN_vkCmdDispatchGraphAMDX) load (context, "vkCmdDispatchGraphAMDX");
	pfn_vkCmdDispatchGraphIndirectAMDX = (PFN_vkCmdDispatchGraphIndirectAMDX) load (context, "vkCmdDispatchGraphIndirectAMDX");
	pfn_vkCmdDispatchGraphIndirectCountAMDX = (PFN_vkCmdDispatchGraphIndirectCountAMDX) load (context, "vkCmdDispatchGraphIndirectCountAMDX");
	pfn_vkCmdInitializeGraphScratchMemoryAMDX = (PFN_vkCmdInitializeGraphScratchMemoryAMDX) load (context, "vkCmdInitializeGraphScratchMemoryAMDX");
	pfn_vkCreateExecutionGraphPipelinesAMDX = (PFN_vkCreateExecutionGraphPipelinesAMDX) load (context, "vkCreateExecutionGraphPipelinesAMDX");
	pfn_vkGetExecutionGraphPipelineNodeIndexAMDX = (PFN_vkGetExecutionGraphPipelineNodeIndexAMDX) load (context, "vkGetExecutionGraphPipelineNodeIndexAMDX");
	pfn_vkGetExecutionGraphPipelineScratchSizeAMDX = (PFN_vkGetExecutionGraphPipelineScratchSizeAMDX) load (context, "vkGetExecutionGraphPipelineScratchSizeAMDX");
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_AMD_buffer_marker)
	pfn_vkCmdWriteBufferMarkerAMD = (PFN_vkCmdWriteBufferMarkerAMD) load (context, "vkCmdWriteBufferMarkerAMD");
#endif /* defined(VK_AMD_buffer_marker) */
#if defined(VK_AMD_display_native_hdr)
	pfn_vkSetLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD) load (context, "vkSetLocalDimmingAMD");
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_AMD_draw_indirect_count)
	pfn_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD) load (context, "vkCmdDrawIndexedIndirectCountAMD");
	pfn_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD) load (context, "vkCmdDrawIndirectCountAMD");
#endif /* defined(VK_AMD_draw_indirect_count) */
#if defined(VK_AMD_shader_info)
	pfn_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD) load (context, "vkGetShaderInfoAMD");
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
	pfn_vkGetAndroidHardwareBufferPropertiesANDROID = (PFN_vkGetAndroidHardwareBufferPropertiesANDROID) load (context, "vkGetAndroidHardwareBufferPropertiesANDROID");
	pfn_vkGetMemoryAndroidHardwareBufferANDROID = (PFN_vkGetMemoryAndroidHardwareBufferANDROID) load (context, "vkGetMemoryAndroidHardwareBufferANDROID");
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
	pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT = (PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT) load (context, "vkCmdSetAttachmentFeedbackLoopEnableEXT");
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_EXT_buffer_device_address)
	pfn_vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT) load (context, "vkGetBufferDeviceAddressEXT");
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_EXT_calibrated_timestamps)
	pfn_vkGetCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT) load (context, "vkGetCalibratedTimestampsEXT");
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_EXT_color_write_enable)
	pfn_vkCmdSetColorWriteEnableEXT = (PFN_vkCmdSetColorWriteEnableEXT) load (context, "vkCmdSetColorWriteEnableEXT");
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_EXT_conditional_rendering)
	pfn_vkCmdBeginConditionalRenderingEXT = (PFN_vkCmdBeginConditionalRenderingEXT) load (context, "vkCmdBeginConditionalRenderingEXT");
	pfn_vkCmdEndConditionalRenderingEXT = (PFN_vkCmdEndConditionalRenderingEXT) load (context, "vkCmdEndConditionalRenderingEXT");
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_EXT_debug_marker)
	pfn_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT) load (context, "vkCmdDebugMarkerBeginEXT");
	pfn_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT) load (context, "vkCmdDebugMarkerEndEXT");
	pfn_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT) load (context, "vkCmdDebugMarkerInsertEXT");
	pfn_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT) load (context, "vkDebugMarkerSetObjectNameEXT");
	pfn_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT) load (context, "vkDebugMarkerSetObjectTagEXT");
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_EXT_depth_bias_control)
	pfn_vkCmdSetDepthBias2EXT = (PFN_vkCmdSetDepthBias2EXT) load (context, "vkCmdSetDepthBias2EXT");
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_descriptor_buffer)
	pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT) load (context, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
	pfn_vkCmdBindDescriptorBuffersEXT = (PFN_vkCmdBindDescriptorBuffersEXT) load (context, "vkCmdBindDescriptorBuffersEXT");
	pfn_vkCmdSetDescriptorBufferOffsetsEXT = (PFN_vkCmdSetDescriptorBufferOffsetsEXT) load (context, "vkCmdSetDescriptorBufferOffsetsEXT");
	pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT = (PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT) load (context, "vkGetBufferOpaqueCaptureDescriptorDataEXT");
	pfn_vkGetDescriptorEXT = (PFN_vkGetDescriptorEXT) load (context, "vkGetDescriptorEXT");
	pfn_vkGetDescriptorSetLayoutBindingOffsetEXT = (PFN_vkGetDescriptorSetLayoutBindingOffsetEXT) load (context, "vkGetDescriptorSetLayoutBindingOffsetEXT");
	pfn_vkGetDescriptorSetLayoutSizeEXT = (PFN_vkGetDescriptorSetLayoutSizeEXT) load (context, "vkGetDescriptorSetLayoutSizeEXT");
	pfn_vkGetImageOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageOpaqueCaptureDescriptorDataEXT) load (context, "vkGetImageOpaqueCaptureDescriptorDataEXT");
	pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT) load (context, "vkGetImageViewOpaqueCaptureDescriptorDataEXT");
	pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT = (PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT) load (context, "vkGetSamplerOpaqueCaptureDescriptorDataEXT");
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
	pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = (PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT) load (context, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
#endif /* defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)) */
#if defined(VK_EXT_device_fault)
	pfn_vkGetDeviceFaultInfoEXT = (PFN_vkGetDeviceFaultInfoEXT) load (context, "vkGetDeviceFaultInfoEXT");
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_EXT_discard_rectangles)
	pfn_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT) load (context, "vkCmdSetDiscardRectangleEXT");
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2
	pfn_vkCmdSetDiscardRectangleEnableEXT = (PFN_vkCmdSetDiscardRectangleEnableEXT) load (context, "vkCmdSetDiscardRectangleEnableEXT");
	pfn_vkCmdSetDiscardRectangleModeEXT = (PFN_vkCmdSetDiscardRectangleModeEXT) load (context, "vkCmdSetDiscardRectangleModeEXT");
#endif /* defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2 */
#if defined(VK_EXT_display_control)
	pfn_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT) load (context, "vkDisplayPowerControlEXT");
	pfn_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT) load (context, "vkGetSwapchainCounterEXT");
	pfn_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT) load (context, "vkRegisterDeviceEventEXT");
	pfn_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT) load (context, "vkRegisterDisplayEventEXT");
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_EXT_external_memory_host)
	pfn_vkGetMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT) load (context, "vkGetMemoryHostPointerPropertiesEXT");
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_EXT_full_screen_exclusive)
	pfn_vkAcquireFullScreenExclusiveModeEXT = (PFN_vkAcquireFullScreenExclusiveModeEXT) load (context, "vkAcquireFullScreenExclusiveModeEXT");
	pfn_vkReleaseFullScreenExclusiveModeEXT = (PFN_vkReleaseFullScreenExclusiveModeEXT) load (context, "vkReleaseFullScreenExclusiveModeEXT");
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_hdr_metadata)
	pfn_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT) load (context, "vkSetHdrMetadataEXT");
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_EXT_host_image_copy)
	pfn_vkCopyImageToImageEXT = (PFN_vkCopyImageToImageEXT) load (context, "vkCopyImageToImageEXT");
	pfn_vkCopyImageToMemoryEXT = (PFN_vkCopyImageToMemoryEXT) load (context, "vkCopyImageToMemoryEXT");
	pfn_vkCopyMemoryToImageEXT = (PFN_vkCopyMemoryToImageEXT) load (context, "vkCopyMemoryToImageEXT");
	pfn_vkTransitionImageLayoutEXT = (PFN_vkTransitionImageLayoutEXT) load (context, "vkTransitionImageLayoutEXT");
#endif /* defined(VK_EXT_host_image_copy) */
#if defined(VK_EXT_host_query_reset)
	pfn_vkResetQueryPoolEXT = (PFN_vkResetQueryPoolEXT) load (context, "vkResetQueryPoolEXT");
#endif /* defined(VK_EXT_host_query_reset) */
#if defined(VK_EXT_image_drm_format_modifier)
	pfn_vkGetImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT) load (context, "vkGetImageDrmFormatModifierPropertiesEXT");
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_line_rasterization)
	pfn_vkCmdSetLineStippleEXT = (PFN_vkCmdSetLineStippleEXT) load (context, "vkCmdSetLineStippleEXT");
#endif /* defined(VK_EXT_line_rasterization) */
#if defined(VK_EXT_mesh_shader)
	pfn_vkCmdDrawMeshTasksEXT = (PFN_vkCmdDrawMeshTasksEXT) load (context, "vkCmdDrawMeshTasksEXT");
	pfn_vkCmdDrawMeshTasksIndirectCountEXT = (PFN_vkCmdDrawMeshTasksIndirectCountEXT) load (context, "vkCmdDrawMeshTasksIndirectCountEXT");
	pfn_vkCmdDrawMeshTasksIndirectEXT = (PFN_vkCmdDrawMeshTasksIndirectEXT) load (context, "vkCmdDrawMeshTasksIndirectEXT");
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_EXT_metal_objects)
	pfn_vkExportMetalObjectsEXT = (PFN_vkExportMetalObjectsEXT) load (context, "vkExportMetalObjectsEXT");
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_EXT_multi_draw)
	pfn_vkCmdDrawMultiEXT = (PFN_vkCmdDrawMultiEXT) load (context, "vkCmdDrawMultiEXT");
	pfn_vkCmdDrawMultiIndexedEXT = (PFN_vkCmdDrawMultiIndexedEXT) load (context, "vkCmdDrawMultiIndexedEXT");
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_opacity_micromap)
	pfn_vkBuildMicromapsEXT = (PFN_vkBuildMicromapsEXT) load (context, "vkBuildMicromapsEXT");
	pfn_vkCmdBuildMicromapsEXT = (PFN_vkCmdBuildMicromapsEXT) load (context, "vkCmdBuildMicromapsEXT");
	pfn_vkCmdCopyMemoryToMicromapEXT = (PFN_vkCmdCopyMemoryToMicromapEXT) load (context, "vkCmdCopyMemoryToMicromapEXT");
	pfn_vkCmdCopyMicromapEXT = (PFN_vkCmdCopyMicromapEXT) load (context, "vkCmdCopyMicromapEXT");
	pfn_vkCmdCopyMicromapToMemoryEXT = (PFN_vkCmdCopyMicromapToMemoryEXT) load (context, "vkCmdCopyMicromapToMemoryEXT");
	pfn_vkCmdWriteMicromapsPropertiesEXT = (PFN_vkCmdWriteMicromapsPropertiesEXT) load (context, "vkCmdWriteMicromapsPropertiesEXT");
	pfn_vkCopyMemoryToMicromapEXT = (PFN_vkCopyMemoryToMicromapEXT) load (context, "vkCopyMemoryToMicromapEXT");
	pfn_vkCopyMicromapEXT = (PFN_vkCopyMicromapEXT) load (context, "vkCopyMicromapEXT");
	pfn_vkCopyMicromapToMemoryEXT = (PFN_vkCopyMicromapToMemoryEXT) load (context, "vkCopyMicromapToMemoryEXT");
	pfn_vkCreateMicromapEXT = (PFN_vkCreateMicromapEXT) load (context, "vkCreateMicromapEXT");
	pfn_vkDestroyMicromapEXT = (PFN_vkDestroyMicromapEXT) load (context, "vkDestroyMicromapEXT");
	pfn_vkGetDeviceMicromapCompatibilityEXT = (PFN_vkGetDeviceMicromapCompatibilityEXT) load (context, "vkGetDeviceMicromapCompatibilityEXT");
	pfn_vkGetMicromapBuildSizesEXT = (PFN_vkGetMicromapBuildSizesEXT) load (context, "vkGetMicromapBuildSizesEXT");
	pfn_vkWriteMicromapsPropertiesEXT = (PFN_vkWriteMicromapsPropertiesEXT) load (context, "vkWriteMicromapsPropertiesEXT");
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_pageable_device_local_memory)
	pfn_vkSetDeviceMemoryPriorityEXT = (PFN_vkSetDeviceMemoryPriorityEXT) load (context, "vkSetDeviceMemoryPriorityEXT");
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_EXT_pipeline_properties)
	pfn_vkGetPipelinePropertiesEXT = (PFN_vkGetPipelinePropertiesEXT) load (context, "vkGetPipelinePropertiesEXT");
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_EXT_private_data)
	pfn_vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT) load (context, "vkCreatePrivateDataSlotEXT");
	pfn_vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT) load (context, "vkDestroyPrivateDataSlotEXT");
	pfn_vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT) load (context, "vkGetPrivateDataEXT");
	pfn_vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT) load (context, "vkSetPrivateDataEXT");
#endif /* defined(VK_EXT_private_data) */
#if defined(VK_EXT_sample_locations)
	pfn_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT) load (context, "vkCmdSetSampleLocationsEXT");
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_shader_module_identifier)
	pfn_vkGetShaderModuleCreateInfoIdentifierEXT = (PFN_vkGetShaderModuleCreateInfoIdentifierEXT) load (context, "vkGetShaderModuleCreateInfoIdentifierEXT");
	pfn_vkGetShaderModuleIdentifierEXT = (PFN_vkGetShaderModuleIdentifierEXT) load (context, "vkGetShaderModuleIdentifierEXT");
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_shader_object)
	pfn_vkCmdBindShadersEXT = (PFN_vkCmdBindShadersEXT) load (context, "vkCmdBindShadersEXT");
	pfn_vkCreateShadersEXT = (PFN_vkCreateShadersEXT) load (context, "vkCreateShadersEXT");
	pfn_vkDestroyShaderEXT = (PFN_vkDestroyShaderEXT) load (context, "vkDestroyShaderEXT");
	pfn_vkGetShaderBinaryDataEXT = (PFN_vkGetShaderBinaryDataEXT) load (context, "vkGetShaderBinaryDataEXT");
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_EXT_swapchain_maintenance1)
	pfn_vkReleaseSwapchainImagesEXT = (PFN_vkReleaseSwapchainImagesEXT) load (context, "vkReleaseSwapchainImagesEXT");
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_EXT_transform_feedback)
	pfn_vkCmdBeginQueryIndexedEXT = (PFN_vkCmdBeginQueryIndexedEXT) load (context, "vkCmdBeginQueryIndexedEXT");
	pfn_vkCmdBeginTransformFeedbackEXT = (PFN_vkCmdBeginTransformFeedbackEXT) load (context, "vkCmdBeginTransformFeedbackEXT");
	pfn_vkCmdBindTransformFeedbackBuffersEXT = (PFN_vkCmdBindTransformFeedbackBuffersEXT) load (context, "vkCmdBindTransformFeedbackBuffersEXT");
	pfn_vkCmdDrawIndirectByteCountEXT = (PFN_vkCmdDrawIndirectByteCountEXT) load (context, "vkCmdDrawIndirectByteCountEXT");
	pfn_vkCmdEndQueryIndexedEXT = (PFN_vkCmdEndQueryIndexedEXT) load (context, "vkCmdEndQueryIndexedEXT");
	pfn_vkCmdEndTransformFeedbackEXT = (PFN_vkCmdEndTransformFeedbackEXT) load (context, "vkCmdEndTransformFeedbackEXT");
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_EXT_validation_cache)
	pfn_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT) load (context, "vkCreateValidationCacheEXT");
	pfn_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT) load (context, "vkDestroyValidationCacheEXT");
	pfn_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT) load (context, "vkGetValidationCacheDataEXT");
	pfn_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT) load (context, "vkMergeValidationCachesEXT");
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_FUCHSIA_buffer_collection)
	pfn_vkCreateBufferCollectionFUCHSIA = (PFN_vkCreateBufferCollectionFUCHSIA) load (context, "vkCreateBufferCollectionFUCHSIA");
	pfn_vkDestroyBufferCollectionFUCHSIA = (PFN_vkDestroyBufferCollectionFUCHSIA) load (context, "vkDestroyBufferCollectionFUCHSIA");
	pfn_vkGetBufferCollectionPropertiesFUCHSIA = (PFN_vkGetBufferCollectionPropertiesFUCHSIA) load (context, "vkGetBufferCollectionPropertiesFUCHSIA");
	pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA = (PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA) load (context, "vkSetBufferCollectionBufferConstraintsFUCHSIA");
	pfn_vkSetBufferCollectionImageConstraintsFUCHSIA = (PFN_vkSetBufferCollectionImageConstraintsFUCHSIA) load (context, "vkSetBufferCollectionImageConstraintsFUCHSIA");
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_FUCHSIA_external_memory)
	pfn_vkGetMemoryZirconHandleFUCHSIA = (PFN_vkGetMemoryZirconHandleFUCHSIA) load (context, "vkGetMemoryZirconHandleFUCHSIA");
	pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA = (PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA) load (context, "vkGetMemoryZirconHandlePropertiesFUCHSIA");
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_FUCHSIA_external_semaphore)
	pfn_vkGetSemaphoreZirconHandleFUCHSIA = (PFN_vkGetSemaphoreZirconHandleFUCHSIA) load (context, "vkGetSemaphoreZirconHandleFUCHSIA");
	pfn_vkImportSemaphoreZirconHandleFUCHSIA = (PFN_vkImportSemaphoreZirconHandleFUCHSIA) load (context, "vkImportSemaphoreZirconHandleFUCHSIA");
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_GOOGLE_display_timing)
	pfn_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE) load (context, "vkGetPastPresentationTimingGOOGLE");
	pfn_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE) load (context, "vkGetRefreshCycleDurationGOOGLE");
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_HUAWEI_cluster_culling_shader)
	pfn_vkCmdDrawClusterHUAWEI = (PFN_vkCmdDrawClusterHUAWEI) load (context, "vkCmdDrawClusterHUAWEI");
	pfn_vkCmdDrawClusterIndirectHUAWEI = (PFN_vkCmdDrawClusterIndirectHUAWEI) load (context, "vkCmdDrawClusterIndirectHUAWEI");
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_HUAWEI_invocation_mask)
	pfn_vkCmdBindInvocationMaskHUAWEI = (PFN_vkCmdBindInvocationMaskHUAWEI) load (context, "vkCmdBindInvocationMaskHUAWEI");
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_HUAWEI_subpass_shading)
	pfn_vkCmdSubpassShadingHUAWEI = (PFN_vkCmdSubpassShadingHUAWEI) load (context, "vkCmdSubpassShadingHUAWEI");
	pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI) load (context, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_INTEL_performance_query)
	pfn_vkAcquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL) load (context, "vkAcquirePerformanceConfigurationINTEL");
	pfn_vkCmdSetPerformanceMarkerINTEL = (PFN_vkCmdSetPerformanceMarkerINTEL) load (context, "vkCmdSetPerformanceMarkerINTEL");
	pfn_vkCmdSetPerformanceOverrideINTEL = (PFN_vkCmdSetPerformanceOverrideINTEL) load (context, "vkCmdSetPerformanceOverrideINTEL");
	pfn_vkCmdSetPerformanceStreamMarkerINTEL = (PFN_vkCmdSetPerformanceStreamMarkerINTEL) load (context, "vkCmdSetPerformanceStreamMarkerINTEL");
	pfn_vkGetPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL) load (context, "vkGetPerformanceParameterINTEL");
	pfn_vkInitializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL) load (context, "vkInitializePerformanceApiINTEL");
	pfn_vkQueueSetPerformanceConfigurationINTEL = (PFN_vkQueueSetPerformanceConfigurationINTEL) load (context, "vkQueueSetPerformanceConfigurationINTEL");
	pfn_vkReleasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL) load (context, "vkReleasePerformanceConfigurationINTEL");
	pfn_vkUninitializePerformanceApiINTEL = (PFN_vkUninitializePerformanceApiINTEL) load (context, "vkUninitializePerformanceApiINTEL");
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_acceleration_structure)
	pfn_vkBuildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR) load (context, "vkBuildAccelerationStructuresKHR");
	pfn_vkCmdBuildAccelerationStructuresIndirectKHR = (PFN_vkCmdBuildAccelerationStructuresIndirectKHR) load (context, "vkCmdBuildAccelerationStructuresIndirectKHR");
	pfn_vkCmdBuildAccelerationStructuresKHR = (PFN_vkCmdBuildAccelerationStructuresKHR) load (context, "vkCmdBuildAccelerationStructuresKHR");
	pfn_vkCmdCopyAccelerationStructureKHR = (PFN_vkCmdCopyAccelerationStructureKHR) load (context, "vkCmdCopyAccelerationStructureKHR");
	pfn_vkCmdCopyAccelerationStructureToMemoryKHR = (PFN_vkCmdCopyAccelerationStructureToMemoryKHR) load (context, "vkCmdCopyAccelerationStructureToMemoryKHR");
	pfn_vkCmdCopyMemoryToAccelerationStructureKHR = (PFN_vkCmdCopyMemoryToAccelerationStructureKHR) load (context, "vkCmdCopyMemoryToAccelerationStructureKHR");
	pfn_vkCmdWriteAccelerationStructuresPropertiesKHR = (PFN_vkCmdWriteAccelerationStructuresPropertiesKHR) load (context, "vkCmdWriteAccelerationStructuresPropertiesKHR");
	pfn_vkCopyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR) load (context, "vkCopyAccelerationStructureKHR");
	pfn_vkCopyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR) load (context, "vkCopyAccelerationStructureToMemoryKHR");
	pfn_vkCopyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR) load (context, "vkCopyMemoryToAccelerationStructureKHR");
	pfn_vkCreateAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR) load (context, "vkCreateAccelerationStructureKHR");
	pfn_vkDestroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR) load (context, "vkDestroyAccelerationStructureKHR");
	pfn_vkGetAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR) load (context, "vkGetAccelerationStructureBuildSizesKHR");
	pfn_vkGetAccelerationStructureDeviceAddressKHR = (PFN_vkGetAccelerationStructureDeviceAddressKHR) load (context, "vkGetAccelerationStructureDeviceAddressKHR");
	pfn_vkGetDeviceAccelerationStructureCompatibilityKHR = (PFN_vkGetDeviceAccelerationStructureCompatibilityKHR) load (context, "vkGetDeviceAccelerationStructureCompatibilityKHR");
	pfn_vkWriteAccelerationStructuresPropertiesKHR = (PFN_vkWriteAccelerationStructuresPropertiesKHR) load (context, "vkWriteAccelerationStructuresPropertiesKHR");
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_bind_memory2)
	pfn_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR) load (context, "vkBindBufferMemory2KHR");
	pfn_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR) load (context, "vkBindImageMemory2KHR");
#endif /* defined(VK_KHR_bind_memory2) */
#if defined(VK_KHR_buffer_device_address)
	pfn_vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR) load (context, "vkGetBufferDeviceAddressKHR");
	pfn_vkGetBufferOpaqueCaptureAddressKHR = (PFN_vkGetBufferOpaqueCaptureAddressKHR) load (context, "vkGetBufferOpaqueCaptureAddressKHR");
	pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR = (PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR) load (context, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
#endif /* defined(VK_KHR_buffer_device_address) */
#if defined(VK_KHR_calibrated_timestamps)
	pfn_vkGetCalibratedTimestampsKHR = (PFN_vkGetCalibratedTimestampsKHR) load (context, "vkGetCalibratedTimestampsKHR");
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_KHR_copy_commands2)
	pfn_vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR) load (context, "vkCmdBlitImage2KHR");
	pfn_vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR) load (context, "vkCmdCopyBuffer2KHR");
	pfn_vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR) load (context, "vkCmdCopyBufferToImage2KHR");
	pfn_vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR) load (context, "vkCmdCopyImage2KHR");
	pfn_vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR) load (context, "vkCmdCopyImageToBuffer2KHR");
	pfn_vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR) load (context, "vkCmdResolveImage2KHR");
#endif /* defined(VK_KHR_copy_commands2) */
#if defined(VK_KHR_create_renderpass2)
	pfn_vkCmdBeginRenderPass2KHR = (PFN_vkCmdBeginRenderPass2KHR) load (context, "vkCmdBeginRenderPass2KHR");
	pfn_vkCmdEndRenderPass2KHR = (PFN_vkCmdEndRenderPass2KHR) load (context, "vkCmdEndRenderPass2KHR");
	pfn_vkCmdNextSubpass2KHR = (PFN_vkCmdNextSubpass2KHR) load (context, "vkCmdNextSubpass2KHR");
	pfn_vkCreateRenderPass2KHR = (PFN_vkCreateRenderPass2KHR) load (context, "vkCreateRenderPass2KHR");
#endif /* defined(VK_KHR_create_renderpass2) */
#if defined(VK_KHR_deferred_host_operations)
	pfn_vkCreateDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR) load (context, "vkCreateDeferredOperationKHR");
	pfn_vkDeferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR) load (context, "vkDeferredOperationJoinKHR");
	pfn_vkDestroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR) load (context, "vkDestroyDeferredOperationKHR");
	pfn_vkGetDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR) load (context, "vkGetDeferredOperationMaxConcurrencyKHR");
	pfn_vkGetDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR) load (context, "vkGetDeferredOperationResultKHR");
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_descriptor_update_template)
	pfn_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR) load (context, "vkCreateDescriptorUpdateTemplateKHR");
	pfn_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR) load (context, "vkDestroyDescriptorUpdateTemplateKHR");
	pfn_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR) load (context, "vkUpdateDescriptorSetWithTemplateKHR");
#endif /* defined(VK_KHR_descriptor_update_template) */
#if defined(VK_KHR_device_group)
	pfn_vkCmdDispatchBaseKHR = (PFN_vkCmdDispatchBaseKHR) load (context, "vkCmdDispatchBaseKHR");
	pfn_vkCmdSetDeviceMaskKHR = (PFN_vkCmdSetDeviceMaskKHR) load (context, "vkCmdSetDeviceMaskKHR");
	pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR) load (context, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
#endif /* defined(VK_KHR_device_group) */
#if defined(VK_KHR_display_swapchain)
	pfn_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR) load (context, "vkCreateSharedSwapchainsKHR");
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_KHR_draw_indirect_count)
	pfn_vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR) load (context, "vkCmdDrawIndexedIndirectCountKHR");
	pfn_vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR) load (context, "vkCmdDrawIndirectCountKHR");
#endif /* defined(VK_KHR_draw_indirect_count) */
#if defined(VK_KHR_dynamic_rendering)
	pfn_vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR) load (context, "vkCmdBeginRenderingKHR");
	pfn_vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR) load (context, "vkCmdEndRenderingKHR");
#endif /* defined(VK_KHR_dynamic_rendering) */
#if defined(VK_KHR_dynamic_rendering_local_read)
	pfn_vkCmdSetRenderingAttachmentLocationsKHR = (PFN_vkCmdSetRenderingAttachmentLocationsKHR) load (context, "vkCmdSetRenderingAttachmentLocationsKHR");
	pfn_vkCmdSetRenderingInputAttachmentIndicesKHR = (PFN_vkCmdSetRenderingInputAttachmentIndicesKHR) load (context, "vkCmdSetRenderingInputAttachmentIndicesKHR");
#endif /* defined(VK_KHR_dynamic_rendering_local_read) */
#if defined(VK_KHR_external_fence_fd)
	pfn_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR) load (context, "vkGetFenceFdKHR");
	pfn_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR) load (context, "vkImportFenceFdKHR");
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
	pfn_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR) load (context, "vkGetFenceWin32HandleKHR");
	pfn_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR) load (context, "vkImportFenceWin32HandleKHR");
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_KHR_external_memory_fd)
	pfn_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR) load (context, "vkGetMemoryFdKHR");
	pfn_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR) load (context, "vkGetMemoryFdPropertiesKHR");
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_KHR_external_memory_win32)
	pfn_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR) load (context, "vkGetMemoryWin32HandleKHR");
	pfn_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR) load (context, "vkGetMemoryWin32HandlePropertiesKHR");
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_KHR_external_semaphore_fd)
	pfn_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR) load (context, "vkGetSemaphoreFdKHR");
	pfn_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR) load (context, "vkImportSemaphoreFdKHR");
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
	pfn_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR) load (context, "vkGetSemaphoreWin32HandleKHR");
	pfn_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR) load (context, "vkImportSemaphoreWin32HandleKHR");
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_KHR_fragment_shading_rate)
	pfn_vkCmdSetFragmentShadingRateKHR = (PFN_vkCmdSetFragmentShadingRateKHR) load (context, "vkCmdSetFragmentShadingRateKHR");
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_KHR_get_memory_requirements2)
	pfn_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR) load (context, "vkGetBufferMemoryRequirements2KHR");
	pfn_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR) load (context, "vkGetImageMemoryRequirements2KHR");
	pfn_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR) load (context, "vkGetImageSparseMemoryRequirements2KHR");
#endif /* defined(VK_KHR_get_memory_requirements2) */
#if defined(VK_KHR_line_rasterization)
	pfn_vkCmdSetLineStippleKHR = (PFN_vkCmdSetLineStippleKHR) load (context, "vkCmdSetLineStippleKHR");
#endif /* defined(VK_KHR_line_rasterization) */
#if defined(VK_KHR_maintenance1)
	pfn_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR) load (context, "vkTrimCommandPoolKHR");
#endif /* defined(VK_KHR_maintenance1) */
#if defined(VK_KHR_maintenance3)
	pfn_vkGetDescriptorSetLayoutSupportKHR = (PFN_vkGetDescriptorSetLayoutSupportKHR) load (context, "vkGetDescriptorSetLayoutSupportKHR");
#endif /* defined(VK_KHR_maintenance3) */
#if defined(VK_KHR_maintenance4)
	pfn_vkGetDeviceBufferMemoryRequirementsKHR = (PFN_vkGetDeviceBufferMemoryRequirementsKHR) load (context, "vkGetDeviceBufferMemoryRequirementsKHR");
	pfn_vkGetDeviceImageMemoryRequirementsKHR = (PFN_vkGetDeviceImageMemoryRequirementsKHR) load (context, "vkGetDeviceImageMemoryRequirementsKHR");
	pfn_vkGetDeviceImageSparseMemoryRequirementsKHR = (PFN_vkGetDeviceImageSparseMemoryRequirementsKHR) load (context, "vkGetDeviceImageSparseMemoryRequirementsKHR");
#endif /* defined(VK_KHR_maintenance4) */
#if defined(VK_KHR_maintenance5)
	pfn_vkCmdBindIndexBuffer2KHR = (PFN_vkCmdBindIndexBuffer2KHR) load (context, "vkCmdBindIndexBuffer2KHR");
	pfn_vkGetDeviceImageSubresourceLayoutKHR = (PFN_vkGetDeviceImageSubresourceLayoutKHR) load (context, "vkGetDeviceImageSubresourceLayoutKHR");
	pfn_vkGetImageSubresourceLayout2KHR = (PFN_vkGetImageSubresourceLayout2KHR) load (context, "vkGetImageSubresourceLayout2KHR");
	pfn_vkGetRenderingAreaGranularityKHR = (PFN_vkGetRenderingAreaGranularityKHR) load (context, "vkGetRenderingAreaGranularityKHR");
#endif /* defined(VK_KHR_maintenance5) */
#if defined(VK_KHR_maintenance6)
	pfn_vkCmdBindDescriptorSets2KHR = (PFN_vkCmdBindDescriptorSets2KHR) load (context, "vkCmdBindDescriptorSets2KHR");
	pfn_vkCmdPushConstants2KHR = (PFN_vkCmdPushConstants2KHR) load (context, "vkCmdPushConstants2KHR");
#endif /* defined(VK_KHR_maintenance6) */
#if defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor)
	pfn_vkCmdPushDescriptorSet2KHR = (PFN_vkCmdPushDescriptorSet2KHR) load (context, "vkCmdPushDescriptorSet2KHR");
	pfn_vkCmdPushDescriptorSetWithTemplate2KHR = (PFN_vkCmdPushDescriptorSetWithTemplate2KHR) load (context, "vkCmdPushDescriptorSetWithTemplate2KHR");
#endif /* defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
	pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT) load (context, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
	pfn_vkCmdSetDescriptorBufferOffsets2EXT = (PFN_vkCmdSetDescriptorBufferOffsets2EXT) load (context, "vkCmdSetDescriptorBufferOffsets2EXT");
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_KHR_map_memory2)
	pfn_vkMapMemory2KHR = (PFN_vkMapMemory2KHR) load (context, "vkMapMemory2KHR");
	pfn_vkUnmapMemory2KHR = (PFN_vkUnmapMemory2KHR) load (context, "vkUnmapMemory2KHR");
#endif /* defined(VK_KHR_map_memory2) */
#if defined(VK_KHR_performance_query)
	pfn_vkAcquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR) load (context, "vkAcquireProfilingLockKHR");
	pfn_vkReleaseProfilingLockKHR = (PFN_vkReleaseProfilingLockKHR) load (context, "vkReleaseProfilingLockKHR");
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_pipeline_executable_properties)
	pfn_vkGetPipelineExecutableInternalRepresentationsKHR = (PFN_vkGetPipelineExecutableInternalRepresentationsKHR) load (context, "vkGetPipelineExecutableInternalRepresentationsKHR");
	pfn_vkGetPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR) load (context, "vkGetPipelineExecutablePropertiesKHR");
	pfn_vkGetPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR) load (context, "vkGetPipelineExecutableStatisticsKHR");
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_KHR_present_wait)
	pfn_vkWaitForPresentKHR = (PFN_vkWaitForPresentKHR) load (context, "vkWaitForPresentKHR");
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_KHR_push_descriptor)
	pfn_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR) load (context, "vkCmdPushDescriptorSetKHR");
#endif /* defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
	pfn_vkCmdTraceRaysIndirect2KHR = (PFN_vkCmdTraceRaysIndirect2KHR) load (context, "vkCmdTraceRaysIndirect2KHR");
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_pipeline)
	pfn_vkCmdSetRayTracingPipelineStackSizeKHR = (PFN_vkCmdSetRayTracingPipelineStackSizeKHR) load (context, "vkCmdSetRayTracingPipelineStackSizeKHR");
	pfn_vkCmdTraceRaysIndirectKHR = (PFN_vkCmdTraceRaysIndirectKHR) load (context, "vkCmdTraceRaysIndirectKHR");
	pfn_vkCmdTraceRaysKHR = (PFN_vkCmdTraceRaysKHR) load (context, "vkCmdTraceRaysKHR");
	pfn_vkCreateRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR) load (context, "vkCreateRayTracingPipelinesKHR");
	pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) load (context, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	pfn_vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR) load (context, "vkGetRayTracingShaderGroupHandlesKHR");
	pfn_vkGetRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR) load (context, "vkGetRayTracingShaderGroupStackSizeKHR");
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_sampler_ycbcr_conversion)
	pfn_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR) load (context, "vkCreateSamplerYcbcrConversionKHR");
	pfn_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR) load (context, "vkDestroySamplerYcbcrConversionKHR");
#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */
#if defined(VK_KHR_shared_presentable_image)
	pfn_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR) load (context, "vkGetSwapchainStatusKHR");
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_KHR_swapchain)
	pfn_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR) load (context, "vkAcquireNextImageKHR");
	pfn_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR) load (context, "vkCreateSwapchainKHR");
	pfn_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR) load (context, "vkDestroySwapchainKHR");
	pfn_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR) load (context, "vkGetSwapchainImagesKHR");
	pfn_vkQueuePresentKHR = (PFN_vkQueuePresentKHR) load (context, "vkQueuePresentKHR");
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_synchronization2)
	pfn_vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR) load (context, "vkCmdPipelineBarrier2KHR");
	pfn_vkCmdResetEvent2KHR = (PFN_vkCmdResetEvent2KHR) load (context, "vkCmdResetEvent2KHR");
	pfn_vkCmdSetEvent2KHR = (PFN_vkCmdSetEvent2KHR) load (context, "vkCmdSetEvent2KHR");
	pfn_vkCmdWaitEvents2KHR = (PFN_vkCmdWaitEvents2KHR) load (context, "vkCmdWaitEvents2KHR");
	pfn_vkCmdWriteTimestamp2KHR = (PFN_vkCmdWriteTimestamp2KHR) load (context, "vkCmdWriteTimestamp2KHR");
	pfn_vkQueueSubmit2KHR = (PFN_vkQueueSubmit2KHR) load (context, "vkQueueSubmit2KHR");
#endif /* defined(VK_KHR_synchronization2) */
#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)
	pfn_vkCmdWriteBufferMarker2AMD = (PFN_vkCmdWriteBufferMarker2AMD) load (context, "vkCmdWriteBufferMarker2AMD");
#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */
#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)
	pfn_vkGetQueueCheckpointData2NV = (PFN_vkGetQueueCheckpointData2NV) load (context, "vkGetQueueCheckpointData2NV");
#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_KHR_timeline_semaphore)
	pfn_vkGetSemaphoreCounterValueKHR = (PFN_vkGetSemaphoreCounterValueKHR) load (context, "vkGetSemaphoreCounterValueKHR");
	pfn_vkSignalSemaphoreKHR = (PFN_vkSignalSemaphoreKHR) load (context, "vkSignalSemaphoreKHR");
	pfn_vkWaitSemaphoresKHR = (PFN_vkWaitSemaphoresKHR) load (context, "vkWaitSemaphoresKHR");
#endif /* defined(VK_KHR_timeline_semaphore) */
#if defined(VK_KHR_video_decode_queue)
	pfn_vkCmdDecodeVideoKHR = (PFN_vkCmdDecodeVideoKHR) load (context, "vkCmdDecodeVideoKHR");
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_encode_queue)
	pfn_vkCmdEncodeVideoKHR = (PFN_vkCmdEncodeVideoKHR) load (context, "vkCmdEncodeVideoKHR");
	pfn_vkGetEncodedVideoSessionParametersKHR = (PFN_vkGetEncodedVideoSessionParametersKHR) load (context, "vkGetEncodedVideoSessionParametersKHR");
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
	pfn_vkBindVideoSessionMemoryKHR = (PFN_vkBindVideoSessionMemoryKHR) load (context, "vkBindVideoSessionMemoryKHR");
	pfn_vkCmdBeginVideoCodingKHR = (PFN_vkCmdBeginVideoCodingKHR) load (context, "vkCmdBeginVideoCodingKHR");
	pfn_vkCmdControlVideoCodingKHR = (PFN_vkCmdControlVideoCodingKHR) load (context, "vkCmdControlVideoCodingKHR");
	pfn_vkCmdEndVideoCodingKHR = (PFN_vkCmdEndVideoCodingKHR) load (context, "vkCmdEndVideoCodingKHR");
	pfn_vkCreateVideoSessionKHR = (PFN_vkCreateVideoSessionKHR) load (context, "vkCreateVideoSessionKHR");
	pfn_vkCreateVideoSessionParametersKHR = (PFN_vkCreateVideoSessionParametersKHR) load (context, "vkCreateVideoSessionParametersKHR");
	pfn_vkDestroyVideoSessionKHR = (PFN_vkDestroyVideoSessionKHR) load (context, "vkDestroyVideoSessionKHR");
	pfn_vkDestroyVideoSessionParametersKHR = (PFN_vkDestroyVideoSessionParametersKHR) load (context, "vkDestroyVideoSessionParametersKHR");
	pfn_vkGetVideoSessionMemoryRequirementsKHR = (PFN_vkGetVideoSessionMemoryRequirementsKHR) load (context, "vkGetVideoSessionMemoryRequirementsKHR");
	pfn_vkUpdateVideoSessionParametersKHR = (PFN_vkUpdateVideoSessionParametersKHR) load (context, "vkUpdateVideoSessionParametersKHR");
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_NVX_binary_import)
	pfn_vkCmdCuLaunchKernelNVX = (PFN_vkCmdCuLaunchKernelNVX) load (context, "vkCmdCuLaunchKernelNVX");
	pfn_vkCreateCuFunctionNVX = (PFN_vkCreateCuFunctionNVX) load (context, "vkCreateCuFunctionNVX");
	pfn_vkCreateCuModuleNVX = (PFN_vkCreateCuModuleNVX) load (context, "vkCreateCuModuleNVX");
	pfn_vkDestroyCuFunctionNVX = (PFN_vkDestroyCuFunctionNVX) load (context, "vkDestroyCuFunctionNVX");
	pfn_vkDestroyCuModuleNVX = (PFN_vkDestroyCuModuleNVX) load (context, "vkDestroyCuModuleNVX");
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NVX_image_view_handle)
	pfn_vkGetImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX) load (context, "vkGetImageViewAddressNVX");
	pfn_vkGetImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX) load (context, "vkGetImageViewHandleNVX");
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_NV_clip_space_w_scaling)
	pfn_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV) load (context, "vkCmdSetViewportWScalingNV");
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_NV_copy_memory_indirect)
	pfn_vkCmdCopyMemoryIndirectNV = (PFN_vkCmdCopyMemoryIndirectNV) load (context, "vkCmdCopyMemoryIndirectNV");
	pfn_vkCmdCopyMemoryToImageIndirectNV = (PFN_vkCmdCopyMemoryToImageIndirectNV) load (context, "vkCmdCopyMemoryToImageIndirectNV");
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_cuda_kernel_launch)
	pfn_vkCmdCudaLaunchKernelNV = (PFN_vkCmdCudaLaunchKernelNV) load (context, "vkCmdCudaLaunchKernelNV");
	pfn_vkCreateCudaFunctionNV = (PFN_vkCreateCudaFunctionNV) load (context, "vkCreateCudaFunctionNV");
	pfn_vkCreateCudaModuleNV = (PFN_vkCreateCudaModuleNV) load (context, "vkCreateCudaModuleNV");
	pfn_vkDestroyCudaFunctionNV = (PFN_vkDestroyCudaFunctionNV) load (context, "vkDestroyCudaFunctionNV");
	pfn_vkDestroyCudaModuleNV = (PFN_vkDestroyCudaModuleNV) load (context, "vkDestroyCudaModuleNV");
	pfn_vkGetCudaModuleCacheNV = (PFN_vkGetCudaModuleCacheNV) load (context, "vkGetCudaModuleCacheNV");
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_NV_device_diagnostic_checkpoints)
	pfn_vkCmdSetCheckpointNV = (PFN_vkCmdSetCheckpointNV) load (context, "vkCmdSetCheckpointNV");
	pfn_vkGetQueueCheckpointDataNV = (PFN_vkGetQueueCheckpointDataNV) load (context, "vkGetQueueCheckpointDataNV");
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_NV_device_generated_commands)
	pfn_vkCmdBindPipelineShaderGroupNV = (PFN_vkCmdBindPipelineShaderGroupNV) load (context, "vkCmdBindPipelineShaderGroupNV");
	pfn_vkCmdExecuteGeneratedCommandsNV = (PFN_vkCmdExecuteGeneratedCommandsNV) load (context, "vkCmdExecuteGeneratedCommandsNV");
	pfn_vkCmdPreprocessGeneratedCommandsNV = (PFN_vkCmdPreprocessGeneratedCommandsNV) load (context, "vkCmdPreprocessGeneratedCommandsNV");
	pfn_vkCreateIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV) load (context, "vkCreateIndirectCommandsLayoutNV");
	pfn_vkDestroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV) load (context, "vkDestroyIndirectCommandsLayoutNV");
	pfn_vkGetGeneratedCommandsMemoryRequirementsNV = (PFN_vkGetGeneratedCommandsMemoryRequirementsNV) load (context, "vkGetGeneratedCommandsMemoryRequirementsNV");
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_NV_device_generated_commands_compute)
	pfn_vkCmdUpdatePipelineIndirectBufferNV = (PFN_vkCmdUpdatePipelineIndirectBufferNV) load (context, "vkCmdUpdatePipelineIndirectBufferNV");
	pfn_vkGetPipelineIndirectDeviceAddressNV = (PFN_vkGetPipelineIndirectDeviceAddressNV) load (context, "vkGetPipelineIndirectDeviceAddressNV");
	pfn_vkGetPipelineIndirectMemoryRequirementsNV = (PFN_vkGetPipelineIndirectMemoryRequirementsNV) load (context, "vkGetPipelineIndirectMemoryRequirementsNV");
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_NV_external_memory_rdma)
	pfn_vkGetMemoryRemoteAddressNV = (PFN_vkGetMemoryRemoteAddressNV) load (context, "vkGetMemoryRemoteAddressNV");
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_NV_external_memory_win32)
	pfn_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV) load (context, "vkGetMemoryWin32HandleNV");
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_NV_fragment_shading_rate_enums)
	pfn_vkCmdSetFragmentShadingRateEnumNV = (PFN_vkCmdSetFragmentShadingRateEnumNV) load (context, "vkCmdSetFragmentShadingRateEnumNV");
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_NV_low_latency2)
	pfn_vkGetLatencyTimingsNV = (PFN_vkGetLatencyTimingsNV) load (context, "vkGetLatencyTimingsNV");
	pfn_vkLatencySleepNV = (PFN_vkLatencySleepNV) load (context, "vkLatencySleepNV");
	pfn_vkQueueNotifyOutOfBandNV = (PFN_vkQueueNotifyOutOfBandNV) load (context, "vkQueueNotifyOutOfBandNV");
	pfn_vkSetLatencyMarkerNV = (PFN_vkSetLatencyMarkerNV) load (context, "vkSetLatencyMarkerNV");
	pfn_vkSetLatencySleepModeNV = (PFN_vkSetLatencySleepModeNV) load (context, "vkSetLatencySleepModeNV");
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_memory_decompression)
	pfn_vkCmdDecompressMemoryIndirectCountNV = (PFN_vkCmdDecompressMemoryIndirectCountNV) load (context, "vkCmdDecompressMemoryIndirectCountNV");
	pfn_vkCmdDecompressMemoryNV = (PFN_vkCmdDecompressMemoryNV) load (context, "vkCmdDecompressMemoryNV");
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_mesh_shader)
	pfn_vkCmdDrawMeshTasksIndirectCountNV = (PFN_vkCmdDrawMeshTasksIndirectCountNV) load (context, "vkCmdDrawMeshTasksIndirectCountNV");
	pfn_vkCmdDrawMeshTasksIndirectNV = (PFN_vkCmdDrawMeshTasksIndirectNV) load (context, "vkCmdDrawMeshTasksIndirectNV");
	pfn_vkCmdDrawMeshTasksNV = (PFN_vkCmdDrawMeshTasksNV) load (context, "vkCmdDrawMeshTasksNV");
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_NV_optical_flow)
	pfn_vkBindOpticalFlowSessionImageNV = (PFN_vkBindOpticalFlowSessionImageNV) load (context, "vkBindOpticalFlowSessionImageNV");
	pfn_vkCmdOpticalFlowExecuteNV = (PFN_vkCmdOpticalFlowExecuteNV) load (context, "vkCmdOpticalFlowExecuteNV");
	pfn_vkCreateOpticalFlowSessionNV = (PFN_vkCreateOpticalFlowSessionNV) load (context, "vkCreateOpticalFlowSessionNV");
	pfn_vkDestroyOpticalFlowSessionNV = (PFN_vkDestroyOpticalFlowSessionNV) load (context, "vkDestroyOpticalFlowSessionNV");
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_ray_tracing)
	pfn_vkBindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV) load (context, "vkBindAccelerationStructureMemoryNV");
	pfn_vkCmdBuildAccelerationStructureNV = (PFN_vkCmdBuildAccelerationStructureNV) load (context, "vkCmdBuildAccelerationStructureNV");
	pfn_vkCmdCopyAccelerationStructureNV = (PFN_vkCmdCopyAccelerationStructureNV) load (context, "vkCmdCopyAccelerationStructureNV");
	pfn_vkCmdTraceRaysNV = (PFN_vkCmdTraceRaysNV) load (context, "vkCmdTraceRaysNV");
	pfn_vkCmdWriteAccelerationStructuresPropertiesNV = (PFN_vkCmdWriteAccelerationStructuresPropertiesNV) load (context, "vkCmdWriteAccelerationStructuresPropertiesNV");
	pfn_vkCompileDeferredNV = (PFN_vkCompileDeferredNV) load (context, "vkCompileDeferredNV");
	pfn_vkCreateAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV) load (context, "vkCreateAccelerationStructureNV");
	pfn_vkCreateRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV) load (context, "vkCreateRayTracingPipelinesNV");
	pfn_vkDestroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV) load (context, "vkDestroyAccelerationStructureNV");
	pfn_vkGetAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV) load (context, "vkGetAccelerationStructureHandleNV");
	pfn_vkGetAccelerationStructureMemoryRequirementsNV = (PFN_vkGetAccelerationStructureMemoryRequirementsNV) load (context, "vkGetAccelerationStructureMemoryRequirementsNV");
	pfn_vkGetRayTracingShaderGroupHandlesNV = (PFN_vkGetRayTracingShaderGroupHandlesNV) load (context, "vkGetRayTracingShaderGroupHandlesNV");
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2
	pfn_vkCmdSetExclusiveScissorEnableNV = (PFN_vkCmdSetExclusiveScissorEnableNV) load (context, "vkCmdSetExclusiveScissorEnableNV");
#endif /* defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2 */
#if defined(VK_NV_scissor_exclusive)
	pfn_vkCmdSetExclusiveScissorNV = (PFN_vkCmdSetExclusiveScissorNV) load (context, "vkCmdSetExclusiveScissorNV");
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_shading_rate_image)
	pfn_vkCmdBindShadingRateImageNV = (PFN_vkCmdBindShadingRateImageNV) load (context, "vkCmdBindShadingRateImageNV");
	pfn_vkCmdSetCoarseSampleOrderNV = (PFN_vkCmdSetCoarseSampleOrderNV) load (context, "vkCmdSetCoarseSampleOrderNV");
	pfn_vkCmdSetViewportShadingRatePaletteNV = (PFN_vkCmdSetViewportShadingRatePaletteNV) load (context, "vkCmdSetViewportShadingRatePaletteNV");
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_QCOM_tile_properties)
	pfn_vkGetDynamicRenderingTilePropertiesQCOM = (PFN_vkGetDynamicRenderingTilePropertiesQCOM) load (context, "vkGetDynamicRenderingTilePropertiesQCOM");
	pfn_vkGetFramebufferTilePropertiesQCOM = (PFN_vkGetFramebufferTilePropertiesQCOM) load (context, "vkGetFramebufferTilePropertiesQCOM");
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_QNX_external_memory_screen_buffer)
	pfn_vkGetScreenBufferPropertiesQNX = (PFN_vkGetScreenBufferPropertiesQNX) load (context, "vkGetScreenBufferPropertiesQNX");
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
	pfn_vkGetDescriptorSetHostMappingVALVE = (PFN_vkGetDescriptorSetHostMappingVALVE) load (context, "vkGetDescriptorSetHostMappingVALVE");
	pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE = (PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE) load (context, "vkGetDescriptorSetLayoutHostMappingInfoVALVE");
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object))
	pfn_vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT) load (context, "vkCmdBindVertexBuffers2EXT");
	pfn_vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT) load (context, "vkCmdSetCullModeEXT");
	pfn_vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT) load (context, "vkCmdSetDepthBoundsTestEnableEXT");
	pfn_vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT) load (context, "vkCmdSetDepthCompareOpEXT");
	pfn_vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT) load (context, "vkCmdSetDepthTestEnableEXT");
	pfn_vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT) load (context, "vkCmdSetDepthWriteEnableEXT");
	pfn_vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT) load (context, "vkCmdSetFrontFaceEXT");
	pfn_vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT) load (context, "vkCmdSetPrimitiveTopologyEXT");
	pfn_vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT) load (context, "vkCmdSetScissorWithCountEXT");
	pfn_vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT) load (context, "vkCmdSetStencilOpEXT");
	pfn_vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT) load (context, "vkCmdSetStencilTestEnableEXT");
	pfn_vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT) load (context, "vkCmdSetViewportWithCountEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object))
	pfn_vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT) load (context, "vkCmdSetDepthBiasEnableEXT");
	pfn_vkCmdSetLogicOpEXT = (PFN_vkCmdSetLogicOpEXT) load (context, "vkCmdSetLogicOpEXT");
	pfn_vkCmdSetPatchControlPointsEXT = (PFN_vkCmdSetPatchControlPointsEXT) load (context, "vkCmdSetPatchControlPointsEXT");
	pfn_vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT) load (context, "vkCmdSetPrimitiveRestartEnableEXT");
	pfn_vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT) load (context, "vkCmdSetRasterizerDiscardEnableEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object))
	pfn_vkCmdSetAlphaToCoverageEnableEXT = (PFN_vkCmdSetAlphaToCoverageEnableEXT) load (context, "vkCmdSetAlphaToCoverageEnableEXT");
	pfn_vkCmdSetAlphaToOneEnableEXT = (PFN_vkCmdSetAlphaToOneEnableEXT) load (context, "vkCmdSetAlphaToOneEnableEXT");
	pfn_vkCmdSetColorBlendEnableEXT = (PFN_vkCmdSetColorBlendEnableEXT) load (context, "vkCmdSetColorBlendEnableEXT");
	pfn_vkCmdSetColorBlendEquationEXT = (PFN_vkCmdSetColorBlendEquationEXT) load (context, "vkCmdSetColorBlendEquationEXT");
	pfn_vkCmdSetColorWriteMaskEXT = (PFN_vkCmdSetColorWriteMaskEXT) load (context, "vkCmdSetColorWriteMaskEXT");
	pfn_vkCmdSetDepthClampEnableEXT = (PFN_vkCmdSetDepthClampEnableEXT) load (context, "vkCmdSetDepthClampEnableEXT");
	pfn_vkCmdSetLogicOpEnableEXT = (PFN_vkCmdSetLogicOpEnableEXT) load (context, "vkCmdSetLogicOpEnableEXT");
	pfn_vkCmdSetPolygonModeEXT = (PFN_vkCmdSetPolygonModeEXT) load (context, "vkCmdSetPolygonModeEXT");
	pfn_vkCmdSetRasterizationSamplesEXT = (PFN_vkCmdSetRasterizationSamplesEXT) load (context, "vkCmdSetRasterizationSamplesEXT");
	pfn_vkCmdSetSampleMaskEXT = (PFN_vkCmdSetSampleMaskEXT) load (context, "vkCmdSetSampleMaskEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object))
	pfn_vkCmdSetTessellationDomainOriginEXT = (PFN_vkCmdSetTessellationDomainOriginEXT) load (context, "vkCmdSetTessellationDomainOriginEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback))
	pfn_vkCmdSetRasterizationStreamEXT = (PFN_vkCmdSetRasterizationStreamEXT) load (context, "vkCmdSetRasterizationStreamEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
	pfn_vkCmdSetConservativeRasterizationModeEXT = (PFN_vkCmdSetConservativeRasterizationModeEXT) load (context, "vkCmdSetConservativeRasterizationModeEXT");
	pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT = (PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT) load (context, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable))
	pfn_vkCmdSetDepthClipEnableEXT = (PFN_vkCmdSetDepthClipEnableEXT) load (context, "vkCmdSetDepthClipEnableEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations))
	pfn_vkCmdSetSampleLocationsEnableEXT = (PFN_vkCmdSetSampleLocationsEnableEXT) load (context, "vkCmdSetSampleLocationsEnableEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced))
	pfn_vkCmdSetColorBlendAdvancedEXT = (PFN_vkCmdSetColorBlendAdvancedEXT) load (context, "vkCmdSetColorBlendAdvancedEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex))
	pfn_vkCmdSetProvokingVertexModeEXT = (PFN_vkCmdSetProvokingVertexModeEXT) load (context, "vkCmdSetProvokingVertexModeEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
	pfn_vkCmdSetLineRasterizationModeEXT = (PFN_vkCmdSetLineRasterizationModeEXT) load (context, "vkCmdSetLineRasterizationModeEXT");
	pfn_vkCmdSetLineStippleEnableEXT = (PFN_vkCmdSetLineStippleEnableEXT) load (context, "vkCmdSetLineStippleEnableEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control))
	pfn_vkCmdSetDepthClipNegativeOneToOneEXT = (PFN_vkCmdSetDepthClipNegativeOneToOneEXT) load (context, "vkCmdSetDepthClipNegativeOneToOneEXT");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
	pfn_vkCmdSetViewportWScalingEnableNV = (PFN_vkCmdSetViewportWScalingEnableNV) load (context, "vkCmdSetViewportWScalingEnableNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
	pfn_vkCmdSetViewportSwizzleNV = (PFN_vkCmdSetViewportSwizzleNV) load (context, "vkCmdSetViewportSwizzleNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
	pfn_vkCmdSetCoverageToColorEnableNV = (PFN_vkCmdSetCoverageToColorEnableNV) load (context, "vkCmdSetCoverageToColorEnableNV");
	pfn_vkCmdSetCoverageToColorLocationNV = (PFN_vkCmdSetCoverageToColorLocationNV) load (context, "vkCmdSetCoverageToColorLocationNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
	pfn_vkCmdSetCoverageModulationModeNV = (PFN_vkCmdSetCoverageModulationModeNV) load (context, "vkCmdSetCoverageModulationModeNV");
	pfn_vkCmdSetCoverageModulationTableEnableNV = (PFN_vkCmdSetCoverageModulationTableEnableNV) load (context, "vkCmdSetCoverageModulationTableEnableNV");
	pfn_vkCmdSetCoverageModulationTableNV = (PFN_vkCmdSetCoverageModulationTableNV) load (context, "vkCmdSetCoverageModulationTableNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
	pfn_vkCmdSetShadingRateImageEnableNV = (PFN_vkCmdSetShadingRateImageEnableNV) load (context, "vkCmdSetShadingRateImageEnableNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
	pfn_vkCmdSetRepresentativeFragmentTestEnableNV = (PFN_vkCmdSetRepresentativeFragmentTestEnableNV) load (context, "vkCmdSetRepresentativeFragmentTestEnableNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
	pfn_vkCmdSetCoverageReductionModeNV = (PFN_vkCmdSetCoverageReductionModeNV) load (context, "vkCmdSetCoverageReductionModeNV");
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */
#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))
	pfn_vkGetDeviceGroupSurfacePresentModes2EXT = (PFN_vkGetDeviceGroupSurfacePresentModes2EXT) load (context, "vkGetDeviceGroupSurfacePresentModes2EXT");
#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */
#if (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control))
	pfn_vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT) load (context, "vkGetImageSubresourceLayout2EXT");
#endif /* (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control)) */
#if (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state))
	pfn_vkCmdSetVertexInputEXT = (PFN_vkCmdSetVertexInputEXT) load (context, "vkCmdSetVertexInputEXT");
#endif /* (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state)) */
#if (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template))
	pfn_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR) load (context, "vkCmdPushDescriptorSetWithTemplateKHR");
#endif /* (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
	pfn_vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR) load (context, "vkGetDeviceGroupPresentCapabilitiesKHR");
	pfn_vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR) load (context, "vkGetDeviceGroupSurfacePresentModesKHR");
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
	pfn_vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR) load (context, "vkAcquireNextImage2KHR");
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
/* VKFW_GEN_LOAD_DEVICE */
}

/* VKFW_GEN_PROTOTYPES_C */
#if defined(VK_VERSION_1_0)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAllocateCommandBuffers (VkDevice   device, const  VkCommandBufferAllocateInfo *  pAllocateInfo, VkCommandBuffer *  pCommandBuffers)
{
	return pfn_vkAllocateCommandBuffers (device, pAllocateInfo, pCommandBuffers);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAllocateDescriptorSets (VkDevice   device, const  VkDescriptorSetAllocateInfo *  pAllocateInfo, VkDescriptorSet *  pDescriptorSets)
{
	return pfn_vkAllocateDescriptorSets (device, pAllocateInfo, pDescriptorSets);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAllocateMemory (VkDevice   device, const  VkMemoryAllocateInfo *  pAllocateInfo, const  VkAllocationCallbacks *  pAllocator, VkDeviceMemory *  pMemory)
{
	return pfn_vkAllocateMemory (device, pAllocateInfo, pAllocator, pMemory);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBeginCommandBuffer (VkCommandBuffer   commandBuffer, const  VkCommandBufferBeginInfo *  pBeginInfo)
{
	return pfn_vkBeginCommandBuffer (commandBuffer, pBeginInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindBufferMemory (VkDevice   device, VkBuffer   buffer, VkDeviceMemory   memory, VkDeviceSize   memoryOffset)
{
	return pfn_vkBindBufferMemory (device, buffer, memory, memoryOffset);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindImageMemory (VkDevice   device, VkImage   image, VkDeviceMemory   memory, VkDeviceSize   memoryOffset)
{
	return pfn_vkBindImageMemory (device, image, memory, memoryOffset);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginQuery (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, VkQueryControlFlags   flags)
{
	pfn_vkCmdBeginQuery (commandBuffer, queryPool, query, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderPass (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *  pRenderPassBegin, VkSubpassContents   contents)
{
	pfn_vkCmdBeginRenderPass (commandBuffer, pRenderPassBegin, contents);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorSets (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   firstSet, uint32_t   descriptorSetCount, const  VkDescriptorSet *  pDescriptorSets, uint32_t   dynamicOffsetCount, const  uint32_t *  pDynamicOffsets)
{
	pfn_vkCmdBindDescriptorSets (commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindIndexBuffer (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkIndexType   indexType)
{
	pfn_vkCmdBindIndexBuffer (commandBuffer, buffer, offset, indexType);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindPipeline (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipeline   pipeline)
{
	pfn_vkCmdBindPipeline (commandBuffer, pipelineBindPoint, pipeline);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindVertexBuffers (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets)
{
	pfn_vkCmdBindVertexBuffers (commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBlitImage (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageBlit *  pRegions, VkFilter   filter)
{
	pfn_vkCmdBlitImage (commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdClearAttachments (VkCommandBuffer   commandBuffer, uint32_t   attachmentCount, const  VkClearAttachment *  pAttachments, uint32_t   rectCount, const  VkClearRect *  pRects)
{
	pfn_vkCmdClearAttachments (commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdClearColorImage (VkCommandBuffer   commandBuffer, VkImage   image, VkImageLayout   imageLayout, const  VkClearColorValue *  pColor, uint32_t   rangeCount, const  VkImageSubresourceRange *  pRanges)
{
	pfn_vkCmdClearColorImage (commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdClearDepthStencilImage (VkCommandBuffer   commandBuffer, VkImage   image, VkImageLayout   imageLayout, const  VkClearDepthStencilValue *  pDepthStencil, uint32_t   rangeCount, const  VkImageSubresourceRange *  pRanges)
{
	pfn_vkCmdClearDepthStencilImage (commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBuffer (VkCommandBuffer   commandBuffer, VkBuffer   srcBuffer, VkBuffer   dstBuffer, uint32_t   regionCount, const  VkBufferCopy *  pRegions)
{
	pfn_vkCmdCopyBuffer (commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBufferToImage (VkCommandBuffer   commandBuffer, VkBuffer   srcBuffer, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkBufferImageCopy *  pRegions)
{
	pfn_vkCmdCopyBufferToImage (commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImage (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageCopy *  pRegions)
{
	pfn_vkCmdCopyImage (commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImageToBuffer (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkBuffer   dstBuffer, uint32_t   regionCount, const  VkBufferImageCopy *  pRegions)
{
	pfn_vkCmdCopyImageToBuffer (commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyQueryPoolResults (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   stride, VkQueryResultFlags   flags)
{
	pfn_vkCmdCopyQueryPoolResults (commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatch (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ)
{
	pfn_vkCmdDispatch (commandBuffer, groupCountX, groupCountY, groupCountZ);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchIndirect (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset)
{
	pfn_vkCmdDispatchIndirect (commandBuffer, buffer, offset);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDraw (VkCommandBuffer   commandBuffer, uint32_t   vertexCount, uint32_t   instanceCount, uint32_t   firstVertex, uint32_t   firstInstance)
{
	pfn_vkCmdDraw (commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexed (VkCommandBuffer   commandBuffer, uint32_t   indexCount, uint32_t   instanceCount, uint32_t   firstIndex, int32_t   vertexOffset, uint32_t   firstInstance)
{
	pfn_vkCmdDrawIndexed (commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirect (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndexedIndirect (commandBuffer, buffer, offset, drawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirect (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndirect (commandBuffer, buffer, offset, drawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndQuery (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query)
{
	pfn_vkCmdEndQuery (commandBuffer, queryPool, query);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderPass (VkCommandBuffer   commandBuffer)
{
	pfn_vkCmdEndRenderPass (commandBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdExecuteCommands (VkCommandBuffer   commandBuffer, uint32_t   commandBufferCount, const  VkCommandBuffer *  pCommandBuffers)
{
	pfn_vkCmdExecuteCommands (commandBuffer, commandBufferCount, pCommandBuffers);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdFillBuffer (VkCommandBuffer   commandBuffer, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   size, uint32_t   data)
{
	pfn_vkCmdFillBuffer (commandBuffer, dstBuffer, dstOffset, size, data);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdNextSubpass (VkCommandBuffer   commandBuffer, VkSubpassContents   contents)
{
	pfn_vkCmdNextSubpass (commandBuffer, contents);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPipelineBarrier (VkCommandBuffer   commandBuffer, VkPipelineStageFlags   srcStageMask, VkPipelineStageFlags   dstStageMask, VkDependencyFlags   dependencyFlags, uint32_t   memoryBarrierCount, const  VkMemoryBarrier *  pMemoryBarriers, uint32_t   bufferMemoryBarrierCount, const  VkBufferMemoryBarrier *  pBufferMemoryBarriers, uint32_t   imageMemoryBarrierCount, const  VkImageMemoryBarrier *  pImageMemoryBarriers)
{
	pfn_vkCmdPipelineBarrier (commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushConstants (VkCommandBuffer   commandBuffer, VkPipelineLayout   layout, VkShaderStageFlags   stageFlags, uint32_t   offset, uint32_t   size, const  void *  pValues)
{
	pfn_vkCmdPushConstants (commandBuffer, layout, stageFlags, offset, size, pValues);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetEvent (VkCommandBuffer   commandBuffer, VkEvent   event, VkPipelineStageFlags   stageMask)
{
	pfn_vkCmdResetEvent (commandBuffer, event, stageMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetQueryPool (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount)
{
	pfn_vkCmdResetQueryPool (commandBuffer, queryPool, firstQuery, queryCount);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResolveImage (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageResolve *  pRegions)
{
	pfn_vkCmdResolveImage (commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetBlendConstants (VkCommandBuffer   commandBuffer, const  float   blendConstants [4])
{
	pfn_vkCmdSetBlendConstants (commandBuffer, blendConstants);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBias (VkCommandBuffer   commandBuffer, float   depthBiasConstantFactor, float   depthBiasClamp, float   depthBiasSlopeFactor)
{
	pfn_vkCmdSetDepthBias (commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBounds (VkCommandBuffer   commandBuffer, float   minDepthBounds, float   maxDepthBounds)
{
	pfn_vkCmdSetDepthBounds (commandBuffer, minDepthBounds, maxDepthBounds);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetEvent (VkCommandBuffer   commandBuffer, VkEvent   event, VkPipelineStageFlags   stageMask)
{
	pfn_vkCmdSetEvent (commandBuffer, event, stageMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineWidth (VkCommandBuffer   commandBuffer, float   lineWidth)
{
	pfn_vkCmdSetLineWidth (commandBuffer, lineWidth);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetScissor (VkCommandBuffer   commandBuffer, uint32_t   firstScissor, uint32_t   scissorCount, const  VkRect2D *  pScissors)
{
	pfn_vkCmdSetScissor (commandBuffer, firstScissor, scissorCount, pScissors);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilCompareMask (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   compareMask)
{
	pfn_vkCmdSetStencilCompareMask (commandBuffer, faceMask, compareMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilReference (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   reference)
{
	pfn_vkCmdSetStencilReference (commandBuffer, faceMask, reference);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilWriteMask (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   writeMask)
{
	pfn_vkCmdSetStencilWriteMask (commandBuffer, faceMask, writeMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewport (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewport *  pViewports)
{
	pfn_vkCmdSetViewport (commandBuffer, firstViewport, viewportCount, pViewports);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdUpdateBuffer (VkCommandBuffer   commandBuffer, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   dataSize, const  void *  pData)
{
	pfn_vkCmdUpdateBuffer (commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWaitEvents (VkCommandBuffer   commandBuffer, uint32_t   eventCount, const  VkEvent *  pEvents, VkPipelineStageFlags   srcStageMask, VkPipelineStageFlags   dstStageMask, uint32_t   memoryBarrierCount, const  VkMemoryBarrier *  pMemoryBarriers, uint32_t   bufferMemoryBarrierCount, const  VkBufferMemoryBarrier *  pBufferMemoryBarriers, uint32_t   imageMemoryBarrierCount, const  VkImageMemoryBarrier *  pImageMemoryBarriers)
{
	pfn_vkCmdWaitEvents (commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteTimestamp (VkCommandBuffer   commandBuffer, VkPipelineStageFlagBits   pipelineStage, VkQueryPool   queryPool, uint32_t   query)
{
	pfn_vkCmdWriteTimestamp (commandBuffer, pipelineStage, queryPool, query);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateBuffer (VkDevice   device, const  VkBufferCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBuffer *  pBuffer)
{
	return pfn_vkCreateBuffer (device, pCreateInfo, pAllocator, pBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateBufferView (VkDevice   device, const  VkBufferViewCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBufferView *  pView)
{
	return pfn_vkCreateBufferView (device, pCreateInfo, pAllocator, pView);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCommandPool (VkDevice   device, const  VkCommandPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCommandPool *  pCommandPool)
{
	return pfn_vkCreateCommandPool (device, pCreateInfo, pAllocator, pCommandPool);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateComputePipelines (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkComputePipelineCreateInfo *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines)
{
	return pfn_vkCreateComputePipelines (device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorPool (VkDevice   device, const  VkDescriptorPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorPool *  pDescriptorPool)
{
	return pfn_vkCreateDescriptorPool (device, pCreateInfo, pAllocator, pDescriptorPool);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorSetLayout (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorSetLayout *  pSetLayout)
{
	return pfn_vkCreateDescriptorSetLayout (device, pCreateInfo, pAllocator, pSetLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDevice (VkPhysicalDevice   physicalDevice, const  VkDeviceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDevice *  pDevice)
{
	return pfn_vkCreateDevice (physicalDevice, pCreateInfo, pAllocator, pDevice);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateEvent (VkDevice   device, const  VkEventCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkEvent *  pEvent)
{
	return pfn_vkCreateEvent (device, pCreateInfo, pAllocator, pEvent);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateFence (VkDevice   device, const  VkFenceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence)
{
	return pfn_vkCreateFence (device, pCreateInfo, pAllocator, pFence);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateFramebuffer (VkDevice   device, const  VkFramebufferCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkFramebuffer *  pFramebuffer)
{
	return pfn_vkCreateFramebuffer (device, pCreateInfo, pAllocator, pFramebuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateGraphicsPipelines (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkGraphicsPipelineCreateInfo *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines)
{
	return pfn_vkCreateGraphicsPipelines (device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateImage (VkDevice   device, const  VkImageCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkImage *  pImage)
{
	return pfn_vkCreateImage (device, pCreateInfo, pAllocator, pImage);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateImageView (VkDevice   device, const  VkImageViewCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkImageView *  pView)
{
	return pfn_vkCreateImageView (device, pCreateInfo, pAllocator, pView);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateInstance (const  VkInstanceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkInstance *  pInstance)
{
	return pfn_vkCreateInstance (pCreateInfo, pAllocator, pInstance);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePipelineCache (VkDevice   device, const  VkPipelineCacheCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPipelineCache *  pPipelineCache)
{
	return pfn_vkCreatePipelineCache (device, pCreateInfo, pAllocator, pPipelineCache);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePipelineLayout (VkDevice   device, const  VkPipelineLayoutCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPipelineLayout *  pPipelineLayout)
{
	return pfn_vkCreatePipelineLayout (device, pCreateInfo, pAllocator, pPipelineLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateQueryPool (VkDevice   device, const  VkQueryPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkQueryPool *  pQueryPool)
{
	return pfn_vkCreateQueryPool (device, pCreateInfo, pAllocator, pQueryPool);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRenderPass (VkDevice   device, const  VkRenderPassCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass)
{
	return pfn_vkCreateRenderPass (device, pCreateInfo, pAllocator, pRenderPass);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSampler (VkDevice   device, const  VkSamplerCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSampler *  pSampler)
{
	return pfn_vkCreateSampler (device, pCreateInfo, pAllocator, pSampler);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSemaphore (VkDevice   device, const  VkSemaphoreCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSemaphore *  pSemaphore)
{
	return pfn_vkCreateSemaphore (device, pCreateInfo, pAllocator, pSemaphore);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateShaderModule (VkDevice   device, const  VkShaderModuleCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkShaderModule *  pShaderModule)
{
	return pfn_vkCreateShaderModule (device, pCreateInfo, pAllocator, pShaderModule);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyBuffer (VkDevice   device, VkBuffer   buffer, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyBuffer (device, buffer, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyBufferView (VkDevice   device, VkBufferView   bufferView, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyBufferView (device, bufferView, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCommandPool (VkDevice   device, VkCommandPool   commandPool, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyCommandPool (device, commandPool, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorPool (VkDevice   device, VkDescriptorPool   descriptorPool, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDescriptorPool (device, descriptorPool, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorSetLayout (VkDevice   device, VkDescriptorSetLayout   descriptorSetLayout, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDescriptorSetLayout (device, descriptorSetLayout, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDevice (VkDevice   device, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDevice (device, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyEvent (VkDevice   device, VkEvent   event, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyEvent (device, event, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyFence (VkDevice   device, VkFence   fence, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyFence (device, fence, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyFramebuffer (VkDevice   device, VkFramebuffer   framebuffer, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyFramebuffer (device, framebuffer, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyImage (VkDevice   device, VkImage   image, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyImage (device, image, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyImageView (VkDevice   device, VkImageView   imageView, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyImageView (device, imageView, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyInstance (VkInstance   instance, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyInstance (instance, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPipeline (VkDevice   device, VkPipeline   pipeline, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyPipeline (device, pipeline, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPipelineCache (VkDevice   device, VkPipelineCache   pipelineCache, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyPipelineCache (device, pipelineCache, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPipelineLayout (VkDevice   device, VkPipelineLayout   pipelineLayout, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyPipelineLayout (device, pipelineLayout, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyQueryPool (VkDevice   device, VkQueryPool   queryPool, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyQueryPool (device, queryPool, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyRenderPass (VkDevice   device, VkRenderPass   renderPass, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyRenderPass (device, renderPass, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySampler (VkDevice   device, VkSampler   sampler, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroySampler (device, sampler, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySemaphore (VkDevice   device, VkSemaphore   semaphore, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroySemaphore (device, semaphore, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyShaderModule (VkDevice   device, VkShaderModule   shaderModule, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyShaderModule (device, shaderModule, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDeviceWaitIdle (VkDevice   device)
{
	return pfn_vkDeviceWaitIdle (device);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEndCommandBuffer (VkCommandBuffer   commandBuffer)
{
	return pfn_vkEndCommandBuffer (commandBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateDeviceExtensionProperties (VkPhysicalDevice   physicalDevice, const  char *  pLayerName, uint32_t *  pPropertyCount, VkExtensionProperties *  pProperties)
{
	return pfn_vkEnumerateDeviceExtensionProperties (physicalDevice, pLayerName, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateDeviceLayerProperties (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkLayerProperties *  pProperties)
{
	return pfn_vkEnumerateDeviceLayerProperties (physicalDevice, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateInstanceExtensionProperties (const  char *  pLayerName, uint32_t *  pPropertyCount, VkExtensionProperties *  pProperties)
{
	return pfn_vkEnumerateInstanceExtensionProperties (pLayerName, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateInstanceLayerProperties (uint32_t *  pPropertyCount, VkLayerProperties *  pProperties)
{
	return pfn_vkEnumerateInstanceLayerProperties (pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDevices (VkInstance   instance, uint32_t *  pPhysicalDeviceCount, VkPhysicalDevice *  pPhysicalDevices)
{
	return pfn_vkEnumeratePhysicalDevices (instance, pPhysicalDeviceCount, pPhysicalDevices);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkFlushMappedMemoryRanges (VkDevice   device, uint32_t   memoryRangeCount, const  VkMappedMemoryRange *  pMemoryRanges)
{
	return pfn_vkFlushMappedMemoryRanges (device, memoryRangeCount, pMemoryRanges);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkFreeCommandBuffers (VkDevice   device, VkCommandPool   commandPool, uint32_t   commandBufferCount, const  VkCommandBuffer *  pCommandBuffers)
{
	pfn_vkFreeCommandBuffers (device, commandPool, commandBufferCount, pCommandBuffers);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkFreeDescriptorSets (VkDevice   device, VkDescriptorPool   descriptorPool, uint32_t   descriptorSetCount, const  VkDescriptorSet *  pDescriptorSets)
{
	return pfn_vkFreeDescriptorSets (device, descriptorPool, descriptorSetCount, pDescriptorSets);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkFreeMemory (VkDevice   device, VkDeviceMemory   memory, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkFreeMemory (device, memory, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetBufferMemoryRequirements (VkDevice   device, VkBuffer   buffer, VkMemoryRequirements *  pMemoryRequirements)
{
	pfn_vkGetBufferMemoryRequirements (device, buffer, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceMemoryCommitment (VkDevice   device, VkDeviceMemory   memory, VkDeviceSize *  pCommittedMemoryInBytes)
{
	pfn_vkGetDeviceMemoryCommitment (device, memory, pCommittedMemoryInBytes);
}
extern "C"
VKFWAPI VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
vkGetDeviceProcAddr (VkDevice   device, const  char *  pName)
{
	return pfn_vkGetDeviceProcAddr (device, pName);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceQueue (VkDevice   device, uint32_t   queueFamilyIndex, uint32_t   queueIndex, VkQueue *  pQueue)
{
	pfn_vkGetDeviceQueue (device, queueFamilyIndex, queueIndex, pQueue);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetEventStatus (VkDevice   device, VkEvent   event)
{
	return pfn_vkGetEventStatus (device, event);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFenceStatus (VkDevice   device, VkFence   fence)
{
	return pfn_vkGetFenceStatus (device, fence);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageMemoryRequirements (VkDevice   device, VkImage   image, VkMemoryRequirements *  pMemoryRequirements)
{
	pfn_vkGetImageMemoryRequirements (device, image, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSparseMemoryRequirements (VkDevice   device, VkImage   image, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *  pSparseMemoryRequirements)
{
	pfn_vkGetImageSparseMemoryRequirements (device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSubresourceLayout (VkDevice   device, VkImage   image, const  VkImageSubresource *  pSubresource, VkSubresourceLayout *  pLayout)
{
	pfn_vkGetImageSubresourceLayout (device, image, pSubresource, pLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
vkGetInstanceProcAddr (VkInstance   instance, const  char *  pName)
{
	return pfn_vkGetInstanceProcAddr (instance, pName);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFeatures (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures *  pFeatures)
{
	pfn_vkGetPhysicalDeviceFeatures (physicalDevice, pFeatures);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFormatProperties (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties *  pFormatProperties)
{
	pfn_vkGetPhysicalDeviceFormatProperties (physicalDevice, format, pFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceImageFormatProperties (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkImageTiling   tiling, VkImageUsageFlags   usage, VkImageCreateFlags   flags, VkImageFormatProperties *  pImageFormatProperties)
{
	return pfn_vkGetPhysicalDeviceImageFormatProperties (physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMemoryProperties (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties *  pMemoryProperties)
{
	pfn_vkGetPhysicalDeviceMemoryProperties (physicalDevice, pMemoryProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceProperties (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties *  pProperties)
{
	pfn_vkGetPhysicalDeviceProperties (physicalDevice, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyProperties (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties *  pQueueFamilyProperties)
{
	pfn_vkGetPhysicalDeviceQueueFamilyProperties (physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceSparseImageFormatProperties (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkSampleCountFlagBits   samples, VkImageUsageFlags   usage, VkImageTiling   tiling, uint32_t *  pPropertyCount, VkSparseImageFormatProperties *  pProperties)
{
	pfn_vkGetPhysicalDeviceSparseImageFormatProperties (physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineCacheData (VkDevice   device, VkPipelineCache   pipelineCache, size_t *  pDataSize, void *  pData)
{
	return pfn_vkGetPipelineCacheData (device, pipelineCache, pDataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetQueryPoolResults (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount, size_t   dataSize, void *  pData, VkDeviceSize   stride, VkQueryResultFlags   flags)
{
	return pfn_vkGetQueryPoolResults (device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetRenderAreaGranularity (VkDevice   device, VkRenderPass   renderPass, VkExtent2D *  pGranularity)
{
	pfn_vkGetRenderAreaGranularity (device, renderPass, pGranularity);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkInvalidateMappedMemoryRanges (VkDevice   device, uint32_t   memoryRangeCount, const  VkMappedMemoryRange *  pMemoryRanges)
{
	return pfn_vkInvalidateMappedMemoryRanges (device, memoryRangeCount, pMemoryRanges);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMapMemory (VkDevice   device, VkDeviceMemory   memory, VkDeviceSize   offset, VkDeviceSize   size, VkMemoryMapFlags   flags, void **  ppData)
{
	return pfn_vkMapMemory (device, memory, offset, size, flags, ppData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMergePipelineCaches (VkDevice   device, VkPipelineCache   dstCache, uint32_t   srcCacheCount, const  VkPipelineCache *  pSrcCaches)
{
	return pfn_vkMergePipelineCaches (device, dstCache, srcCacheCount, pSrcCaches);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueBindSparse (VkQueue   queue, uint32_t   bindInfoCount, const  VkBindSparseInfo *  pBindInfo, VkFence   fence)
{
	return pfn_vkQueueBindSparse (queue, bindInfoCount, pBindInfo, fence);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSubmit (VkQueue   queue, uint32_t   submitCount, const  VkSubmitInfo *  pSubmits, VkFence   fence)
{
	return pfn_vkQueueSubmit (queue, submitCount, pSubmits, fence);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueWaitIdle (VkQueue   queue)
{
	return pfn_vkQueueWaitIdle (queue);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetCommandBuffer (VkCommandBuffer   commandBuffer, VkCommandBufferResetFlags   flags)
{
	return pfn_vkResetCommandBuffer (commandBuffer, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetCommandPool (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolResetFlags   flags)
{
	return pfn_vkResetCommandPool (device, commandPool, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetDescriptorPool (VkDevice   device, VkDescriptorPool   descriptorPool, VkDescriptorPoolResetFlags   flags)
{
	return pfn_vkResetDescriptorPool (device, descriptorPool, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetEvent (VkDevice   device, VkEvent   event)
{
	return pfn_vkResetEvent (device, event);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetFences (VkDevice   device, uint32_t   fenceCount, const  VkFence *  pFences)
{
	return pfn_vkResetFences (device, fenceCount, pFences);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetEvent (VkDevice   device, VkEvent   event)
{
	return pfn_vkSetEvent (device, event);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUnmapMemory (VkDevice   device, VkDeviceMemory   memory)
{
	pfn_vkUnmapMemory (device, memory);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUpdateDescriptorSets (VkDevice   device, uint32_t   descriptorWriteCount, const  VkWriteDescriptorSet *  pDescriptorWrites, uint32_t   descriptorCopyCount, const  VkCopyDescriptorSet *  pDescriptorCopies)
{
	pfn_vkUpdateDescriptorSets (device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitForFences (VkDevice   device, uint32_t   fenceCount, const  VkFence *  pFences, VkBool32   waitAll, uint64_t   timeout)
{
	return pfn_vkWaitForFences (device, fenceCount, pFences, waitAll, timeout);
}
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindBufferMemory2 (VkDevice   device, uint32_t   bindInfoCount, const  VkBindBufferMemoryInfo *  pBindInfos)
{
	return pfn_vkBindBufferMemory2 (device, bindInfoCount, pBindInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindImageMemory2 (VkDevice   device, uint32_t   bindInfoCount, const  VkBindImageMemoryInfo *  pBindInfos)
{
	return pfn_vkBindImageMemory2 (device, bindInfoCount, pBindInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchBase (VkCommandBuffer   commandBuffer, uint32_t   baseGroupX, uint32_t   baseGroupY, uint32_t   baseGroupZ, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ)
{
	pfn_vkCmdDispatchBase (commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDeviceMask (VkCommandBuffer   commandBuffer, uint32_t   deviceMask)
{
	pfn_vkCmdSetDeviceMask (commandBuffer, deviceMask);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorUpdateTemplate (VkDevice   device, const  VkDescriptorUpdateTemplateCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorUpdateTemplate *  pDescriptorUpdateTemplate)
{
	return pfn_vkCreateDescriptorUpdateTemplate (device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSamplerYcbcrConversion (VkDevice   device, const  VkSamplerYcbcrConversionCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSamplerYcbcrConversion *  pYcbcrConversion)
{
	return pfn_vkCreateSamplerYcbcrConversion (device, pCreateInfo, pAllocator, pYcbcrConversion);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorUpdateTemplate (VkDevice   device, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDescriptorUpdateTemplate (device, descriptorUpdateTemplate, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySamplerYcbcrConversion (VkDevice   device, VkSamplerYcbcrConversion   ycbcrConversion, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroySamplerYcbcrConversion (device, ycbcrConversion, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateInstanceVersion (uint32_t *  pApiVersion)
{
	return pfn_vkEnumerateInstanceVersion (pApiVersion);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDeviceGroups (VkInstance   instance, uint32_t *  pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *  pPhysicalDeviceGroupProperties)
{
	return pfn_vkEnumeratePhysicalDeviceGroups (instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetBufferMemoryRequirements2 (VkDevice   device, const  VkBufferMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetBufferMemoryRequirements2 (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutSupport (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, VkDescriptorSetLayoutSupport *  pSupport)
{
	pfn_vkGetDescriptorSetLayoutSupport (device, pCreateInfo, pSupport);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceGroupPeerMemoryFeatures (VkDevice   device, uint32_t   heapIndex, uint32_t   localDeviceIndex, uint32_t   remoteDeviceIndex, VkPeerMemoryFeatureFlags *  pPeerMemoryFeatures)
{
	pfn_vkGetDeviceGroupPeerMemoryFeatures (device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceQueue2 (VkDevice   device, const  VkDeviceQueueInfo2 *  pQueueInfo, VkQueue *  pQueue)
{
	pfn_vkGetDeviceQueue2 (device, pQueueInfo, pQueue);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageMemoryRequirements2 (VkDevice   device, const  VkImageMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetImageMemoryRequirements2 (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSparseMemoryRequirements2 (VkDevice   device, const  VkImageSparseMemoryRequirementsInfo2 *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements)
{
	pfn_vkGetImageSparseMemoryRequirements2 (device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalBufferProperties (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalBufferInfo *  pExternalBufferInfo, VkExternalBufferProperties *  pExternalBufferProperties)
{
	pfn_vkGetPhysicalDeviceExternalBufferProperties (physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalFenceProperties (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalFenceInfo *  pExternalFenceInfo, VkExternalFenceProperties *  pExternalFenceProperties)
{
	pfn_vkGetPhysicalDeviceExternalFenceProperties (physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalSemaphoreProperties (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalSemaphoreInfo *  pExternalSemaphoreInfo, VkExternalSemaphoreProperties *  pExternalSemaphoreProperties)
{
	pfn_vkGetPhysicalDeviceExternalSemaphoreProperties (physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFeatures2 (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures2 *  pFeatures)
{
	pfn_vkGetPhysicalDeviceFeatures2 (physicalDevice, pFeatures);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFormatProperties2 (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties2 *  pFormatProperties)
{
	pfn_vkGetPhysicalDeviceFormatProperties2 (physicalDevice, format, pFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceImageFormatProperties2 (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceImageFormatInfo2 *  pImageFormatInfo, VkImageFormatProperties2 *  pImageFormatProperties)
{
	return pfn_vkGetPhysicalDeviceImageFormatProperties2 (physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMemoryProperties2 (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties2 *  pMemoryProperties)
{
	pfn_vkGetPhysicalDeviceMemoryProperties2 (physicalDevice, pMemoryProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceProperties2 (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties2 *  pProperties)
{
	pfn_vkGetPhysicalDeviceProperties2 (physicalDevice, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyProperties2 (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *  pQueueFamilyProperties)
{
	pfn_vkGetPhysicalDeviceQueueFamilyProperties2 (physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceSparseImageFormatProperties2 (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSparseImageFormatInfo2 *  pFormatInfo, uint32_t *  pPropertyCount, VkSparseImageFormatProperties2 *  pProperties)
{
	pfn_vkGetPhysicalDeviceSparseImageFormatProperties2 (physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkTrimCommandPool (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolTrimFlags   flags)
{
	pfn_vkTrimCommandPool (device, commandPool, flags);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUpdateDescriptorSetWithTemplate (VkDevice   device, VkDescriptorSet   descriptorSet, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  void *  pData)
{
	pfn_vkUpdateDescriptorSetWithTemplate (device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderPass2 (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *       pRenderPassBegin, const  VkSubpassBeginInfo *       pSubpassBeginInfo)
{
	pfn_vkCmdBeginRenderPass2 (commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirectCount (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndexedIndirectCount (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectCount (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndirectCount (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderPass2 (VkCommandBuffer   commandBuffer, const  VkSubpassEndInfo *         pSubpassEndInfo)
{
	pfn_vkCmdEndRenderPass2 (commandBuffer, pSubpassEndInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdNextSubpass2 (VkCommandBuffer   commandBuffer, const  VkSubpassBeginInfo *       pSubpassBeginInfo, const  VkSubpassEndInfo *         pSubpassEndInfo)
{
	pfn_vkCmdNextSubpass2 (commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRenderPass2 (VkDevice   device, const  VkRenderPassCreateInfo2 *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass)
{
	return pfn_vkCreateRenderPass2 (device, pCreateInfo, pAllocator, pRenderPass);
}
extern "C"
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetBufferDeviceAddress (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo)
{
	return pfn_vkGetBufferDeviceAddress (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetBufferOpaqueCaptureAddress (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo)
{
	return pfn_vkGetBufferOpaqueCaptureAddress (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetDeviceMemoryOpaqueCaptureAddress (VkDevice   device, const  VkDeviceMemoryOpaqueCaptureAddressInfo *  pInfo)
{
	return pfn_vkGetDeviceMemoryOpaqueCaptureAddress (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreCounterValue (VkDevice   device, VkSemaphore   semaphore, uint64_t *  pValue)
{
	return pfn_vkGetSemaphoreCounterValue (device, semaphore, pValue);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkResetQueryPool (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount)
{
	pfn_vkResetQueryPool (device, queryPool, firstQuery, queryCount);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSignalSemaphore (VkDevice   device, const  VkSemaphoreSignalInfo *  pSignalInfo)
{
	return pfn_vkSignalSemaphore (device, pSignalInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitSemaphores (VkDevice   device, const  VkSemaphoreWaitInfo *  pWaitInfo, uint64_t   timeout)
{
	return pfn_vkWaitSemaphores (device, pWaitInfo, timeout);
}
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRendering (VkCommandBuffer                     commandBuffer, const  VkRenderingInfo *                               pRenderingInfo)
{
	pfn_vkCmdBeginRendering (commandBuffer, pRenderingInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindVertexBuffers2 (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes, const  VkDeviceSize *  pStrides)
{
	pfn_vkCmdBindVertexBuffers2 (commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBlitImage2 (VkCommandBuffer   commandBuffer, const  VkBlitImageInfo2 *  pBlitImageInfo)
{
	pfn_vkCmdBlitImage2 (commandBuffer, pBlitImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBuffer2 (VkCommandBuffer   commandBuffer, const  VkCopyBufferInfo2 *  pCopyBufferInfo)
{
	pfn_vkCmdCopyBuffer2 (commandBuffer, pCopyBufferInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBufferToImage2 (VkCommandBuffer   commandBuffer, const  VkCopyBufferToImageInfo2 *  pCopyBufferToImageInfo)
{
	pfn_vkCmdCopyBufferToImage2 (commandBuffer, pCopyBufferToImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImage2 (VkCommandBuffer   commandBuffer, const  VkCopyImageInfo2 *  pCopyImageInfo)
{
	pfn_vkCmdCopyImage2 (commandBuffer, pCopyImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImageToBuffer2 (VkCommandBuffer   commandBuffer, const  VkCopyImageToBufferInfo2 *  pCopyImageToBufferInfo)
{
	pfn_vkCmdCopyImageToBuffer2 (commandBuffer, pCopyImageToBufferInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRendering (VkCommandBuffer                     commandBuffer)
{
	pfn_vkCmdEndRendering (commandBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPipelineBarrier2 (VkCommandBuffer                     commandBuffer, const  VkDependencyInfo *                              pDependencyInfo)
{
	pfn_vkCmdPipelineBarrier2 (commandBuffer, pDependencyInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetEvent2 (VkCommandBuffer                     commandBuffer, VkEvent                                               event, VkPipelineStageFlags2                 stageMask)
{
	pfn_vkCmdResetEvent2 (commandBuffer, event, stageMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResolveImage2 (VkCommandBuffer   commandBuffer, const  VkResolveImageInfo2 *  pResolveImageInfo)
{
	pfn_vkCmdResolveImage2 (commandBuffer, pResolveImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCullMode (VkCommandBuffer   commandBuffer, VkCullModeFlags   cullMode)
{
	pfn_vkCmdSetCullMode (commandBuffer, cullMode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBiasEnable (VkCommandBuffer   commandBuffer, VkBool32   depthBiasEnable)
{
	pfn_vkCmdSetDepthBiasEnable (commandBuffer, depthBiasEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBoundsTestEnable (VkCommandBuffer   commandBuffer, VkBool32   depthBoundsTestEnable)
{
	pfn_vkCmdSetDepthBoundsTestEnable (commandBuffer, depthBoundsTestEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthCompareOp (VkCommandBuffer   commandBuffer, VkCompareOp   depthCompareOp)
{
	pfn_vkCmdSetDepthCompareOp (commandBuffer, depthCompareOp);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthTestEnable (VkCommandBuffer   commandBuffer, VkBool32   depthTestEnable)
{
	pfn_vkCmdSetDepthTestEnable (commandBuffer, depthTestEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthWriteEnable (VkCommandBuffer   commandBuffer, VkBool32   depthWriteEnable)
{
	pfn_vkCmdSetDepthWriteEnable (commandBuffer, depthWriteEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetEvent2 (VkCommandBuffer                     commandBuffer, VkEvent                                               event, const  VkDependencyInfo *                              pDependencyInfo)
{
	pfn_vkCmdSetEvent2 (commandBuffer, event, pDependencyInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFrontFace (VkCommandBuffer   commandBuffer, VkFrontFace   frontFace)
{
	pfn_vkCmdSetFrontFace (commandBuffer, frontFace);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveRestartEnable (VkCommandBuffer   commandBuffer, VkBool32   primitiveRestartEnable)
{
	pfn_vkCmdSetPrimitiveRestartEnable (commandBuffer, primitiveRestartEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveTopology (VkCommandBuffer   commandBuffer, VkPrimitiveTopology   primitiveTopology)
{
	pfn_vkCmdSetPrimitiveTopology (commandBuffer, primitiveTopology);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizerDiscardEnable (VkCommandBuffer   commandBuffer, VkBool32   rasterizerDiscardEnable)
{
	pfn_vkCmdSetRasterizerDiscardEnable (commandBuffer, rasterizerDiscardEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetScissorWithCount (VkCommandBuffer   commandBuffer, uint32_t   scissorCount, const  VkRect2D *  pScissors)
{
	pfn_vkCmdSetScissorWithCount (commandBuffer, scissorCount, pScissors);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilOp (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, VkStencilOp   failOp, VkStencilOp   passOp, VkStencilOp   depthFailOp, VkCompareOp   compareOp)
{
	pfn_vkCmdSetStencilOp (commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilTestEnable (VkCommandBuffer   commandBuffer, VkBool32   stencilTestEnable)
{
	pfn_vkCmdSetStencilTestEnable (commandBuffer, stencilTestEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWithCount (VkCommandBuffer   commandBuffer, uint32_t   viewportCount, const  VkViewport *  pViewports)
{
	pfn_vkCmdSetViewportWithCount (commandBuffer, viewportCount, pViewports);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWaitEvents2 (VkCommandBuffer                     commandBuffer, uint32_t                                              eventCount, const  VkEvent *                      pEvents, const  VkDependencyInfo *             pDependencyInfos)
{
	pfn_vkCmdWaitEvents2 (commandBuffer, eventCount, pEvents, pDependencyInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteTimestamp2 (VkCommandBuffer                     commandBuffer, VkPipelineStageFlags2                 stage, VkQueryPool                                           queryPool, uint32_t                                              query)
{
	pfn_vkCmdWriteTimestamp2 (commandBuffer, stage, queryPool, query);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePrivateDataSlot (VkDevice   device, const  VkPrivateDataSlotCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPrivateDataSlot *  pPrivateDataSlot)
{
	return pfn_vkCreatePrivateDataSlot (device, pCreateInfo, pAllocator, pPrivateDataSlot);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPrivateDataSlot (VkDevice   device, VkPrivateDataSlot   privateDataSlot, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyPrivateDataSlot (device, privateDataSlot, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceBufferMemoryRequirements (VkDevice   device, const  VkDeviceBufferMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetDeviceBufferMemoryRequirements (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageMemoryRequirements (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetDeviceImageMemoryRequirements (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageSparseMemoryRequirements (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements)
{
	pfn_vkGetDeviceImageSparseMemoryRequirements (device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceToolProperties (VkPhysicalDevice   physicalDevice, uint32_t *  pToolCount, VkPhysicalDeviceToolProperties *  pToolProperties)
{
	return pfn_vkGetPhysicalDeviceToolProperties (physicalDevice, pToolCount, pToolProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPrivateData (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t *  pData)
{
	pfn_vkGetPrivateData (device, objectType, objectHandle, privateDataSlot, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSubmit2 (VkQueue                             queue, uint32_t                              submitCount, const  VkSubmitInfo2 *               pSubmits, VkFence             fence)
{
	return pfn_vkQueueSubmit2 (queue, submitCount, pSubmits, fence);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetPrivateData (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t   data)
{
	return pfn_vkSetPrivateData (device, objectType, objectHandle, privateDataSlot, data);
}
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_AMDX_shader_enqueue)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchGraphAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch, const  VkDispatchGraphCountInfoAMDX *               pCountInfo)
{
	pfn_vkCmdDispatchGraphAMDX (commandBuffer, scratch, pCountInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchGraphIndirectAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch, const  VkDispatchGraphCountInfoAMDX *               pCountInfo)
{
	pfn_vkCmdDispatchGraphIndirectAMDX (commandBuffer, scratch, pCountInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchGraphIndirectCountAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch, VkDeviceAddress                                   countInfo)
{
	pfn_vkCmdDispatchGraphIndirectCountAMDX (commandBuffer, scratch, countInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdInitializeGraphScratchMemoryAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch)
{
	pfn_vkCmdInitializeGraphScratchMemoryAMDX (commandBuffer, scratch);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateExecutionGraphPipelinesAMDX (VkDevice                                          device, VkPipelineCache                   pipelineCache, uint32_t                                          createInfoCount, const  VkExecutionGraphPipelineCreateInfoAMDX *  pCreateInfos, const  VkAllocationCallbacks *     pAllocator, VkPipeline *                pPipelines)
{
	return pfn_vkCreateExecutionGraphPipelinesAMDX (device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetExecutionGraphPipelineNodeIndexAMDX (VkDevice                                          device, VkPipeline                                        executionGraph, const  VkPipelineShaderStageNodeCreateInfoAMDX *    pNodeInfo, uint32_t *                                        pNodeIndex)
{
	return pfn_vkGetExecutionGraphPipelineNodeIndexAMDX (device, executionGraph, pNodeInfo, pNodeIndex);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetExecutionGraphPipelineScratchSizeAMDX (VkDevice                                          device, VkPipeline                                        executionGraph, VkExecutionGraphPipelineScratchSizeAMDX *          pSizeInfo)
{
	return pfn_vkGetExecutionGraphPipelineScratchSizeAMDX (device, executionGraph, pSizeInfo);
}
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_AMD_buffer_marker)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteBufferMarkerAMD (VkCommandBuffer   commandBuffer, VkPipelineStageFlagBits   pipelineStage, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, uint32_t   marker)
{
	pfn_vkCmdWriteBufferMarkerAMD (commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
}
#endif /* defined(VK_AMD_buffer_marker) */
#if defined(VK_AMD_display_native_hdr)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetLocalDimmingAMD (VkDevice   device, VkSwapchainKHR   swapChain, VkBool32   localDimmingEnable)
{
	pfn_vkSetLocalDimmingAMD (device, swapChain, localDimmingEnable);
}
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_AMD_draw_indirect_count)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirectCountAMD (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndexedIndirectCountAMD (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectCountAMD (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndirectCountAMD (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif /* defined(VK_AMD_draw_indirect_count) */
#if defined(VK_AMD_shader_info)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetShaderInfoAMD (VkDevice   device, VkPipeline   pipeline, VkShaderStageFlagBits   shaderStage, VkShaderInfoTypeAMD   infoType, size_t *  pInfoSize, void *  pInfo)
{
	return pfn_vkGetShaderInfoAMD (device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
}
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetAndroidHardwareBufferPropertiesANDROID (VkDevice   device, const struct  AHardwareBuffer *  buffer, VkAndroidHardwareBufferPropertiesANDROID *  pProperties)
{
	return pfn_vkGetAndroidHardwareBufferPropertiesANDROID (device, buffer, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryAndroidHardwareBufferANDROID (VkDevice   device, const  VkMemoryGetAndroidHardwareBufferInfoANDROID *  pInfo, struct  AHardwareBuffer **  pBuffer)
{
	return pfn_vkGetMemoryAndroidHardwareBufferANDROID (device, pInfo, pBuffer);
}
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_EXT_acquire_drm_display)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireDrmDisplayEXT (VkPhysicalDevice   physicalDevice, int32_t   drmFd, VkDisplayKHR   display)
{
	return pfn_vkAcquireDrmDisplayEXT (physicalDevice, drmFd, display);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDrmDisplayEXT (VkPhysicalDevice   physicalDevice, int32_t   drmFd, uint32_t   connectorId, VkDisplayKHR *  display)
{
	return pfn_vkGetDrmDisplayEXT (physicalDevice, drmFd, connectorId, display);
}
#endif /* defined(VK_EXT_acquire_drm_display) */
#if defined(VK_EXT_acquire_xlib_display)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireXlibDisplayEXT (VkPhysicalDevice   physicalDevice, Display *  dpy, VkDisplayKHR   display)
{
	return pfn_vkAcquireXlibDisplayEXT (physicalDevice, dpy, display);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRandROutputDisplayEXT (VkPhysicalDevice   physicalDevice, Display *  dpy, RROutput   rrOutput, VkDisplayKHR *  pDisplay)
{
	return pfn_vkGetRandROutputDisplayEXT (physicalDevice, dpy, rrOutput, pDisplay);
}
#endif /* defined(VK_EXT_acquire_xlib_display) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetAttachmentFeedbackLoopEnableEXT (VkCommandBuffer   commandBuffer, VkImageAspectFlags   aspectMask)
{
	pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT (commandBuffer, aspectMask);
}
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_EXT_buffer_device_address)
extern "C"
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetBufferDeviceAddressEXT (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo)
{
	return pfn_vkGetBufferDeviceAddressEXT (device, pInfo);
}
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_EXT_calibrated_timestamps)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetCalibratedTimestampsEXT (VkDevice   device, uint32_t   timestampCount, const  VkCalibratedTimestampInfoKHR *  pTimestampInfos, uint64_t *  pTimestamps, uint64_t *  pMaxDeviation)
{
	return pfn_vkGetCalibratedTimestampsEXT (device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (VkPhysicalDevice   physicalDevice, uint32_t *  pTimeDomainCount, VkTimeDomainKHR *  pTimeDomains)
{
	return pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (physicalDevice, pTimeDomainCount, pTimeDomains);
}
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_EXT_color_write_enable)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorWriteEnableEXT (VkCommandBuffer         commandBuffer, uint32_t                                  attachmentCount, const  VkBool32 *    pColorWriteEnables)
{
	pfn_vkCmdSetColorWriteEnableEXT (commandBuffer, attachmentCount, pColorWriteEnables);
}
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_EXT_conditional_rendering)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginConditionalRenderingEXT (VkCommandBuffer   commandBuffer, const  VkConditionalRenderingBeginInfoEXT *  pConditionalRenderingBegin)
{
	pfn_vkCmdBeginConditionalRenderingEXT (commandBuffer, pConditionalRenderingBegin);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndConditionalRenderingEXT (VkCommandBuffer   commandBuffer)
{
	pfn_vkCmdEndConditionalRenderingEXT (commandBuffer);
}
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_EXT_debug_marker)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDebugMarkerBeginEXT (VkCommandBuffer   commandBuffer, const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo)
{
	pfn_vkCmdDebugMarkerBeginEXT (commandBuffer, pMarkerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDebugMarkerEndEXT (VkCommandBuffer   commandBuffer)
{
	pfn_vkCmdDebugMarkerEndEXT (commandBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDebugMarkerInsertEXT (VkCommandBuffer   commandBuffer, const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo)
{
	pfn_vkCmdDebugMarkerInsertEXT (commandBuffer, pMarkerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDebugMarkerSetObjectNameEXT (VkDevice   device, const  VkDebugMarkerObjectNameInfoEXT *  pNameInfo)
{
	return pfn_vkDebugMarkerSetObjectNameEXT (device, pNameInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDebugMarkerSetObjectTagEXT (VkDevice   device, const  VkDebugMarkerObjectTagInfoEXT *  pTagInfo)
{
	return pfn_vkDebugMarkerSetObjectTagEXT (device, pTagInfo);
}
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_EXT_debug_report)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDebugReportCallbackEXT (VkInstance   instance, const  VkDebugReportCallbackCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDebugReportCallbackEXT *  pCallback)
{
	return pfn_vkCreateDebugReportCallbackEXT (instance, pCreateInfo, pAllocator, pCallback);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDebugReportMessageEXT (VkInstance   instance, VkDebugReportFlagsEXT   flags, VkDebugReportObjectTypeEXT   objectType, uint64_t   object, size_t   location, int32_t   messageCode, const  char *  pLayerPrefix, const  char *  pMessage)
{
	pfn_vkDebugReportMessageEXT (instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDebugReportCallbackEXT (VkInstance   instance, VkDebugReportCallbackEXT   callback, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDebugReportCallbackEXT (instance, callback, pAllocator);
}
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginDebugUtilsLabelEXT (VkCommandBuffer   commandBuffer, const  VkDebugUtilsLabelEXT *  pLabelInfo)
{
	pfn_vkCmdBeginDebugUtilsLabelEXT (commandBuffer, pLabelInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndDebugUtilsLabelEXT (VkCommandBuffer   commandBuffer)
{
	pfn_vkCmdEndDebugUtilsLabelEXT (commandBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdInsertDebugUtilsLabelEXT (VkCommandBuffer   commandBuffer, const  VkDebugUtilsLabelEXT *  pLabelInfo)
{
	pfn_vkCmdInsertDebugUtilsLabelEXT (commandBuffer, pLabelInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDebugUtilsMessengerEXT (VkInstance   instance, const  VkDebugUtilsMessengerCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDebugUtilsMessengerEXT *  pMessenger)
{
	return pfn_vkCreateDebugUtilsMessengerEXT (instance, pCreateInfo, pAllocator, pMessenger);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDebugUtilsMessengerEXT (VkInstance   instance, VkDebugUtilsMessengerEXT   messenger, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDebugUtilsMessengerEXT (instance, messenger, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueBeginDebugUtilsLabelEXT (VkQueue   queue, const  VkDebugUtilsLabelEXT *  pLabelInfo)
{
	pfn_vkQueueBeginDebugUtilsLabelEXT (queue, pLabelInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueEndDebugUtilsLabelEXT (VkQueue   queue)
{
	pfn_vkQueueEndDebugUtilsLabelEXT (queue);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueInsertDebugUtilsLabelEXT (VkQueue   queue, const  VkDebugUtilsLabelEXT *  pLabelInfo)
{
	pfn_vkQueueInsertDebugUtilsLabelEXT (queue, pLabelInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetDebugUtilsObjectNameEXT (VkDevice   device, const  VkDebugUtilsObjectNameInfoEXT *  pNameInfo)
{
	return pfn_vkSetDebugUtilsObjectNameEXT (device, pNameInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetDebugUtilsObjectTagEXT (VkDevice   device, const  VkDebugUtilsObjectTagInfoEXT *  pTagInfo)
{
	return pfn_vkSetDebugUtilsObjectTagEXT (device, pTagInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSubmitDebugUtilsMessageEXT (VkInstance   instance, VkDebugUtilsMessageSeverityFlagBitsEXT   messageSeverity, VkDebugUtilsMessageTypeFlagsEXT   messageTypes, const  VkDebugUtilsMessengerCallbackDataEXT *  pCallbackData)
{
	pfn_vkSubmitDebugUtilsMessageEXT (instance, messageSeverity, messageTypes, pCallbackData);
}
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_depth_bias_control)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBias2EXT (VkCommandBuffer   commandBuffer, const  VkDepthBiasInfoEXT *          pDepthBiasInfo)
{
	pfn_vkCmdSetDepthBias2EXT (commandBuffer, pDepthBiasInfo);
}
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_descriptor_buffer)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorBufferEmbeddedSamplersEXT (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   set)
{
	pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT (commandBuffer, pipelineBindPoint, layout, set);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorBuffersEXT (VkCommandBuffer   commandBuffer, uint32_t   bufferCount, const  VkDescriptorBufferBindingInfoEXT *  pBindingInfos)
{
	pfn_vkCmdBindDescriptorBuffersEXT (commandBuffer, bufferCount, pBindingInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDescriptorBufferOffsetsEXT (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   firstSet, uint32_t   setCount, const  uint32_t *  pBufferIndices, const  VkDeviceSize *  pOffsets)
{
	pfn_vkCmdSetDescriptorBufferOffsetsEXT (commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetBufferOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkBufferCaptureDescriptorDataInfoEXT *  pInfo, void *  pData)
{
	return pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT (device, pInfo, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorEXT (VkDevice   device, const  VkDescriptorGetInfoEXT *  pDescriptorInfo, size_t   dataSize, void *  pDescriptor)
{
	pfn_vkGetDescriptorEXT (device, pDescriptorInfo, dataSize, pDescriptor);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutBindingOffsetEXT (VkDevice   device, VkDescriptorSetLayout   layout, uint32_t   binding, VkDeviceSize *  pOffset)
{
	pfn_vkGetDescriptorSetLayoutBindingOffsetEXT (device, layout, binding, pOffset);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutSizeEXT (VkDevice   device, VkDescriptorSetLayout   layout, VkDeviceSize *  pLayoutSizeInBytes)
{
	pfn_vkGetDescriptorSetLayoutSizeEXT (device, layout, pLayoutSizeInBytes);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkImageCaptureDescriptorDataInfoEXT *  pInfo, void *  pData)
{
	return pfn_vkGetImageOpaqueCaptureDescriptorDataEXT (device, pInfo, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageViewOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkImageViewCaptureDescriptorDataInfoEXT *  pInfo, void *  pData)
{
	return pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT (device, pInfo, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSamplerOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkSamplerCaptureDescriptorDataInfoEXT *  pInfo, void *  pData)
{
	return pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT (device, pInfo, pData);
}
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkAccelerationStructureCaptureDescriptorDataInfoEXT *  pInfo, void *  pData)
{
	return pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT (device, pInfo, pData);
}
#endif /* defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)) */
#if defined(VK_EXT_device_fault)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceFaultInfoEXT (VkDevice   device, VkDeviceFaultCountsEXT *  pFaultCounts, VkDeviceFaultInfoEXT *  pFaultInfo)
{
	return pfn_vkGetDeviceFaultInfoEXT (device, pFaultCounts, pFaultInfo);
}
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_EXT_direct_mode_display)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleaseDisplayEXT (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display)
{
	return pfn_vkReleaseDisplayEXT (physicalDevice, display);
}
#endif /* defined(VK_EXT_direct_mode_display) */
#if defined(VK_EXT_directfb_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDirectFBSurfaceEXT (VkInstance   instance, const  VkDirectFBSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateDirectFBSurfaceEXT (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceDirectFBPresentationSupportEXT (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, IDirectFB *  dfb)
{
	return pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT (physicalDevice, queueFamilyIndex, dfb);
}
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_EXT_discard_rectangles)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDiscardRectangleEXT (VkCommandBuffer   commandBuffer, uint32_t   firstDiscardRectangle, uint32_t   discardRectangleCount, const  VkRect2D *  pDiscardRectangles)
{
	pfn_vkCmdSetDiscardRectangleEXT (commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
}
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDiscardRectangleEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   discardRectangleEnable)
{
	pfn_vkCmdSetDiscardRectangleEnableEXT (commandBuffer, discardRectangleEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDiscardRectangleModeEXT (VkCommandBuffer   commandBuffer, VkDiscardRectangleModeEXT   discardRectangleMode)
{
	pfn_vkCmdSetDiscardRectangleModeEXT (commandBuffer, discardRectangleMode);
}
#endif /* defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2 */
#if defined(VK_EXT_display_control)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDisplayPowerControlEXT (VkDevice   device, VkDisplayKHR   display, const  VkDisplayPowerInfoEXT *  pDisplayPowerInfo)
{
	return pfn_vkDisplayPowerControlEXT (device, display, pDisplayPowerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSwapchainCounterEXT (VkDevice   device, VkSwapchainKHR   swapchain, VkSurfaceCounterFlagBitsEXT   counter, uint64_t *  pCounterValue)
{
	return pfn_vkGetSwapchainCounterEXT (device, swapchain, counter, pCounterValue);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkRegisterDeviceEventEXT (VkDevice   device, const  VkDeviceEventInfoEXT *  pDeviceEventInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence)
{
	return pfn_vkRegisterDeviceEventEXT (device, pDeviceEventInfo, pAllocator, pFence);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkRegisterDisplayEventEXT (VkDevice   device, VkDisplayKHR   display, const  VkDisplayEventInfoEXT *  pDisplayEventInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence)
{
	return pfn_vkRegisterDisplayEventEXT (device, display, pDisplayEventInfo, pAllocator, pFence);
}
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_EXT_display_surface_counter)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceCapabilities2EXT (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, VkSurfaceCapabilities2EXT *  pSurfaceCapabilities)
{
	return pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT (physicalDevice, surface, pSurfaceCapabilities);
}
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_EXT_external_memory_host)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryHostPointerPropertiesEXT (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, const  void *  pHostPointer, VkMemoryHostPointerPropertiesEXT *  pMemoryHostPointerProperties)
{
	return pfn_vkGetMemoryHostPointerPropertiesEXT (device, handleType, pHostPointer, pMemoryHostPointerProperties);
}
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_EXT_full_screen_exclusive)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireFullScreenExclusiveModeEXT (VkDevice   device, VkSwapchainKHR   swapchain)
{
	return pfn_vkAcquireFullScreenExclusiveModeEXT (device, swapchain);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfacePresentModes2EXT (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, uint32_t *  pPresentModeCount, VkPresentModeKHR *  pPresentModes)
{
	return pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT (physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleaseFullScreenExclusiveModeEXT (VkDevice   device, VkSwapchainKHR   swapchain)
{
	return pfn_vkReleaseFullScreenExclusiveModeEXT (device, swapchain);
}
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_hdr_metadata)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetHdrMetadataEXT (VkDevice   device, uint32_t   swapchainCount, const  VkSwapchainKHR *  pSwapchains, const  VkHdrMetadataEXT *  pMetadata)
{
	pfn_vkSetHdrMetadataEXT (device, swapchainCount, pSwapchains, pMetadata);
}
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_EXT_headless_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateHeadlessSurfaceEXT (VkInstance   instance, const  VkHeadlessSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateHeadlessSurfaceEXT (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_EXT_host_image_copy)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyImageToImageEXT (VkDevice   device, const  VkCopyImageToImageInfoEXT *  pCopyImageToImageInfo)
{
	return pfn_vkCopyImageToImageEXT (device, pCopyImageToImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyImageToMemoryEXT (VkDevice   device, const  VkCopyImageToMemoryInfoEXT *  pCopyImageToMemoryInfo)
{
	return pfn_vkCopyImageToMemoryEXT (device, pCopyImageToMemoryInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMemoryToImageEXT (VkDevice   device, const  VkCopyMemoryToImageInfoEXT *  pCopyMemoryToImageInfo)
{
	return pfn_vkCopyMemoryToImageEXT (device, pCopyMemoryToImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkTransitionImageLayoutEXT (VkDevice   device, uint32_t   transitionCount, const  VkHostImageLayoutTransitionInfoEXT *  pTransitions)
{
	return pfn_vkTransitionImageLayoutEXT (device, transitionCount, pTransitions);
}
#endif /* defined(VK_EXT_host_image_copy) */
#if defined(VK_EXT_host_query_reset)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkResetQueryPoolEXT (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount)
{
	pfn_vkResetQueryPoolEXT (device, queryPool, firstQuery, queryCount);
}
#endif /* defined(VK_EXT_host_query_reset) */
#if defined(VK_EXT_image_drm_format_modifier)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageDrmFormatModifierPropertiesEXT (VkDevice   device, VkImage   image, VkImageDrmFormatModifierPropertiesEXT *  pProperties)
{
	return pfn_vkGetImageDrmFormatModifierPropertiesEXT (device, image, pProperties);
}
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_line_rasterization)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineStippleEXT (VkCommandBuffer   commandBuffer, uint32_t   lineStippleFactor, uint16_t   lineStipplePattern)
{
	pfn_vkCmdSetLineStippleEXT (commandBuffer, lineStippleFactor, lineStipplePattern);
}
#endif /* defined(VK_EXT_line_rasterization) */
#if defined(VK_EXT_mesh_shader)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksEXT (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ)
{
	pfn_vkCmdDrawMeshTasksEXT (commandBuffer, groupCountX, groupCountY, groupCountZ);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectCountEXT (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawMeshTasksIndirectCountEXT (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectEXT (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride)
{
	pfn_vkCmdDrawMeshTasksIndirectEXT (commandBuffer, buffer, offset, drawCount, stride);
}
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_EXT_metal_objects)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkExportMetalObjectsEXT (VkDevice   device, VkExportMetalObjectsInfoEXT *  pMetalObjectsInfo)
{
	pfn_vkExportMetalObjectsEXT (device, pMetalObjectsInfo);
}
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_EXT_metal_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateMetalSurfaceEXT (VkInstance   instance, const  VkMetalSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateMetalSurfaceEXT (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_EXT_multi_draw)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMultiEXT (VkCommandBuffer   commandBuffer, uint32_t   drawCount, const  VkMultiDrawInfoEXT *  pVertexInfo, uint32_t   instanceCount, uint32_t   firstInstance, uint32_t   stride)
{
	pfn_vkCmdDrawMultiEXT (commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMultiIndexedEXT (VkCommandBuffer   commandBuffer, uint32_t   drawCount, const  VkMultiDrawIndexedInfoEXT *  pIndexInfo, uint32_t   instanceCount, uint32_t   firstInstance, uint32_t   stride, const  int32_t *  pVertexOffset)
{
	pfn_vkCmdDrawMultiIndexedEXT (commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
}
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_opacity_micromap)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBuildMicromapsEXT (VkDevice                                             device, VkDeferredOperationKHR   deferredOperation, uint32_t   infoCount, const  VkMicromapBuildInfoEXT *  pInfos)
{
	return pfn_vkBuildMicromapsEXT (device, deferredOperation, infoCount, pInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildMicromapsEXT (VkCommandBuffer                                      commandBuffer, uint32_t   infoCount, const  VkMicromapBuildInfoEXT *  pInfos)
{
	pfn_vkCmdBuildMicromapsEXT (commandBuffer, infoCount, pInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryToMicromapEXT (VkCommandBuffer   commandBuffer, const  VkCopyMemoryToMicromapInfoEXT *  pInfo)
{
	pfn_vkCmdCopyMemoryToMicromapEXT (commandBuffer, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMicromapEXT (VkCommandBuffer   commandBuffer, const  VkCopyMicromapInfoEXT *  pInfo)
{
	pfn_vkCmdCopyMicromapEXT (commandBuffer, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMicromapToMemoryEXT (VkCommandBuffer   commandBuffer, const  VkCopyMicromapToMemoryInfoEXT *  pInfo)
{
	pfn_vkCmdCopyMicromapToMemoryEXT (commandBuffer, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteMicromapsPropertiesEXT (VkCommandBuffer   commandBuffer, uint32_t   micromapCount, const  VkMicromapEXT *  pMicromaps, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery)
{
	pfn_vkCmdWriteMicromapsPropertiesEXT (commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMemoryToMicromapEXT (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMemoryToMicromapInfoEXT *  pInfo)
{
	return pfn_vkCopyMemoryToMicromapEXT (device, deferredOperation, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMicromapEXT (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMicromapInfoEXT *  pInfo)
{
	return pfn_vkCopyMicromapEXT (device, deferredOperation, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMicromapToMemoryEXT (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMicromapToMemoryInfoEXT *  pInfo)
{
	return pfn_vkCopyMicromapToMemoryEXT (device, deferredOperation, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateMicromapEXT (VkDevice                                             device, const  VkMicromapCreateInfoEXT *         pCreateInfo, const  VkAllocationCallbacks *        pAllocator, VkMicromapEXT *                         pMicromap)
{
	return pfn_vkCreateMicromapEXT (device, pCreateInfo, pAllocator, pMicromap);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyMicromapEXT (VkDevice   device, VkMicromapEXT   micromap, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyMicromapEXT (device, micromap, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceMicromapCompatibilityEXT (VkDevice   device, const  VkMicromapVersionInfoEXT *  pVersionInfo, VkAccelerationStructureCompatibilityKHR *  pCompatibility)
{
	pfn_vkGetDeviceMicromapCompatibilityEXT (device, pVersionInfo, pCompatibility);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetMicromapBuildSizesEXT (VkDevice                                              device, VkAccelerationStructureBuildTypeKHR                   buildType, const  VkMicromapBuildInfoEXT *   pBuildInfo, VkMicromapBuildSizesInfoEXT *            pSizeInfo)
{
	pfn_vkGetMicromapBuildSizesEXT (device, buildType, pBuildInfo, pSizeInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWriteMicromapsPropertiesEXT (VkDevice   device, uint32_t   micromapCount, const  VkMicromapEXT *  pMicromaps, VkQueryType    queryType, size_t         dataSize, void *  pData, size_t   stride)
{
	return pfn_vkWriteMicromapsPropertiesEXT (device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
}
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_pageable_device_local_memory)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetDeviceMemoryPriorityEXT (VkDevice         device, VkDeviceMemory   memory, float            priority)
{
	pfn_vkSetDeviceMemoryPriorityEXT (device, memory, priority);
}
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_EXT_pipeline_properties)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelinePropertiesEXT (VkDevice   device, const  VkPipelineInfoEXT *  pPipelineInfo, VkBaseOutStructure *  pPipelineProperties)
{
	return pfn_vkGetPipelinePropertiesEXT (device, pPipelineInfo, pPipelineProperties);
}
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_EXT_private_data)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePrivateDataSlotEXT (VkDevice   device, const  VkPrivateDataSlotCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPrivateDataSlot *  pPrivateDataSlot)
{
	return pfn_vkCreatePrivateDataSlotEXT (device, pCreateInfo, pAllocator, pPrivateDataSlot);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPrivateDataSlotEXT (VkDevice   device, VkPrivateDataSlot   privateDataSlot, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyPrivateDataSlotEXT (device, privateDataSlot, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPrivateDataEXT (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t *  pData)
{
	pfn_vkGetPrivateDataEXT (device, objectType, objectHandle, privateDataSlot, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetPrivateDataEXT (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t   data)
{
	return pfn_vkSetPrivateDataEXT (device, objectType, objectHandle, privateDataSlot, data);
}
#endif /* defined(VK_EXT_private_data) */
#if defined(VK_EXT_sample_locations)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetSampleLocationsEXT (VkCommandBuffer   commandBuffer, const  VkSampleLocationsInfoEXT *  pSampleLocationsInfo)
{
	pfn_vkCmdSetSampleLocationsEXT (commandBuffer, pSampleLocationsInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMultisamplePropertiesEXT (VkPhysicalDevice   physicalDevice, VkSampleCountFlagBits   samples, VkMultisamplePropertiesEXT *  pMultisampleProperties)
{
	pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT (physicalDevice, samples, pMultisampleProperties);
}
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_shader_module_identifier)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetShaderModuleCreateInfoIdentifierEXT (VkDevice   device, const  VkShaderModuleCreateInfo *  pCreateInfo, VkShaderModuleIdentifierEXT *  pIdentifier)
{
	pfn_vkGetShaderModuleCreateInfoIdentifierEXT (device, pCreateInfo, pIdentifier);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetShaderModuleIdentifierEXT (VkDevice   device, VkShaderModule   shaderModule, VkShaderModuleIdentifierEXT *  pIdentifier)
{
	pfn_vkGetShaderModuleIdentifierEXT (device, shaderModule, pIdentifier);
}
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_shader_object)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindShadersEXT (VkCommandBuffer   commandBuffer, uint32_t   stageCount, const  VkShaderStageFlagBits *  pStages, const  VkShaderEXT *  pShaders)
{
	pfn_vkCmdBindShadersEXT (commandBuffer, stageCount, pStages, pShaders);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateShadersEXT (VkDevice   device, uint32_t   createInfoCount, const  VkShaderCreateInfoEXT *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkShaderEXT *  pShaders)
{
	return pfn_vkCreateShadersEXT (device, createInfoCount, pCreateInfos, pAllocator, pShaders);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyShaderEXT (VkDevice   device, VkShaderEXT   shader, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyShaderEXT (device, shader, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetShaderBinaryDataEXT (VkDevice   device, VkShaderEXT   shader, size_t *  pDataSize, void *  pData)
{
	return pfn_vkGetShaderBinaryDataEXT (device, shader, pDataSize, pData);
}
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_EXT_swapchain_maintenance1)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleaseSwapchainImagesEXT (VkDevice   device, const  VkReleaseSwapchainImagesInfoEXT *  pReleaseInfo)
{
	return pfn_vkReleaseSwapchainImagesEXT (device, pReleaseInfo);
}
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_EXT_tooling_info)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceToolPropertiesEXT (VkPhysicalDevice   physicalDevice, uint32_t *  pToolCount, VkPhysicalDeviceToolProperties *  pToolProperties)
{
	return pfn_vkGetPhysicalDeviceToolPropertiesEXT (physicalDevice, pToolCount, pToolProperties);
}
#endif /* defined(VK_EXT_tooling_info) */
#if defined(VK_EXT_transform_feedback)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginQueryIndexedEXT (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, VkQueryControlFlags   flags, uint32_t   index)
{
	pfn_vkCmdBeginQueryIndexedEXT (commandBuffer, queryPool, query, flags, index);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginTransformFeedbackEXT (VkCommandBuffer   commandBuffer, uint32_t   firstCounterBuffer, uint32_t   counterBufferCount, const  VkBuffer *  pCounterBuffers, const  VkDeviceSize *  pCounterBufferOffsets)
{
	pfn_vkCmdBeginTransformFeedbackEXT (commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindTransformFeedbackBuffersEXT (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes)
{
	pfn_vkCmdBindTransformFeedbackBuffersEXT (commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectByteCountEXT (VkCommandBuffer   commandBuffer, uint32_t   instanceCount, uint32_t   firstInstance, VkBuffer   counterBuffer, VkDeviceSize   counterBufferOffset, uint32_t   counterOffset, uint32_t   vertexStride)
{
	pfn_vkCmdDrawIndirectByteCountEXT (commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndQueryIndexedEXT (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, uint32_t   index)
{
	pfn_vkCmdEndQueryIndexedEXT (commandBuffer, queryPool, query, index);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndTransformFeedbackEXT (VkCommandBuffer   commandBuffer, uint32_t   firstCounterBuffer, uint32_t   counterBufferCount, const  VkBuffer *  pCounterBuffers, const  VkDeviceSize *  pCounterBufferOffsets)
{
	pfn_vkCmdEndTransformFeedbackEXT (commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
}
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_EXT_validation_cache)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateValidationCacheEXT (VkDevice   device, const  VkValidationCacheCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkValidationCacheEXT *  pValidationCache)
{
	return pfn_vkCreateValidationCacheEXT (device, pCreateInfo, pAllocator, pValidationCache);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyValidationCacheEXT (VkDevice   device, VkValidationCacheEXT   validationCache, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyValidationCacheEXT (device, validationCache, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetValidationCacheDataEXT (VkDevice   device, VkValidationCacheEXT   validationCache, size_t *  pDataSize, void *  pData)
{
	return pfn_vkGetValidationCacheDataEXT (device, validationCache, pDataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMergeValidationCachesEXT (VkDevice   device, VkValidationCacheEXT   dstCache, uint32_t   srcCacheCount, const  VkValidationCacheEXT *  pSrcCaches)
{
	return pfn_vkMergeValidationCachesEXT (device, dstCache, srcCacheCount, pSrcCaches);
}
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_FUCHSIA_buffer_collection)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateBufferCollectionFUCHSIA (VkDevice   device, const  VkBufferCollectionCreateInfoFUCHSIA *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBufferCollectionFUCHSIA *  pCollection)
{
	return pfn_vkCreateBufferCollectionFUCHSIA (device, pCreateInfo, pAllocator, pCollection);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyBufferCollectionFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyBufferCollectionFUCHSIA (device, collection, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetBufferCollectionPropertiesFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, VkBufferCollectionPropertiesFUCHSIA *  pProperties)
{
	return pfn_vkGetBufferCollectionPropertiesFUCHSIA (device, collection, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetBufferCollectionBufferConstraintsFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, const  VkBufferConstraintsInfoFUCHSIA *  pBufferConstraintsInfo)
{
	return pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA (device, collection, pBufferConstraintsInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetBufferCollectionImageConstraintsFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, const  VkImageConstraintsInfoFUCHSIA *  pImageConstraintsInfo)
{
	return pfn_vkSetBufferCollectionImageConstraintsFUCHSIA (device, collection, pImageConstraintsInfo);
}
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_FUCHSIA_external_memory)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryZirconHandleFUCHSIA (VkDevice   device, const  VkMemoryGetZirconHandleInfoFUCHSIA *  pGetZirconHandleInfo, zx_handle_t *  pZirconHandle)
{
	return pfn_vkGetMemoryZirconHandleFUCHSIA (device, pGetZirconHandleInfo, pZirconHandle);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryZirconHandlePropertiesFUCHSIA (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, zx_handle_t   zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA *  pMemoryZirconHandleProperties)
{
	return pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA (device, handleType, zirconHandle, pMemoryZirconHandleProperties);
}
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_FUCHSIA_external_semaphore)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreZirconHandleFUCHSIA (VkDevice   device, const  VkSemaphoreGetZirconHandleInfoFUCHSIA *  pGetZirconHandleInfo, zx_handle_t *  pZirconHandle)
{
	return pfn_vkGetSemaphoreZirconHandleFUCHSIA (device, pGetZirconHandleInfo, pZirconHandle);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportSemaphoreZirconHandleFUCHSIA (VkDevice   device, const  VkImportSemaphoreZirconHandleInfoFUCHSIA *  pImportSemaphoreZirconHandleInfo)
{
	return pfn_vkImportSemaphoreZirconHandleFUCHSIA (device, pImportSemaphoreZirconHandleInfo);
}
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_FUCHSIA_imagepipe_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateImagePipeSurfaceFUCHSIA (VkInstance   instance, const  VkImagePipeSurfaceCreateInfoFUCHSIA *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateImagePipeSurfaceFUCHSIA (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_GGP_stream_descriptor_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateStreamDescriptorSurfaceGGP (VkInstance   instance, const  VkStreamDescriptorSurfaceCreateInfoGGP *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateStreamDescriptorSurfaceGGP (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_GOOGLE_display_timing)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPastPresentationTimingGOOGLE (VkDevice   device, VkSwapchainKHR   swapchain, uint32_t *  pPresentationTimingCount, VkPastPresentationTimingGOOGLE *  pPresentationTimings)
{
	return pfn_vkGetPastPresentationTimingGOOGLE (device, swapchain, pPresentationTimingCount, pPresentationTimings);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRefreshCycleDurationGOOGLE (VkDevice   device, VkSwapchainKHR   swapchain, VkRefreshCycleDurationGOOGLE *  pDisplayTimingProperties)
{
	return pfn_vkGetRefreshCycleDurationGOOGLE (device, swapchain, pDisplayTimingProperties);
}
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_HUAWEI_cluster_culling_shader)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawClusterHUAWEI (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ)
{
	pfn_vkCmdDrawClusterHUAWEI (commandBuffer, groupCountX, groupCountY, groupCountZ);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawClusterIndirectHUAWEI (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset)
{
	pfn_vkCmdDrawClusterIndirectHUAWEI (commandBuffer, buffer, offset);
}
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_HUAWEI_invocation_mask)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindInvocationMaskHUAWEI (VkCommandBuffer   commandBuffer, VkImageView   imageView, VkImageLayout   imageLayout)
{
	pfn_vkCmdBindInvocationMaskHUAWEI (commandBuffer, imageView, imageLayout);
}
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_HUAWEI_subpass_shading)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSubpassShadingHUAWEI (VkCommandBuffer   commandBuffer)
{
	pfn_vkCmdSubpassShadingHUAWEI (commandBuffer);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI (VkDevice   device, VkRenderPass   renderpass, VkExtent2D *  pMaxWorkgroupSize)
{
	return pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI (device, renderpass, pMaxWorkgroupSize);
}
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_INTEL_performance_query)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquirePerformanceConfigurationINTEL (VkDevice   device, const  VkPerformanceConfigurationAcquireInfoINTEL *  pAcquireInfo, VkPerformanceConfigurationINTEL *  pConfiguration)
{
	return pfn_vkAcquirePerformanceConfigurationINTEL (device, pAcquireInfo, pConfiguration);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCmdSetPerformanceMarkerINTEL (VkCommandBuffer   commandBuffer, const  VkPerformanceMarkerInfoINTEL *  pMarkerInfo)
{
	return pfn_vkCmdSetPerformanceMarkerINTEL (commandBuffer, pMarkerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCmdSetPerformanceOverrideINTEL (VkCommandBuffer   commandBuffer, const  VkPerformanceOverrideInfoINTEL *  pOverrideInfo)
{
	return pfn_vkCmdSetPerformanceOverrideINTEL (commandBuffer, pOverrideInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCmdSetPerformanceStreamMarkerINTEL (VkCommandBuffer   commandBuffer, const  VkPerformanceStreamMarkerInfoINTEL *  pMarkerInfo)
{
	return pfn_vkCmdSetPerformanceStreamMarkerINTEL (commandBuffer, pMarkerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPerformanceParameterINTEL (VkDevice   device, VkPerformanceParameterTypeINTEL   parameter, VkPerformanceValueINTEL *  pValue)
{
	return pfn_vkGetPerformanceParameterINTEL (device, parameter, pValue);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkInitializePerformanceApiINTEL (VkDevice   device, const  VkInitializePerformanceApiInfoINTEL *  pInitializeInfo)
{
	return pfn_vkInitializePerformanceApiINTEL (device, pInitializeInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSetPerformanceConfigurationINTEL (VkQueue   queue, VkPerformanceConfigurationINTEL   configuration)
{
	return pfn_vkQueueSetPerformanceConfigurationINTEL (queue, configuration);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleasePerformanceConfigurationINTEL (VkDevice   device, VkPerformanceConfigurationINTEL   configuration)
{
	return pfn_vkReleasePerformanceConfigurationINTEL (device, configuration);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUninitializePerformanceApiINTEL (VkDevice   device)
{
	pfn_vkUninitializePerformanceApiINTEL (device);
}
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_acceleration_structure)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBuildAccelerationStructuresKHR (VkDevice                                             device, VkDeferredOperationKHR   deferredOperation, uint32_t   infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkAccelerationStructureBuildRangeInfoKHR * const*  ppBuildRangeInfos)
{
	return pfn_vkBuildAccelerationStructuresKHR (device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildAccelerationStructuresIndirectKHR (VkCommandBuffer                    commandBuffer, uint32_t                                             infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkDeviceAddress *              pIndirectDeviceAddresses, const  uint32_t *                     pIndirectStrides, const  uint32_t * const*              ppMaxPrimitiveCounts)
{
	pfn_vkCmdBuildAccelerationStructuresIndirectKHR (commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildAccelerationStructuresKHR (VkCommandBuffer                                      commandBuffer, uint32_t   infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkAccelerationStructureBuildRangeInfoKHR * const*  ppBuildRangeInfos)
{
	pfn_vkCmdBuildAccelerationStructuresKHR (commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyAccelerationStructureKHR (VkCommandBuffer   commandBuffer, const  VkCopyAccelerationStructureInfoKHR *  pInfo)
{
	pfn_vkCmdCopyAccelerationStructureKHR (commandBuffer, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyAccelerationStructureToMemoryKHR (VkCommandBuffer   commandBuffer, const  VkCopyAccelerationStructureToMemoryInfoKHR *  pInfo)
{
	pfn_vkCmdCopyAccelerationStructureToMemoryKHR (commandBuffer, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryToAccelerationStructureKHR (VkCommandBuffer   commandBuffer, const  VkCopyMemoryToAccelerationStructureInfoKHR *  pInfo)
{
	pfn_vkCmdCopyMemoryToAccelerationStructureKHR (commandBuffer, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteAccelerationStructuresPropertiesKHR (VkCommandBuffer   commandBuffer, uint32_t   accelerationStructureCount, const  VkAccelerationStructureKHR *  pAccelerationStructures, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery)
{
	pfn_vkCmdWriteAccelerationStructuresPropertiesKHR (commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyAccelerationStructureKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyAccelerationStructureInfoKHR *  pInfo)
{
	return pfn_vkCopyAccelerationStructureKHR (device, deferredOperation, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyAccelerationStructureToMemoryKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyAccelerationStructureToMemoryInfoKHR *  pInfo)
{
	return pfn_vkCopyAccelerationStructureToMemoryKHR (device, deferredOperation, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMemoryToAccelerationStructureKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMemoryToAccelerationStructureInfoKHR *  pInfo)
{
	return pfn_vkCopyMemoryToAccelerationStructureKHR (device, deferredOperation, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateAccelerationStructureKHR (VkDevice                                             device, const  VkAccelerationStructureCreateInfoKHR *         pCreateInfo, const  VkAllocationCallbacks *        pAllocator, VkAccelerationStructureKHR *                         pAccelerationStructure)
{
	return pfn_vkCreateAccelerationStructureKHR (device, pCreateInfo, pAllocator, pAccelerationStructure);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyAccelerationStructureKHR (VkDevice   device, VkAccelerationStructureKHR   accelerationStructure, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyAccelerationStructureKHR (device, accelerationStructure, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetAccelerationStructureBuildSizesKHR (VkDevice                                              device, VkAccelerationStructureBuildTypeKHR                   buildType, const  VkAccelerationStructureBuildGeometryInfoKHR *   pBuildInfo, const  uint32_t *   pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR *            pSizeInfo)
{
	pfn_vkGetAccelerationStructureBuildSizesKHR (device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetAccelerationStructureDeviceAddressKHR (VkDevice   device, const  VkAccelerationStructureDeviceAddressInfoKHR *  pInfo)
{
	return pfn_vkGetAccelerationStructureDeviceAddressKHR (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceAccelerationStructureCompatibilityKHR (VkDevice   device, const  VkAccelerationStructureVersionInfoKHR *  pVersionInfo, VkAccelerationStructureCompatibilityKHR *  pCompatibility)
{
	pfn_vkGetDeviceAccelerationStructureCompatibilityKHR (device, pVersionInfo, pCompatibility);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWriteAccelerationStructuresPropertiesKHR (VkDevice   device, uint32_t   accelerationStructureCount, const  VkAccelerationStructureKHR *  pAccelerationStructures, VkQueryType    queryType, size_t         dataSize, void *  pData, size_t   stride)
{
	return pfn_vkWriteAccelerationStructuresPropertiesKHR (device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
}
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_android_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateAndroidSurfaceKHR (VkInstance   instance, const  VkAndroidSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateAndroidSurfaceKHR (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_KHR_bind_memory2)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindBufferMemory2KHR (VkDevice   device, uint32_t   bindInfoCount, const  VkBindBufferMemoryInfo *  pBindInfos)
{
	return pfn_vkBindBufferMemory2KHR (device, bindInfoCount, pBindInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindImageMemory2KHR (VkDevice   device, uint32_t   bindInfoCount, const  VkBindImageMemoryInfo *  pBindInfos)
{
	return pfn_vkBindImageMemory2KHR (device, bindInfoCount, pBindInfos);
}
#endif /* defined(VK_KHR_bind_memory2) */
#if defined(VK_KHR_buffer_device_address)
extern "C"
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetBufferDeviceAddressKHR (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo)
{
	return pfn_vkGetBufferDeviceAddressKHR (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetBufferOpaqueCaptureAddressKHR (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo)
{
	return pfn_vkGetBufferOpaqueCaptureAddressKHR (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetDeviceMemoryOpaqueCaptureAddressKHR (VkDevice   device, const  VkDeviceMemoryOpaqueCaptureAddressInfo *  pInfo)
{
	return pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR (device, pInfo);
}
#endif /* defined(VK_KHR_buffer_device_address) */
#if defined(VK_KHR_calibrated_timestamps)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetCalibratedTimestampsKHR (VkDevice   device, uint32_t   timestampCount, const  VkCalibratedTimestampInfoKHR *  pTimestampInfos, uint64_t *  pTimestamps, uint64_t *  pMaxDeviation)
{
	return pfn_vkGetCalibratedTimestampsKHR (device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCalibrateableTimeDomainsKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pTimeDomainCount, VkTimeDomainKHR *  pTimeDomains)
{
	return pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR (physicalDevice, pTimeDomainCount, pTimeDomains);
}
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_KHR_cooperative_matrix)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkCooperativeMatrixPropertiesKHR *  pProperties)
{
	return pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR (physicalDevice, pPropertyCount, pProperties);
}
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_KHR_copy_commands2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBlitImage2KHR (VkCommandBuffer   commandBuffer, const  VkBlitImageInfo2 *  pBlitImageInfo)
{
	pfn_vkCmdBlitImage2KHR (commandBuffer, pBlitImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBuffer2KHR (VkCommandBuffer   commandBuffer, const  VkCopyBufferInfo2 *  pCopyBufferInfo)
{
	pfn_vkCmdCopyBuffer2KHR (commandBuffer, pCopyBufferInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBufferToImage2KHR (VkCommandBuffer   commandBuffer, const  VkCopyBufferToImageInfo2 *  pCopyBufferToImageInfo)
{
	pfn_vkCmdCopyBufferToImage2KHR (commandBuffer, pCopyBufferToImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImage2KHR (VkCommandBuffer   commandBuffer, const  VkCopyImageInfo2 *  pCopyImageInfo)
{
	pfn_vkCmdCopyImage2KHR (commandBuffer, pCopyImageInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImageToBuffer2KHR (VkCommandBuffer   commandBuffer, const  VkCopyImageToBufferInfo2 *  pCopyImageToBufferInfo)
{
	pfn_vkCmdCopyImageToBuffer2KHR (commandBuffer, pCopyImageToBufferInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResolveImage2KHR (VkCommandBuffer   commandBuffer, const  VkResolveImageInfo2 *  pResolveImageInfo)
{
	pfn_vkCmdResolveImage2KHR (commandBuffer, pResolveImageInfo);
}
#endif /* defined(VK_KHR_copy_commands2) */
#if defined(VK_KHR_create_renderpass2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderPass2KHR (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *       pRenderPassBegin, const  VkSubpassBeginInfo *       pSubpassBeginInfo)
{
	pfn_vkCmdBeginRenderPass2KHR (commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderPass2KHR (VkCommandBuffer   commandBuffer, const  VkSubpassEndInfo *         pSubpassEndInfo)
{
	pfn_vkCmdEndRenderPass2KHR (commandBuffer, pSubpassEndInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdNextSubpass2KHR (VkCommandBuffer   commandBuffer, const  VkSubpassBeginInfo *       pSubpassBeginInfo, const  VkSubpassEndInfo *         pSubpassEndInfo)
{
	pfn_vkCmdNextSubpass2KHR (commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRenderPass2KHR (VkDevice   device, const  VkRenderPassCreateInfo2 *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass)
{
	return pfn_vkCreateRenderPass2KHR (device, pCreateInfo, pAllocator, pRenderPass);
}
#endif /* defined(VK_KHR_create_renderpass2) */
#if defined(VK_KHR_deferred_host_operations)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDeferredOperationKHR (VkDevice   device, const  VkAllocationCallbacks *  pAllocator, VkDeferredOperationKHR *  pDeferredOperation)
{
	return pfn_vkCreateDeferredOperationKHR (device, pAllocator, pDeferredOperation);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDeferredOperationJoinKHR (VkDevice   device, VkDeferredOperationKHR   operation)
{
	return pfn_vkDeferredOperationJoinKHR (device, operation);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDeferredOperationKHR (VkDevice   device, VkDeferredOperationKHR   operation, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDeferredOperationKHR (device, operation, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR uint32_t VKAPI_CALL
vkGetDeferredOperationMaxConcurrencyKHR (VkDevice   device, VkDeferredOperationKHR   operation)
{
	return pfn_vkGetDeferredOperationMaxConcurrencyKHR (device, operation);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeferredOperationResultKHR (VkDevice   device, VkDeferredOperationKHR   operation)
{
	return pfn_vkGetDeferredOperationResultKHR (device, operation);
}
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_descriptor_update_template)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorUpdateTemplateKHR (VkDevice   device, const  VkDescriptorUpdateTemplateCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorUpdateTemplate *  pDescriptorUpdateTemplate)
{
	return pfn_vkCreateDescriptorUpdateTemplateKHR (device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorUpdateTemplateKHR (VkDevice   device, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyDescriptorUpdateTemplateKHR (device, descriptorUpdateTemplate, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUpdateDescriptorSetWithTemplateKHR (VkDevice   device, VkDescriptorSet   descriptorSet, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  void *  pData)
{
	pfn_vkUpdateDescriptorSetWithTemplateKHR (device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif /* defined(VK_KHR_descriptor_update_template) */
#if defined(VK_KHR_device_group)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchBaseKHR (VkCommandBuffer   commandBuffer, uint32_t   baseGroupX, uint32_t   baseGroupY, uint32_t   baseGroupZ, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ)
{
	pfn_vkCmdDispatchBaseKHR (commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDeviceMaskKHR (VkCommandBuffer   commandBuffer, uint32_t   deviceMask)
{
	pfn_vkCmdSetDeviceMaskKHR (commandBuffer, deviceMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceGroupPeerMemoryFeaturesKHR (VkDevice   device, uint32_t   heapIndex, uint32_t   localDeviceIndex, uint32_t   remoteDeviceIndex, VkPeerMemoryFeatureFlags *  pPeerMemoryFeatures)
{
	pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR (device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif /* defined(VK_KHR_device_group) */
#if defined(VK_KHR_device_group_creation)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDeviceGroupsKHR (VkInstance   instance, uint32_t *  pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *  pPhysicalDeviceGroupProperties)
{
	return pfn_vkEnumeratePhysicalDeviceGroupsKHR (instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif /* defined(VK_KHR_device_group_creation) */
#if defined(VK_KHR_display)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDisplayModeKHR (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, const  VkDisplayModeCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDisplayModeKHR *  pMode)
{
	return pfn_vkCreateDisplayModeKHR (physicalDevice, display, pCreateInfo, pAllocator, pMode);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDisplayPlaneSurfaceKHR (VkInstance   instance, const  VkDisplaySurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateDisplayPlaneSurfaceKHR (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayModePropertiesKHR (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, uint32_t *  pPropertyCount, VkDisplayModePropertiesKHR *  pProperties)
{
	return pfn_vkGetDisplayModePropertiesKHR (physicalDevice, display, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayPlaneCapabilitiesKHR (VkPhysicalDevice   physicalDevice, VkDisplayModeKHR   mode, uint32_t   planeIndex, VkDisplayPlaneCapabilitiesKHR *  pCapabilities)
{
	return pfn_vkGetDisplayPlaneCapabilitiesKHR (physicalDevice, mode, planeIndex, pCapabilities);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayPlaneSupportedDisplaysKHR (VkPhysicalDevice   physicalDevice, uint32_t   planeIndex, uint32_t *  pDisplayCount, VkDisplayKHR *  pDisplays)
{
	return pfn_vkGetDisplayPlaneSupportedDisplaysKHR (physicalDevice, planeIndex, pDisplayCount, pDisplays);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayPlanePropertiesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPlanePropertiesKHR *  pProperties)
{
	return pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR (physicalDevice, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayPropertiesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPropertiesKHR *  pProperties)
{
	return pfn_vkGetPhysicalDeviceDisplayPropertiesKHR (physicalDevice, pPropertyCount, pProperties);
}
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_display_swapchain)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSharedSwapchainsKHR (VkDevice   device, uint32_t   swapchainCount, const  VkSwapchainCreateInfoKHR *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkSwapchainKHR *  pSwapchains)
{
	return pfn_vkCreateSharedSwapchainsKHR (device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
}
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_KHR_draw_indirect_count)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirectCountKHR (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndexedIndirectCountKHR (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectCountKHR (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawIndirectCountKHR (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif /* defined(VK_KHR_draw_indirect_count) */
#if defined(VK_KHR_dynamic_rendering)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderingKHR (VkCommandBuffer                     commandBuffer, const  VkRenderingInfo *                               pRenderingInfo)
{
	pfn_vkCmdBeginRenderingKHR (commandBuffer, pRenderingInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderingKHR (VkCommandBuffer                     commandBuffer)
{
	pfn_vkCmdEndRenderingKHR (commandBuffer);
}
#endif /* defined(VK_KHR_dynamic_rendering) */
#if defined(VK_KHR_dynamic_rendering_local_read)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRenderingAttachmentLocationsKHR (VkCommandBuffer   commandBuffer, const  VkRenderingAttachmentLocationInfoKHR *  pLocationInfo)
{
	pfn_vkCmdSetRenderingAttachmentLocationsKHR (commandBuffer, pLocationInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRenderingInputAttachmentIndicesKHR (VkCommandBuffer   commandBuffer, const  VkRenderingInputAttachmentIndexInfoKHR *  pLocationInfo)
{
	pfn_vkCmdSetRenderingInputAttachmentIndicesKHR (commandBuffer, pLocationInfo);
}
#endif /* defined(VK_KHR_dynamic_rendering_local_read) */
#if defined(VK_KHR_external_fence_capabilities)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalFencePropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalFenceInfo *  pExternalFenceInfo, VkExternalFenceProperties *  pExternalFenceProperties)
{
	pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR (physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif /* defined(VK_KHR_external_fence_capabilities) */
#if defined(VK_KHR_external_fence_fd)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFenceFdKHR (VkDevice   device, const  VkFenceGetFdInfoKHR *  pGetFdInfo, int *  pFd)
{
	return pfn_vkGetFenceFdKHR (device, pGetFdInfo, pFd);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportFenceFdKHR (VkDevice   device, const  VkImportFenceFdInfoKHR *  pImportFenceFdInfo)
{
	return pfn_vkImportFenceFdKHR (device, pImportFenceFdInfo);
}
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFenceWin32HandleKHR (VkDevice   device, const  VkFenceGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle)
{
	return pfn_vkGetFenceWin32HandleKHR (device, pGetWin32HandleInfo, pHandle);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportFenceWin32HandleKHR (VkDevice   device, const  VkImportFenceWin32HandleInfoKHR *  pImportFenceWin32HandleInfo)
{
	return pfn_vkImportFenceWin32HandleKHR (device, pImportFenceWin32HandleInfo);
}
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_KHR_external_memory_capabilities)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalBufferPropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalBufferInfo *  pExternalBufferInfo, VkExternalBufferProperties *  pExternalBufferProperties)
{
	pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR (physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif /* defined(VK_KHR_external_memory_capabilities) */
#if defined(VK_KHR_external_memory_fd)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryFdKHR (VkDevice   device, const  VkMemoryGetFdInfoKHR *  pGetFdInfo, int *  pFd)
{
	return pfn_vkGetMemoryFdKHR (device, pGetFdInfo, pFd);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryFdPropertiesKHR (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, int   fd, VkMemoryFdPropertiesKHR *  pMemoryFdProperties)
{
	return pfn_vkGetMemoryFdPropertiesKHR (device, handleType, fd, pMemoryFdProperties);
}
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_KHR_external_memory_win32)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryWin32HandleKHR (VkDevice   device, const  VkMemoryGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle)
{
	return pfn_vkGetMemoryWin32HandleKHR (device, pGetWin32HandleInfo, pHandle);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryWin32HandlePropertiesKHR (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, HANDLE   handle, VkMemoryWin32HandlePropertiesKHR *  pMemoryWin32HandleProperties)
{
	return pfn_vkGetMemoryWin32HandlePropertiesKHR (device, handleType, handle, pMemoryWin32HandleProperties);
}
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_KHR_external_semaphore_capabilities)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalSemaphoreInfo *  pExternalSemaphoreInfo, VkExternalSemaphoreProperties *  pExternalSemaphoreProperties)
{
	pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif /* defined(VK_KHR_external_semaphore_capabilities) */
#if defined(VK_KHR_external_semaphore_fd)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreFdKHR (VkDevice   device, const  VkSemaphoreGetFdInfoKHR *  pGetFdInfo, int *  pFd)
{
	return pfn_vkGetSemaphoreFdKHR (device, pGetFdInfo, pFd);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportSemaphoreFdKHR (VkDevice   device, const  VkImportSemaphoreFdInfoKHR *  pImportSemaphoreFdInfo)
{
	return pfn_vkImportSemaphoreFdKHR (device, pImportSemaphoreFdInfo);
}
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreWin32HandleKHR (VkDevice   device, const  VkSemaphoreGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle)
{
	return pfn_vkGetSemaphoreWin32HandleKHR (device, pGetWin32HandleInfo, pHandle);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportSemaphoreWin32HandleKHR (VkDevice   device, const  VkImportSemaphoreWin32HandleInfoKHR *  pImportSemaphoreWin32HandleInfo)
{
	return pfn_vkImportSemaphoreWin32HandleKHR (device, pImportSemaphoreWin32HandleInfo);
}
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_KHR_fragment_shading_rate)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFragmentShadingRateKHR (VkCommandBuffer             commandBuffer, const  VkExtent2D *                            pFragmentSize, const  VkFragmentShadingRateCombinerOpKHR      combinerOps [2])
{
	pfn_vkCmdSetFragmentShadingRateKHR (commandBuffer, pFragmentSize, combinerOps);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceFragmentShadingRatesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR *  pFragmentShadingRates)
{
	return pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR (physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
}
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_KHR_get_display_properties2)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayModeProperties2KHR (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, uint32_t *  pPropertyCount, VkDisplayModeProperties2KHR *  pProperties)
{
	return pfn_vkGetDisplayModeProperties2KHR (physicalDevice, display, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayPlaneCapabilities2KHR (VkPhysicalDevice   physicalDevice, const  VkDisplayPlaneInfo2KHR *  pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR *  pCapabilities)
{
	return pfn_vkGetDisplayPlaneCapabilities2KHR (physicalDevice, pDisplayPlaneInfo, pCapabilities);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayPlaneProperties2KHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPlaneProperties2KHR *  pProperties)
{
	return pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR (physicalDevice, pPropertyCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayProperties2KHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayProperties2KHR *  pProperties)
{
	return pfn_vkGetPhysicalDeviceDisplayProperties2KHR (physicalDevice, pPropertyCount, pProperties);
}
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_get_memory_requirements2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetBufferMemoryRequirements2KHR (VkDevice   device, const  VkBufferMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetBufferMemoryRequirements2KHR (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageMemoryRequirements2KHR (VkDevice   device, const  VkImageMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetImageMemoryRequirements2KHR (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSparseMemoryRequirements2KHR (VkDevice   device, const  VkImageSparseMemoryRequirementsInfo2 *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements)
{
	pfn_vkGetImageSparseMemoryRequirements2KHR (device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif /* defined(VK_KHR_get_memory_requirements2) */
#if defined(VK_KHR_get_physical_device_properties2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFeatures2KHR (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures2 *  pFeatures)
{
	pfn_vkGetPhysicalDeviceFeatures2KHR (physicalDevice, pFeatures);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFormatProperties2KHR (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties2 *  pFormatProperties)
{
	pfn_vkGetPhysicalDeviceFormatProperties2KHR (physicalDevice, format, pFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceImageFormatProperties2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceImageFormatInfo2 *  pImageFormatInfo, VkImageFormatProperties2 *  pImageFormatProperties)
{
	return pfn_vkGetPhysicalDeviceImageFormatProperties2KHR (physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMemoryProperties2KHR (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties2 *  pMemoryProperties)
{
	pfn_vkGetPhysicalDeviceMemoryProperties2KHR (physicalDevice, pMemoryProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceProperties2KHR (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties2 *  pProperties)
{
	pfn_vkGetPhysicalDeviceProperties2KHR (physicalDevice, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyProperties2KHR (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *  pQueueFamilyProperties)
{
	pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR (physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceSparseImageFormatProperties2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSparseImageFormatInfo2 *  pFormatInfo, uint32_t *  pPropertyCount, VkSparseImageFormatProperties2 *  pProperties)
{
	pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR (physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif /* defined(VK_KHR_get_physical_device_properties2) */
#if defined(VK_KHR_get_surface_capabilities2)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceCapabilities2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, VkSurfaceCapabilities2KHR *  pSurfaceCapabilities)
{
	return pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR (physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceFormats2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, uint32_t *  pSurfaceFormatCount, VkSurfaceFormat2KHR *  pSurfaceFormats)
{
	return pfn_vkGetPhysicalDeviceSurfaceFormats2KHR (physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
}
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_KHR_line_rasterization)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineStippleKHR (VkCommandBuffer   commandBuffer, uint32_t   lineStippleFactor, uint16_t   lineStipplePattern)
{
	pfn_vkCmdSetLineStippleKHR (commandBuffer, lineStippleFactor, lineStipplePattern);
}
#endif /* defined(VK_KHR_line_rasterization) */
#if defined(VK_KHR_maintenance1)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkTrimCommandPoolKHR (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolTrimFlags   flags)
{
	pfn_vkTrimCommandPoolKHR (device, commandPool, flags);
}
#endif /* defined(VK_KHR_maintenance1) */
#if defined(VK_KHR_maintenance3)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutSupportKHR (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, VkDescriptorSetLayoutSupport *  pSupport)
{
	pfn_vkGetDescriptorSetLayoutSupportKHR (device, pCreateInfo, pSupport);
}
#endif /* defined(VK_KHR_maintenance3) */
#if defined(VK_KHR_maintenance4)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceBufferMemoryRequirementsKHR (VkDevice   device, const  VkDeviceBufferMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetDeviceBufferMemoryRequirementsKHR (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageMemoryRequirementsKHR (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetDeviceImageMemoryRequirementsKHR (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageSparseMemoryRequirementsKHR (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements)
{
	pfn_vkGetDeviceImageSparseMemoryRequirementsKHR (device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif /* defined(VK_KHR_maintenance4) */
#if defined(VK_KHR_maintenance5)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindIndexBuffer2KHR (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkDeviceSize   size, VkIndexType   indexType)
{
	pfn_vkCmdBindIndexBuffer2KHR (commandBuffer, buffer, offset, size, indexType);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageSubresourceLayoutKHR (VkDevice   device, const  VkDeviceImageSubresourceInfoKHR *  pInfo, VkSubresourceLayout2KHR *  pLayout)
{
	pfn_vkGetDeviceImageSubresourceLayoutKHR (device, pInfo, pLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSubresourceLayout2KHR (VkDevice   device, VkImage   image, const  VkImageSubresource2KHR *  pSubresource, VkSubresourceLayout2KHR *  pLayout)
{
	pfn_vkGetImageSubresourceLayout2KHR (device, image, pSubresource, pLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetRenderingAreaGranularityKHR (VkDevice   device, const  VkRenderingAreaInfoKHR *  pRenderingAreaInfo, VkExtent2D *  pGranularity)
{
	pfn_vkGetRenderingAreaGranularityKHR (device, pRenderingAreaInfo, pGranularity);
}
#endif /* defined(VK_KHR_maintenance5) */
#if defined(VK_KHR_maintenance6)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorSets2KHR (VkCommandBuffer   commandBuffer, const  VkBindDescriptorSetsInfoKHR *  pBindDescriptorSetsInfo)
{
	pfn_vkCmdBindDescriptorSets2KHR (commandBuffer, pBindDescriptorSetsInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushConstants2KHR (VkCommandBuffer   commandBuffer, const  VkPushConstantsInfoKHR *  pPushConstantsInfo)
{
	pfn_vkCmdPushConstants2KHR (commandBuffer, pPushConstantsInfo);
}
#endif /* defined(VK_KHR_maintenance6) */
#if defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSet2KHR (VkCommandBuffer   commandBuffer, const  VkPushDescriptorSetInfoKHR *  pPushDescriptorSetInfo)
{
	pfn_vkCmdPushDescriptorSet2KHR (commandBuffer, pPushDescriptorSetInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSetWithTemplate2KHR (VkCommandBuffer   commandBuffer, const  VkPushDescriptorSetWithTemplateInfoKHR *  pPushDescriptorSetWithTemplateInfo)
{
	pfn_vkCmdPushDescriptorSetWithTemplate2KHR (commandBuffer, pPushDescriptorSetWithTemplateInfo);
}
#endif /* defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorBufferEmbeddedSamplers2EXT (VkCommandBuffer   commandBuffer, const  VkBindDescriptorBufferEmbeddedSamplersInfoEXT *  pBindDescriptorBufferEmbeddedSamplersInfo)
{
	pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT (commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDescriptorBufferOffsets2EXT (VkCommandBuffer   commandBuffer, const  VkSetDescriptorBufferOffsetsInfoEXT *  pSetDescriptorBufferOffsetsInfo)
{
	pfn_vkCmdSetDescriptorBufferOffsets2EXT (commandBuffer, pSetDescriptorBufferOffsetsInfo);
}
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_KHR_map_memory2)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMapMemory2KHR (VkDevice   device, const  VkMemoryMapInfoKHR *  pMemoryMapInfo, void **  ppData)
{
	return pfn_vkMapMemory2KHR (device, pMemoryMapInfo, ppData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkUnmapMemory2KHR (VkDevice   device, const  VkMemoryUnmapInfoKHR *  pMemoryUnmapInfo)
{
	return pfn_vkUnmapMemory2KHR (device, pMemoryUnmapInfo);
}
#endif /* defined(VK_KHR_map_memory2) */
#if defined(VK_KHR_performance_query)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireProfilingLockKHR (VkDevice   device, const  VkAcquireProfilingLockInfoKHR *  pInfo)
{
	return pfn_vkAcquireProfilingLockKHR (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, uint32_t *  pCounterCount, VkPerformanceCounterKHR *  pCounters, VkPerformanceCounterDescriptionKHR *  pCounterDescriptions)
{
	return pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR (physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR (VkPhysicalDevice   physicalDevice, const  VkQueryPoolPerformanceCreateInfoKHR *  pPerformanceQueryCreateInfo, uint32_t *  pNumPasses)
{
	pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR (physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkReleaseProfilingLockKHR (VkDevice   device)
{
	pfn_vkReleaseProfilingLockKHR (device);
}
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_pipeline_executable_properties)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineExecutableInternalRepresentationsKHR (VkDevice                          device, const  VkPipelineExecutableInfoKHR *   pExecutableInfo, uint32_t *  pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *  pInternalRepresentations)
{
	return pfn_vkGetPipelineExecutableInternalRepresentationsKHR (device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineExecutablePropertiesKHR (VkDevice                          device, const  VkPipelineInfoKHR *         pPipelineInfo, uint32_t *  pExecutableCount, VkPipelineExecutablePropertiesKHR *  pProperties)
{
	return pfn_vkGetPipelineExecutablePropertiesKHR (device, pPipelineInfo, pExecutableCount, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineExecutableStatisticsKHR (VkDevice                          device, const  VkPipelineExecutableInfoKHR *   pExecutableInfo, uint32_t *  pStatisticCount, VkPipelineExecutableStatisticKHR *  pStatistics)
{
	return pfn_vkGetPipelineExecutableStatisticsKHR (device, pExecutableInfo, pStatisticCount, pStatistics);
}
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_KHR_present_wait)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitForPresentKHR (VkDevice   device, VkSwapchainKHR   swapchain, uint64_t   presentId, uint64_t   timeout)
{
	return pfn_vkWaitForPresentKHR (device, swapchain, presentId, timeout);
}
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_KHR_push_descriptor)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSetKHR (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   set, uint32_t   descriptorWriteCount, const  VkWriteDescriptorSet *  pDescriptorWrites)
{
	pfn_vkCmdPushDescriptorSetKHR (commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
}
#endif /* defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysIndirect2KHR (VkCommandBuffer   commandBuffer, VkDeviceAddress   indirectDeviceAddress)
{
	pfn_vkCmdTraceRaysIndirect2KHR (commandBuffer, indirectDeviceAddress);
}
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_pipeline)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRayTracingPipelineStackSizeKHR (VkCommandBuffer   commandBuffer, uint32_t   pipelineStackSize)
{
	pfn_vkCmdSetRayTracingPipelineStackSizeKHR (commandBuffer, pipelineStackSize);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysIndirectKHR (VkCommandBuffer   commandBuffer, const  VkStridedDeviceAddressRegionKHR *  pRaygenShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pMissShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pHitShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pCallableShaderBindingTable, VkDeviceAddress   indirectDeviceAddress)
{
	pfn_vkCmdTraceRaysIndirectKHR (commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysKHR (VkCommandBuffer   commandBuffer, const  VkStridedDeviceAddressRegionKHR *  pRaygenShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pMissShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pHitShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pCallableShaderBindingTable, uint32_t   width, uint32_t   height, uint32_t   depth)
{
	pfn_vkCmdTraceRaysKHR (commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRayTracingPipelinesKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkRayTracingPipelineCreateInfoKHR *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines)
{
	return pfn_vkCreateRayTracingPipelinesKHR (device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRayTracingCaptureReplayShaderGroupHandlesKHR (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData)
{
	return pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR (device, pipeline, firstGroup, groupCount, dataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRayTracingShaderGroupHandlesKHR (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData)
{
	return pfn_vkGetRayTracingShaderGroupHandlesKHR (device, pipeline, firstGroup, groupCount, dataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkDeviceSize VKAPI_CALL
vkGetRayTracingShaderGroupStackSizeKHR (VkDevice   device, VkPipeline   pipeline, uint32_t   group, VkShaderGroupShaderKHR   groupShader)
{
	return pfn_vkGetRayTracingShaderGroupStackSizeKHR (device, pipeline, group, groupShader);
}
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_sampler_ycbcr_conversion)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSamplerYcbcrConversionKHR (VkDevice   device, const  VkSamplerYcbcrConversionCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSamplerYcbcrConversion *  pYcbcrConversion)
{
	return pfn_vkCreateSamplerYcbcrConversionKHR (device, pCreateInfo, pAllocator, pYcbcrConversion);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySamplerYcbcrConversionKHR (VkDevice   device, VkSamplerYcbcrConversion   ycbcrConversion, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroySamplerYcbcrConversionKHR (device, ycbcrConversion, pAllocator);
}
#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */
#if defined(VK_KHR_shared_presentable_image)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSwapchainStatusKHR (VkDevice   device, VkSwapchainKHR   swapchain)
{
	return pfn_vkGetSwapchainStatusKHR (device, swapchain);
}
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_KHR_surface)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySurfaceKHR (VkInstance   instance, VkSurfaceKHR   surface, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroySurfaceKHR (instance, surface, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceCapabilitiesKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, VkSurfaceCapabilitiesKHR *  pSurfaceCapabilities)
{
	return pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR (physicalDevice, surface, pSurfaceCapabilities);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceFormatsKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pSurfaceFormatCount, VkSurfaceFormatKHR *  pSurfaceFormats)
{
	return pfn_vkGetPhysicalDeviceSurfaceFormatsKHR (physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfacePresentModesKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pPresentModeCount, VkPresentModeKHR *  pPresentModes)
{
	return pfn_vkGetPhysicalDeviceSurfacePresentModesKHR (physicalDevice, surface, pPresentModeCount, pPresentModes);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, VkSurfaceKHR   surface, VkBool32 *  pSupported)
{
	return pfn_vkGetPhysicalDeviceSurfaceSupportKHR (physicalDevice, queueFamilyIndex, surface, pSupported);
}
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_swapchain)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireNextImageKHR (VkDevice   device, VkSwapchainKHR   swapchain, uint64_t   timeout, VkSemaphore   semaphore, VkFence   fence, uint32_t *  pImageIndex)
{
	return pfn_vkAcquireNextImageKHR (device, swapchain, timeout, semaphore, fence, pImageIndex);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSwapchainKHR (VkDevice   device, const  VkSwapchainCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSwapchainKHR *  pSwapchain)
{
	return pfn_vkCreateSwapchainKHR (device, pCreateInfo, pAllocator, pSwapchain);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySwapchainKHR (VkDevice   device, VkSwapchainKHR   swapchain, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroySwapchainKHR (device, swapchain, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSwapchainImagesKHR (VkDevice   device, VkSwapchainKHR   swapchain, uint32_t *  pSwapchainImageCount, VkImage *  pSwapchainImages)
{
	return pfn_vkGetSwapchainImagesKHR (device, swapchain, pSwapchainImageCount, pSwapchainImages);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueuePresentKHR (VkQueue   queue, const  VkPresentInfoKHR *  pPresentInfo)
{
	return pfn_vkQueuePresentKHR (queue, pPresentInfo);
}
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_synchronization2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPipelineBarrier2KHR (VkCommandBuffer                     commandBuffer, const  VkDependencyInfo *                              pDependencyInfo)
{
	pfn_vkCmdPipelineBarrier2KHR (commandBuffer, pDependencyInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetEvent2KHR (VkCommandBuffer                     commandBuffer, VkEvent                                               event, VkPipelineStageFlags2                 stageMask)
{
	pfn_vkCmdResetEvent2KHR (commandBuffer, event, stageMask);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetEvent2KHR (VkCommandBuffer                     commandBuffer, VkEvent                                               event, const  VkDependencyInfo *                              pDependencyInfo)
{
	pfn_vkCmdSetEvent2KHR (commandBuffer, event, pDependencyInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWaitEvents2KHR (VkCommandBuffer                     commandBuffer, uint32_t                                              eventCount, const  VkEvent *                      pEvents, const  VkDependencyInfo *             pDependencyInfos)
{
	pfn_vkCmdWaitEvents2KHR (commandBuffer, eventCount, pEvents, pDependencyInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteTimestamp2KHR (VkCommandBuffer                     commandBuffer, VkPipelineStageFlags2                 stage, VkQueryPool                                           queryPool, uint32_t                                              query)
{
	pfn_vkCmdWriteTimestamp2KHR (commandBuffer, stage, queryPool, query);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSubmit2KHR (VkQueue                             queue, uint32_t                              submitCount, const  VkSubmitInfo2 *               pSubmits, VkFence             fence)
{
	return pfn_vkQueueSubmit2KHR (queue, submitCount, pSubmits, fence);
}
#endif /* defined(VK_KHR_synchronization2) */
#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteBufferMarker2AMD (VkCommandBuffer                     commandBuffer, VkPipelineStageFlags2                 stage, VkBuffer                                              dstBuffer, VkDeviceSize                                          dstOffset, uint32_t                                              marker)
{
	pfn_vkCmdWriteBufferMarker2AMD (commandBuffer, stage, dstBuffer, dstOffset, marker);
}
#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */
#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetQueueCheckpointData2NV (VkQueue   queue, uint32_t *  pCheckpointDataCount, VkCheckpointData2NV *  pCheckpointData)
{
	pfn_vkGetQueueCheckpointData2NV (queue, pCheckpointDataCount, pCheckpointData);
}
#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_KHR_timeline_semaphore)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreCounterValueKHR (VkDevice   device, VkSemaphore   semaphore, uint64_t *  pValue)
{
	return pfn_vkGetSemaphoreCounterValueKHR (device, semaphore, pValue);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSignalSemaphoreKHR (VkDevice   device, const  VkSemaphoreSignalInfo *  pSignalInfo)
{
	return pfn_vkSignalSemaphoreKHR (device, pSignalInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitSemaphoresKHR (VkDevice   device, const  VkSemaphoreWaitInfo *  pWaitInfo, uint64_t   timeout)
{
	return pfn_vkWaitSemaphoresKHR (device, pWaitInfo, timeout);
}
#endif /* defined(VK_KHR_timeline_semaphore) */
#if defined(VK_KHR_video_decode_queue)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDecodeVideoKHR (VkCommandBuffer   commandBuffer, const  VkVideoDecodeInfoKHR *  pDecodeInfo)
{
	pfn_vkCmdDecodeVideoKHR (commandBuffer, pDecodeInfo);
}
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_encode_queue)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEncodeVideoKHR (VkCommandBuffer   commandBuffer, const  VkVideoEncodeInfoKHR *  pEncodeInfo)
{
	pfn_vkCmdEncodeVideoKHR (commandBuffer, pEncodeInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetEncodedVideoSessionParametersKHR (VkDevice   device, const  VkVideoEncodeSessionParametersGetInfoKHR *  pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR *  pFeedbackInfo, size_t *  pDataSize, void *  pData)
{
	return pfn_vkGetEncodedVideoSessionParametersKHR (device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *  pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR *  pQualityLevelProperties)
{
	return pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR (physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
}
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindVideoSessionMemoryKHR (VkDevice   device, VkVideoSessionKHR   videoSession, uint32_t   bindSessionMemoryInfoCount, const  VkBindVideoSessionMemoryInfoKHR *  pBindSessionMemoryInfos)
{
	return pfn_vkBindVideoSessionMemoryKHR (device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginVideoCodingKHR (VkCommandBuffer   commandBuffer, const  VkVideoBeginCodingInfoKHR *  pBeginInfo)
{
	pfn_vkCmdBeginVideoCodingKHR (commandBuffer, pBeginInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdControlVideoCodingKHR (VkCommandBuffer   commandBuffer, const  VkVideoCodingControlInfoKHR *  pCodingControlInfo)
{
	pfn_vkCmdControlVideoCodingKHR (commandBuffer, pCodingControlInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndVideoCodingKHR (VkCommandBuffer   commandBuffer, const  VkVideoEndCodingInfoKHR *  pEndCodingInfo)
{
	pfn_vkCmdEndVideoCodingKHR (commandBuffer, pEndCodingInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateVideoSessionKHR (VkDevice   device, const  VkVideoSessionCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkVideoSessionKHR *  pVideoSession)
{
	return pfn_vkCreateVideoSessionKHR (device, pCreateInfo, pAllocator, pVideoSession);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateVideoSessionParametersKHR (VkDevice   device, const  VkVideoSessionParametersCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkVideoSessionParametersKHR *  pVideoSessionParameters)
{
	return pfn_vkCreateVideoSessionParametersKHR (device, pCreateInfo, pAllocator, pVideoSessionParameters);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyVideoSessionKHR (VkDevice   device, VkVideoSessionKHR   videoSession, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyVideoSessionKHR (device, videoSession, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyVideoSessionParametersKHR (VkDevice   device, VkVideoSessionParametersKHR   videoSessionParameters, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyVideoSessionParametersKHR (device, videoSessionParameters, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceVideoCapabilitiesKHR (VkPhysicalDevice   physicalDevice, const  VkVideoProfileInfoKHR *  pVideoProfile, VkVideoCapabilitiesKHR *  pCapabilities)
{
	return pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR (physicalDevice, pVideoProfile, pCapabilities);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceVideoFormatPropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceVideoFormatInfoKHR *  pVideoFormatInfo, uint32_t *  pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR *  pVideoFormatProperties)
{
	return pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR (physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetVideoSessionMemoryRequirementsKHR (VkDevice   device, VkVideoSessionKHR   videoSession, uint32_t *  pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR *  pMemoryRequirements)
{
	return pfn_vkGetVideoSessionMemoryRequirementsKHR (device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkUpdateVideoSessionParametersKHR (VkDevice   device, VkVideoSessionParametersKHR   videoSessionParameters, const  VkVideoSessionParametersUpdateInfoKHR *  pUpdateInfo)
{
	return pfn_vkUpdateVideoSessionParametersKHR (device, videoSessionParameters, pUpdateInfo);
}
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_wayland_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateWaylandSurfaceKHR (VkInstance   instance, const  VkWaylandSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateWaylandSurfaceKHR (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceWaylandPresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, struct  wl_display *  display)
{
	return pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR (physicalDevice, queueFamilyIndex, display);
}
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_win32_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateWin32SurfaceKHR (VkInstance   instance, const  VkWin32SurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateWin32SurfaceKHR (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceWin32PresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex)
{
	return pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR (physicalDevice, queueFamilyIndex);
}
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_KHR_xcb_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateXcbSurfaceKHR (VkInstance   instance, const  VkXcbSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateXcbSurfaceKHR (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceXcbPresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, xcb_connection_t *  connection, xcb_visualid_t   visual_id)
{
	return pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR (physicalDevice, queueFamilyIndex, connection, visual_id);
}
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_xlib_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateXlibSurfaceKHR (VkInstance   instance, const  VkXlibSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateXlibSurfaceKHR (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceXlibPresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, Display *  dpy, VisualID   visualID)
{
	return pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR (physicalDevice, queueFamilyIndex, dpy, visualID);
}
#endif /* defined(VK_KHR_xlib_surface) */
#if defined(VK_MVK_ios_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateIOSSurfaceMVK (VkInstance   instance, const  VkIOSSurfaceCreateInfoMVK *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateIOSSurfaceMVK (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MVK_macos_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateMacOSSurfaceMVK (VkInstance   instance, const  VkMacOSSurfaceCreateInfoMVK *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateMacOSSurfaceMVK (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_NN_vi_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateViSurfaceNN (VkInstance   instance, const  VkViSurfaceCreateInfoNN *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateViSurfaceNN (instance, pCreateInfo, pAllocator, pSurface);
}
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_NVX_binary_import)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCuLaunchKernelNVX (VkCommandBuffer   commandBuffer, const  VkCuLaunchInfoNVX *  pLaunchInfo)
{
	pfn_vkCmdCuLaunchKernelNVX (commandBuffer, pLaunchInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCuFunctionNVX (VkDevice   device, const  VkCuFunctionCreateInfoNVX *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCuFunctionNVX *  pFunction)
{
	return pfn_vkCreateCuFunctionNVX (device, pCreateInfo, pAllocator, pFunction);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCuModuleNVX (VkDevice   device, const  VkCuModuleCreateInfoNVX *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCuModuleNVX *  pModule)
{
	return pfn_vkCreateCuModuleNVX (device, pCreateInfo, pAllocator, pModule);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCuFunctionNVX (VkDevice   device, VkCuFunctionNVX   function, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyCuFunctionNVX (device, function, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCuModuleNVX (VkDevice   device, VkCuModuleNVX   module, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyCuModuleNVX (device, module, pAllocator);
}
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NVX_image_view_handle)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageViewAddressNVX (VkDevice   device, VkImageView   imageView, VkImageViewAddressPropertiesNVX *  pProperties)
{
	return pfn_vkGetImageViewAddressNVX (device, imageView, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR uint32_t VKAPI_CALL
vkGetImageViewHandleNVX (VkDevice   device, const  VkImageViewHandleInfoNVX *  pInfo)
{
	return pfn_vkGetImageViewHandleNVX (device, pInfo);
}
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_NV_acquire_winrt_display)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireWinrtDisplayNV (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display)
{
	return pfn_vkAcquireWinrtDisplayNV (physicalDevice, display);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetWinrtDisplayNV (VkPhysicalDevice   physicalDevice, uint32_t   deviceRelativeId, VkDisplayKHR *  pDisplay)
{
	return pfn_vkGetWinrtDisplayNV (physicalDevice, deviceRelativeId, pDisplay);
}
#endif /* defined(VK_NV_acquire_winrt_display) */
#if defined(VK_NV_clip_space_w_scaling)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWScalingNV (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewportWScalingNV *  pViewportWScalings)
{
	pfn_vkCmdSetViewportWScalingNV (commandBuffer, firstViewport, viewportCount, pViewportWScalings);
}
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_NV_cooperative_matrix)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkCooperativeMatrixPropertiesNV *  pProperties)
{
	return pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (physicalDevice, pPropertyCount, pProperties);
}
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_copy_memory_indirect)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryIndirectNV (VkCommandBuffer   commandBuffer, VkDeviceAddress   copyBufferAddress, uint32_t   copyCount, uint32_t   stride)
{
	pfn_vkCmdCopyMemoryIndirectNV (commandBuffer, copyBufferAddress, copyCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryToImageIndirectNV (VkCommandBuffer   commandBuffer, VkDeviceAddress   copyBufferAddress, uint32_t   copyCount, uint32_t   stride, VkImage   dstImage, VkImageLayout   dstImageLayout, const  VkImageSubresourceLayers *  pImageSubresources)
{
	pfn_vkCmdCopyMemoryToImageIndirectNV (commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
}
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_coverage_reduction_mode)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (VkPhysicalDevice   physicalDevice, uint32_t *  pCombinationCount, VkFramebufferMixedSamplesCombinationNV *  pCombinations)
{
	return pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (physicalDevice, pCombinationCount, pCombinations);
}
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_NV_cuda_kernel_launch)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCudaLaunchKernelNV (VkCommandBuffer   commandBuffer, const  VkCudaLaunchInfoNV *  pLaunchInfo)
{
	pfn_vkCmdCudaLaunchKernelNV (commandBuffer, pLaunchInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCudaFunctionNV (VkDevice   device, const  VkCudaFunctionCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCudaFunctionNV *  pFunction)
{
	return pfn_vkCreateCudaFunctionNV (device, pCreateInfo, pAllocator, pFunction);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCudaModuleNV (VkDevice   device, const  VkCudaModuleCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCudaModuleNV *  pModule)
{
	return pfn_vkCreateCudaModuleNV (device, pCreateInfo, pAllocator, pModule);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCudaFunctionNV (VkDevice   device, VkCudaFunctionNV   function, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyCudaFunctionNV (device, function, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCudaModuleNV (VkDevice   device, VkCudaModuleNV   module, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyCudaModuleNV (device, module, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetCudaModuleCacheNV (VkDevice   device, VkCudaModuleNV   module, size_t *  pCacheSize, void *  pCacheData)
{
	return pfn_vkGetCudaModuleCacheNV (device, module, pCacheSize, pCacheData);
}
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_NV_device_diagnostic_checkpoints)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCheckpointNV (VkCommandBuffer   commandBuffer, const  void *  pCheckpointMarker)
{
	pfn_vkCmdSetCheckpointNV (commandBuffer, pCheckpointMarker);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetQueueCheckpointDataNV (VkQueue   queue, uint32_t *  pCheckpointDataCount, VkCheckpointDataNV *  pCheckpointData)
{
	pfn_vkGetQueueCheckpointDataNV (queue, pCheckpointDataCount, pCheckpointData);
}
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_NV_device_generated_commands)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindPipelineShaderGroupNV (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipeline   pipeline, uint32_t   groupIndex)
{
	pfn_vkCmdBindPipelineShaderGroupNV (commandBuffer, pipelineBindPoint, pipeline, groupIndex);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdExecuteGeneratedCommandsNV (VkCommandBuffer   commandBuffer, VkBool32   isPreprocessed, const  VkGeneratedCommandsInfoNV *  pGeneratedCommandsInfo)
{
	pfn_vkCmdExecuteGeneratedCommandsNV (commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPreprocessGeneratedCommandsNV (VkCommandBuffer   commandBuffer, const  VkGeneratedCommandsInfoNV *  pGeneratedCommandsInfo)
{
	pfn_vkCmdPreprocessGeneratedCommandsNV (commandBuffer, pGeneratedCommandsInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateIndirectCommandsLayoutNV (VkDevice   device, const  VkIndirectCommandsLayoutCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkIndirectCommandsLayoutNV *  pIndirectCommandsLayout)
{
	return pfn_vkCreateIndirectCommandsLayoutNV (device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyIndirectCommandsLayoutNV (VkDevice   device, VkIndirectCommandsLayoutNV   indirectCommandsLayout, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyIndirectCommandsLayoutNV (device, indirectCommandsLayout, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetGeneratedCommandsMemoryRequirementsNV (VkDevice   device, const  VkGeneratedCommandsMemoryRequirementsInfoNV *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetGeneratedCommandsMemoryRequirementsNV (device, pInfo, pMemoryRequirements);
}
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_NV_device_generated_commands_compute)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdUpdatePipelineIndirectBufferNV (VkCommandBuffer   commandBuffer, VkPipelineBindPoint             pipelineBindPoint, VkPipeline                      pipeline)
{
	pfn_vkCmdUpdatePipelineIndirectBufferNV (commandBuffer, pipelineBindPoint, pipeline);
}
extern "C"
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetPipelineIndirectDeviceAddressNV (VkDevice   device, const  VkPipelineIndirectDeviceAddressInfoNV *  pInfo)
{
	return pfn_vkGetPipelineIndirectDeviceAddressNV (device, pInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPipelineIndirectMemoryRequirementsNV (VkDevice   device, const  VkComputePipelineCreateInfo *  pCreateInfo, VkMemoryRequirements2 *  pMemoryRequirements)
{
	pfn_vkGetPipelineIndirectMemoryRequirementsNV (device, pCreateInfo, pMemoryRequirements);
}
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_NV_external_memory_capabilities)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceExternalImageFormatPropertiesNV (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkImageTiling   tiling, VkImageUsageFlags   usage, VkImageCreateFlags   flags, VkExternalMemoryHandleTypeFlagsNV   externalHandleType, VkExternalImageFormatPropertiesNV *  pExternalImageFormatProperties)
{
	return pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV (physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
}
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_NV_external_memory_rdma)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryRemoteAddressNV (VkDevice   device, const  VkMemoryGetRemoteAddressInfoNV *  pMemoryGetRemoteAddressInfo, VkRemoteAddressNV *  pAddress)
{
	return pfn_vkGetMemoryRemoteAddressNV (device, pMemoryGetRemoteAddressInfo, pAddress);
}
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_NV_external_memory_win32)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryWin32HandleNV (VkDevice   device, VkDeviceMemory   memory, VkExternalMemoryHandleTypeFlagsNV   handleType, HANDLE *  pHandle)
{
	return pfn_vkGetMemoryWin32HandleNV (device, memory, handleType, pHandle);
}
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_NV_fragment_shading_rate_enums)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFragmentShadingRateEnumNV (VkCommandBuffer             commandBuffer, VkFragmentShadingRateNV                       shadingRate, const  VkFragmentShadingRateCombinerOpKHR      combinerOps [2])
{
	pfn_vkCmdSetFragmentShadingRateEnumNV (commandBuffer, shadingRate, combinerOps);
}
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_NV_low_latency2)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetLatencyTimingsNV (VkDevice   device, VkSwapchainKHR   swapchain, VkGetLatencyMarkerInfoNV *  pLatencyMarkerInfo)
{
	pfn_vkGetLatencyTimingsNV (device, swapchain, pLatencyMarkerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkLatencySleepNV (VkDevice   device, VkSwapchainKHR   swapchain, const  VkLatencySleepInfoNV *  pSleepInfo)
{
	return pfn_vkLatencySleepNV (device, swapchain, pSleepInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueNotifyOutOfBandNV (VkQueue   queue, const  VkOutOfBandQueueTypeInfoNV *  pQueueTypeInfo)
{
	pfn_vkQueueNotifyOutOfBandNV (queue, pQueueTypeInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetLatencyMarkerNV (VkDevice   device, VkSwapchainKHR   swapchain, const  VkSetLatencyMarkerInfoNV *  pLatencyMarkerInfo)
{
	pfn_vkSetLatencyMarkerNV (device, swapchain, pLatencyMarkerInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetLatencySleepModeNV (VkDevice   device, VkSwapchainKHR   swapchain, const  VkLatencySleepModeInfoNV *  pSleepModeInfo)
{
	return pfn_vkSetLatencySleepModeNV (device, swapchain, pSleepModeInfo);
}
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_memory_decompression)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDecompressMemoryIndirectCountNV (VkCommandBuffer   commandBuffer, VkDeviceAddress   indirectCommandsAddress, VkDeviceAddress   indirectCommandsCountAddress, uint32_t   stride)
{
	pfn_vkCmdDecompressMemoryIndirectCountNV (commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDecompressMemoryNV (VkCommandBuffer   commandBuffer, uint32_t   decompressRegionCount, const  VkDecompressMemoryRegionNV *  pDecompressMemoryRegions)
{
	pfn_vkCmdDecompressMemoryNV (commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
}
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_mesh_shader)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectCountNV (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride)
{
	pfn_vkCmdDrawMeshTasksIndirectCountNV (commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectNV (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride)
{
	pfn_vkCmdDrawMeshTasksIndirectNV (commandBuffer, buffer, offset, drawCount, stride);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksNV (VkCommandBuffer   commandBuffer, uint32_t   taskCount, uint32_t   firstTask)
{
	pfn_vkCmdDrawMeshTasksNV (commandBuffer, taskCount, firstTask);
}
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_NV_optical_flow)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindOpticalFlowSessionImageNV (VkDevice   device, VkOpticalFlowSessionNV   session, VkOpticalFlowSessionBindingPointNV   bindingPoint, VkImageView   view, VkImageLayout   layout)
{
	return pfn_vkBindOpticalFlowSessionImageNV (device, session, bindingPoint, view, layout);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdOpticalFlowExecuteNV (VkCommandBuffer   commandBuffer, VkOpticalFlowSessionNV   session, const  VkOpticalFlowExecuteInfoNV *  pExecuteInfo)
{
	pfn_vkCmdOpticalFlowExecuteNV (commandBuffer, session, pExecuteInfo);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateOpticalFlowSessionNV (VkDevice   device, const  VkOpticalFlowSessionCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkOpticalFlowSessionNV *  pSession)
{
	return pfn_vkCreateOpticalFlowSessionNV (device, pCreateInfo, pAllocator, pSession);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyOpticalFlowSessionNV (VkDevice   device, VkOpticalFlowSessionNV   session, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyOpticalFlowSessionNV (device, session, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceOpticalFlowImageFormatsNV (VkPhysicalDevice   physicalDevice, const  VkOpticalFlowImageFormatInfoNV *  pOpticalFlowImageFormatInfo, uint32_t *  pFormatCount, VkOpticalFlowImageFormatPropertiesNV *  pImageFormatProperties)
{
	return pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV (physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
}
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_ray_tracing)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindAccelerationStructureMemoryNV (VkDevice   device, uint32_t   bindInfoCount, const  VkBindAccelerationStructureMemoryInfoNV *  pBindInfos)
{
	return pfn_vkBindAccelerationStructureMemoryNV (device, bindInfoCount, pBindInfos);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildAccelerationStructureNV (VkCommandBuffer   commandBuffer, const  VkAccelerationStructureInfoNV *  pInfo, VkBuffer   instanceData, VkDeviceSize   instanceOffset, VkBool32   update, VkAccelerationStructureNV   dst, VkAccelerationStructureNV   src, VkBuffer   scratch, VkDeviceSize   scratchOffset)
{
	pfn_vkCmdBuildAccelerationStructureNV (commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyAccelerationStructureNV (VkCommandBuffer   commandBuffer, VkAccelerationStructureNV   dst, VkAccelerationStructureNV   src, VkCopyAccelerationStructureModeKHR   mode)
{
	pfn_vkCmdCopyAccelerationStructureNV (commandBuffer, dst, src, mode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysNV (VkCommandBuffer   commandBuffer, VkBuffer   raygenShaderBindingTableBuffer, VkDeviceSize   raygenShaderBindingOffset, VkBuffer   missShaderBindingTableBuffer, VkDeviceSize   missShaderBindingOffset, VkDeviceSize   missShaderBindingStride, VkBuffer   hitShaderBindingTableBuffer, VkDeviceSize   hitShaderBindingOffset, VkDeviceSize   hitShaderBindingStride, VkBuffer   callableShaderBindingTableBuffer, VkDeviceSize   callableShaderBindingOffset, VkDeviceSize   callableShaderBindingStride, uint32_t   width, uint32_t   height, uint32_t   depth)
{
	pfn_vkCmdTraceRaysNV (commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteAccelerationStructuresPropertiesNV (VkCommandBuffer   commandBuffer, uint32_t   accelerationStructureCount, const  VkAccelerationStructureNV *  pAccelerationStructures, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery)
{
	pfn_vkCmdWriteAccelerationStructuresPropertiesNV (commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCompileDeferredNV (VkDevice   device, VkPipeline   pipeline, uint32_t   shader)
{
	return pfn_vkCompileDeferredNV (device, pipeline, shader);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateAccelerationStructureNV (VkDevice   device, const  VkAccelerationStructureCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkAccelerationStructureNV *  pAccelerationStructure)
{
	return pfn_vkCreateAccelerationStructureNV (device, pCreateInfo, pAllocator, pAccelerationStructure);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRayTracingPipelinesNV (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkRayTracingPipelineCreateInfoNV *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines)
{
	return pfn_vkCreateRayTracingPipelinesNV (device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyAccelerationStructureNV (VkDevice   device, VkAccelerationStructureNV   accelerationStructure, const  VkAllocationCallbacks *  pAllocator)
{
	pfn_vkDestroyAccelerationStructureNV (device, accelerationStructure, pAllocator);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetAccelerationStructureHandleNV (VkDevice   device, VkAccelerationStructureNV   accelerationStructure, size_t   dataSize, void *  pData)
{
	return pfn_vkGetAccelerationStructureHandleNV (device, accelerationStructure, dataSize, pData);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetAccelerationStructureMemoryRequirementsNV (VkDevice   device, const  VkAccelerationStructureMemoryRequirementsInfoNV *  pInfo, VkMemoryRequirements2KHR *  pMemoryRequirements)
{
	pfn_vkGetAccelerationStructureMemoryRequirementsNV (device, pInfo, pMemoryRequirements);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRayTracingShaderGroupHandlesNV (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData)
{
	return pfn_vkGetRayTracingShaderGroupHandlesNV (device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetExclusiveScissorEnableNV (VkCommandBuffer   commandBuffer, uint32_t   firstExclusiveScissor, uint32_t   exclusiveScissorCount, const  VkBool32 *  pExclusiveScissorEnables)
{
	pfn_vkCmdSetExclusiveScissorEnableNV (commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
}
#endif /* defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2 */
#if defined(VK_NV_scissor_exclusive)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetExclusiveScissorNV (VkCommandBuffer   commandBuffer, uint32_t   firstExclusiveScissor, uint32_t   exclusiveScissorCount, const  VkRect2D *  pExclusiveScissors)
{
	pfn_vkCmdSetExclusiveScissorNV (commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
}
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_shading_rate_image)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindShadingRateImageNV (VkCommandBuffer   commandBuffer, VkImageView   imageView, VkImageLayout   imageLayout)
{
	pfn_vkCmdBindShadingRateImageNV (commandBuffer, imageView, imageLayout);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoarseSampleOrderNV (VkCommandBuffer   commandBuffer, VkCoarseSampleOrderTypeNV   sampleOrderType, uint32_t   customSampleOrderCount, const  VkCoarseSampleOrderCustomNV *  pCustomSampleOrders)
{
	pfn_vkCmdSetCoarseSampleOrderNV (commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportShadingRatePaletteNV (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkShadingRatePaletteNV *  pShadingRatePalettes)
{
	pfn_vkCmdSetViewportShadingRatePaletteNV (commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
}
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_QCOM_tile_properties)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDynamicRenderingTilePropertiesQCOM (VkDevice   device, const  VkRenderingInfo *  pRenderingInfo, VkTilePropertiesQCOM *  pProperties)
{
	return pfn_vkGetDynamicRenderingTilePropertiesQCOM (device, pRenderingInfo, pProperties);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFramebufferTilePropertiesQCOM (VkDevice   device, VkFramebuffer   framebuffer, uint32_t *  pPropertiesCount, VkTilePropertiesQCOM *  pProperties)
{
	return pfn_vkGetFramebufferTilePropertiesQCOM (device, framebuffer, pPropertiesCount, pProperties);
}
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_QNX_external_memory_screen_buffer)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetScreenBufferPropertiesQNX (VkDevice   device, const struct  _screen_buffer *  buffer, VkScreenBufferPropertiesQNX *  pProperties)
{
	return pfn_vkGetScreenBufferPropertiesQNX (device, buffer, pProperties);
}
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_QNX_screen_surface)
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateScreenSurfaceQNX (VkInstance   instance, const  VkScreenSurfaceCreateInfoQNX *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface)
{
	return pfn_vkCreateScreenSurfaceQNX (instance, pCreateInfo, pAllocator, pSurface);
}
extern "C"
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceScreenPresentationSupportQNX (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, struct  _screen_window *  window)
{
	return pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX (physicalDevice, queueFamilyIndex, window);
}
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetHostMappingVALVE (VkDevice   device, VkDescriptorSet   descriptorSet, void **  ppData)
{
	pfn_vkGetDescriptorSetHostMappingVALVE (device, descriptorSet, ppData);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutHostMappingInfoVALVE (VkDevice   device, const  VkDescriptorSetBindingReferenceVALVE *  pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE *  pHostMapping)
{
	pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE (device, pBindingReference, pHostMapping);
}
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindVertexBuffers2EXT (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes, const  VkDeviceSize *  pStrides)
{
	pfn_vkCmdBindVertexBuffers2EXT (commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCullModeEXT (VkCommandBuffer   commandBuffer, VkCullModeFlags   cullMode)
{
	pfn_vkCmdSetCullModeEXT (commandBuffer, cullMode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBoundsTestEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthBoundsTestEnable)
{
	pfn_vkCmdSetDepthBoundsTestEnableEXT (commandBuffer, depthBoundsTestEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthCompareOpEXT (VkCommandBuffer   commandBuffer, VkCompareOp   depthCompareOp)
{
	pfn_vkCmdSetDepthCompareOpEXT (commandBuffer, depthCompareOp);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthTestEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthTestEnable)
{
	pfn_vkCmdSetDepthTestEnableEXT (commandBuffer, depthTestEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthWriteEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthWriteEnable)
{
	pfn_vkCmdSetDepthWriteEnableEXT (commandBuffer, depthWriteEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFrontFaceEXT (VkCommandBuffer   commandBuffer, VkFrontFace   frontFace)
{
	pfn_vkCmdSetFrontFaceEXT (commandBuffer, frontFace);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveTopologyEXT (VkCommandBuffer   commandBuffer, VkPrimitiveTopology   primitiveTopology)
{
	pfn_vkCmdSetPrimitiveTopologyEXT (commandBuffer, primitiveTopology);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetScissorWithCountEXT (VkCommandBuffer   commandBuffer, uint32_t   scissorCount, const  VkRect2D *  pScissors)
{
	pfn_vkCmdSetScissorWithCountEXT (commandBuffer, scissorCount, pScissors);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilOpEXT (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, VkStencilOp   failOp, VkStencilOp   passOp, VkStencilOp   depthFailOp, VkCompareOp   compareOp)
{
	pfn_vkCmdSetStencilOpEXT (commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilTestEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   stencilTestEnable)
{
	pfn_vkCmdSetStencilTestEnableEXT (commandBuffer, stencilTestEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWithCountEXT (VkCommandBuffer   commandBuffer, uint32_t   viewportCount, const  VkViewport *  pViewports)
{
	pfn_vkCmdSetViewportWithCountEXT (commandBuffer, viewportCount, pViewports);
}
#endif /* (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBiasEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthBiasEnable)
{
	pfn_vkCmdSetDepthBiasEnableEXT (commandBuffer, depthBiasEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLogicOpEXT (VkCommandBuffer   commandBuffer, VkLogicOp   logicOp)
{
	pfn_vkCmdSetLogicOpEXT (commandBuffer, logicOp);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPatchControlPointsEXT (VkCommandBuffer   commandBuffer, uint32_t   patchControlPoints)
{
	pfn_vkCmdSetPatchControlPointsEXT (commandBuffer, patchControlPoints);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveRestartEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   primitiveRestartEnable)
{
	pfn_vkCmdSetPrimitiveRestartEnableEXT (commandBuffer, primitiveRestartEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizerDiscardEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   rasterizerDiscardEnable)
{
	pfn_vkCmdSetRasterizerDiscardEnableEXT (commandBuffer, rasterizerDiscardEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetAlphaToCoverageEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   alphaToCoverageEnable)
{
	pfn_vkCmdSetAlphaToCoverageEnableEXT (commandBuffer, alphaToCoverageEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetAlphaToOneEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   alphaToOneEnable)
{
	pfn_vkCmdSetAlphaToOneEnableEXT (commandBuffer, alphaToOneEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorBlendEnableEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkBool32 *  pColorBlendEnables)
{
	pfn_vkCmdSetColorBlendEnableEXT (commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorBlendEquationEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkColorBlendEquationEXT *  pColorBlendEquations)
{
	pfn_vkCmdSetColorBlendEquationEXT (commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorWriteMaskEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkColorComponentFlags *  pColorWriteMasks)
{
	pfn_vkCmdSetColorWriteMaskEXT (commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthClampEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthClampEnable)
{
	pfn_vkCmdSetDepthClampEnableEXT (commandBuffer, depthClampEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLogicOpEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   logicOpEnable)
{
	pfn_vkCmdSetLogicOpEnableEXT (commandBuffer, logicOpEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPolygonModeEXT (VkCommandBuffer   commandBuffer, VkPolygonMode   polygonMode)
{
	pfn_vkCmdSetPolygonModeEXT (commandBuffer, polygonMode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizationSamplesEXT (VkCommandBuffer   commandBuffer, VkSampleCountFlagBits    rasterizationSamples)
{
	pfn_vkCmdSetRasterizationSamplesEXT (commandBuffer, rasterizationSamples);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetSampleMaskEXT (VkCommandBuffer   commandBuffer, VkSampleCountFlagBits    samples, const  VkSampleMask *     pSampleMask)
{
	pfn_vkCmdSetSampleMaskEXT (commandBuffer, samples, pSampleMask);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetTessellationDomainOriginEXT (VkCommandBuffer   commandBuffer, VkTessellationDomainOrigin   domainOrigin)
{
	pfn_vkCmdSetTessellationDomainOriginEXT (commandBuffer, domainOrigin);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizationStreamEXT (VkCommandBuffer   commandBuffer, uint32_t   rasterizationStream)
{
	pfn_vkCmdSetRasterizationStreamEXT (commandBuffer, rasterizationStream);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetConservativeRasterizationModeEXT (VkCommandBuffer   commandBuffer, VkConservativeRasterizationModeEXT   conservativeRasterizationMode)
{
	pfn_vkCmdSetConservativeRasterizationModeEXT (commandBuffer, conservativeRasterizationMode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetExtraPrimitiveOverestimationSizeEXT (VkCommandBuffer   commandBuffer, float   extraPrimitiveOverestimationSize)
{
	pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT (commandBuffer, extraPrimitiveOverestimationSize);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthClipEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthClipEnable)
{
	pfn_vkCmdSetDepthClipEnableEXT (commandBuffer, depthClipEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetSampleLocationsEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   sampleLocationsEnable)
{
	pfn_vkCmdSetSampleLocationsEnableEXT (commandBuffer, sampleLocationsEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorBlendAdvancedEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkColorBlendAdvancedEXT *  pColorBlendAdvanced)
{
	pfn_vkCmdSetColorBlendAdvancedEXT (commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetProvokingVertexModeEXT (VkCommandBuffer   commandBuffer, VkProvokingVertexModeEXT   provokingVertexMode)
{
	pfn_vkCmdSetProvokingVertexModeEXT (commandBuffer, provokingVertexMode);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineRasterizationModeEXT (VkCommandBuffer   commandBuffer, VkLineRasterizationModeEXT   lineRasterizationMode)
{
	pfn_vkCmdSetLineRasterizationModeEXT (commandBuffer, lineRasterizationMode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineStippleEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   stippledLineEnable)
{
	pfn_vkCmdSetLineStippleEnableEXT (commandBuffer, stippledLineEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthClipNegativeOneToOneEXT (VkCommandBuffer   commandBuffer, VkBool32   negativeOneToOne)
{
	pfn_vkCmdSetDepthClipNegativeOneToOneEXT (commandBuffer, negativeOneToOne);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWScalingEnableNV (VkCommandBuffer   commandBuffer, VkBool32   viewportWScalingEnable)
{
	pfn_vkCmdSetViewportWScalingEnableNV (commandBuffer, viewportWScalingEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportSwizzleNV (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewportSwizzleNV *  pViewportSwizzles)
{
	pfn_vkCmdSetViewportSwizzleNV (commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageToColorEnableNV (VkCommandBuffer   commandBuffer, VkBool32   coverageToColorEnable)
{
	pfn_vkCmdSetCoverageToColorEnableNV (commandBuffer, coverageToColorEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageToColorLocationNV (VkCommandBuffer   commandBuffer, uint32_t   coverageToColorLocation)
{
	pfn_vkCmdSetCoverageToColorLocationNV (commandBuffer, coverageToColorLocation);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageModulationModeNV (VkCommandBuffer   commandBuffer, VkCoverageModulationModeNV   coverageModulationMode)
{
	pfn_vkCmdSetCoverageModulationModeNV (commandBuffer, coverageModulationMode);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageModulationTableEnableNV (VkCommandBuffer   commandBuffer, VkBool32   coverageModulationTableEnable)
{
	pfn_vkCmdSetCoverageModulationTableEnableNV (commandBuffer, coverageModulationTableEnable);
}
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageModulationTableNV (VkCommandBuffer   commandBuffer, uint32_t   coverageModulationTableCount, const  float *  pCoverageModulationTable)
{
	pfn_vkCmdSetCoverageModulationTableNV (commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetShadingRateImageEnableNV (VkCommandBuffer   commandBuffer, VkBool32   shadingRateImageEnable)
{
	pfn_vkCmdSetShadingRateImageEnableNV (commandBuffer, shadingRateImageEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRepresentativeFragmentTestEnableNV (VkCommandBuffer   commandBuffer, VkBool32   representativeFragmentTestEnable)
{
	pfn_vkCmdSetRepresentativeFragmentTestEnableNV (commandBuffer, representativeFragmentTestEnable);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageReductionModeNV (VkCommandBuffer   commandBuffer, VkCoverageReductionModeNV   coverageReductionMode)
{
	pfn_vkCmdSetCoverageReductionModeNV (commandBuffer, coverageReductionMode);
}
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */
#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceGroupSurfacePresentModes2EXT (VkDevice   device, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR *  pModes)
{
	return pfn_vkGetDeviceGroupSurfacePresentModes2EXT (device, pSurfaceInfo, pModes);
}
#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */
#if (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSubresourceLayout2EXT (VkDevice   device, VkImage   image, const  VkImageSubresource2KHR *  pSubresource, VkSubresourceLayout2KHR *  pLayout)
{
	pfn_vkGetImageSubresourceLayout2EXT (device, image, pSubresource, pLayout);
}
#endif /* (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control)) */
#if (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetVertexInputEXT (VkCommandBuffer   commandBuffer, uint32_t   vertexBindingDescriptionCount, const  VkVertexInputBindingDescription2EXT *  pVertexBindingDescriptions, uint32_t   vertexAttributeDescriptionCount, const  VkVertexInputAttributeDescription2EXT *  pVertexAttributeDescriptions)
{
	pfn_vkCmdSetVertexInputEXT (commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
}
#endif /* (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state)) */
#if (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template))
extern "C"
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSetWithTemplateKHR (VkCommandBuffer   commandBuffer, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, VkPipelineLayout   layout, uint32_t   set, const  void *  pData)
{
	pfn_vkCmdPushDescriptorSetWithTemplateKHR (commandBuffer, descriptorUpdateTemplate, layout, set, pData);
}
#endif /* (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceGroupPresentCapabilitiesKHR (VkDevice   device, VkDeviceGroupPresentCapabilitiesKHR *  pDeviceGroupPresentCapabilities)
{
	return pfn_vkGetDeviceGroupPresentCapabilitiesKHR (device, pDeviceGroupPresentCapabilities);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceGroupSurfacePresentModesKHR (VkDevice   device, VkSurfaceKHR   surface, VkDeviceGroupPresentModeFlagsKHR *  pModes)
{
	return pfn_vkGetDeviceGroupSurfacePresentModesKHR (device, surface, pModes);
}
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDevicePresentRectanglesKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pRectCount, VkRect2D *  pRects)
{
	return pfn_vkGetPhysicalDevicePresentRectanglesKHR (physicalDevice, surface, pRectCount, pRects);
}
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
extern "C"
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireNextImage2KHR (VkDevice   device, const  VkAcquireNextImageInfoKHR *  pAcquireInfo, uint32_t *  pImageIndex)
{
	return pfn_vkAcquireNextImage2KHR (device, pAcquireInfo, pImageIndex);
}
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
/* VKFW_GEN_PROTOTYPES_C */
