/**
 * Vulkan functions. Generated by gen_vkfunctions.py
 * Copyright (C) 2024  dbstream
 */
#ifndef VKFW_H
#warning VKFW: do not include <VKFW/vk_functions.h> directly. Include <VKFW/vkfw.h> instead.
#endif

/* VKFW_GEN_PROTOTYPES_H */
#if defined(VK_VERSION_1_0)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAllocateCommandBuffers (VkDevice   device, const  VkCommandBufferAllocateInfo *  pAllocateInfo, VkCommandBuffer *  pCommandBuffers);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAllocateDescriptorSets (VkDevice   device, const  VkDescriptorSetAllocateInfo *  pAllocateInfo, VkDescriptorSet *  pDescriptorSets);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAllocateMemory (VkDevice   device, const  VkMemoryAllocateInfo *  pAllocateInfo, const  VkAllocationCallbacks *  pAllocator, VkDeviceMemory *  pMemory);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBeginCommandBuffer (VkCommandBuffer   commandBuffer, const  VkCommandBufferBeginInfo *  pBeginInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindBufferMemory (VkDevice   device, VkBuffer   buffer, VkDeviceMemory   memory, VkDeviceSize   memoryOffset);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindImageMemory (VkDevice   device, VkImage   image, VkDeviceMemory   memory, VkDeviceSize   memoryOffset);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginQuery (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, VkQueryControlFlags   flags);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderPass (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *  pRenderPassBegin, VkSubpassContents   contents);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorSets (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   firstSet, uint32_t   descriptorSetCount, const  VkDescriptorSet *  pDescriptorSets, uint32_t   dynamicOffsetCount, const  uint32_t *  pDynamicOffsets);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindIndexBuffer (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkIndexType   indexType);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindPipeline (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipeline   pipeline);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindVertexBuffers (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBlitImage (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageBlit *  pRegions, VkFilter   filter);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdClearAttachments (VkCommandBuffer   commandBuffer, uint32_t   attachmentCount, const  VkClearAttachment *  pAttachments, uint32_t   rectCount, const  VkClearRect *  pRects);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdClearColorImage (VkCommandBuffer   commandBuffer, VkImage   image, VkImageLayout   imageLayout, const  VkClearColorValue *  pColor, uint32_t   rangeCount, const  VkImageSubresourceRange *  pRanges);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdClearDepthStencilImage (VkCommandBuffer   commandBuffer, VkImage   image, VkImageLayout   imageLayout, const  VkClearDepthStencilValue *  pDepthStencil, uint32_t   rangeCount, const  VkImageSubresourceRange *  pRanges);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBuffer (VkCommandBuffer   commandBuffer, VkBuffer   srcBuffer, VkBuffer   dstBuffer, uint32_t   regionCount, const  VkBufferCopy *  pRegions);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBufferToImage (VkCommandBuffer   commandBuffer, VkBuffer   srcBuffer, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkBufferImageCopy *  pRegions);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImage (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageCopy *  pRegions);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImageToBuffer (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkBuffer   dstBuffer, uint32_t   regionCount, const  VkBufferImageCopy *  pRegions);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyQueryPoolResults (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   stride, VkQueryResultFlags   flags);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatch (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchIndirect (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDraw (VkCommandBuffer   commandBuffer, uint32_t   vertexCount, uint32_t   instanceCount, uint32_t   firstVertex, uint32_t   firstInstance);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexed (VkCommandBuffer   commandBuffer, uint32_t   indexCount, uint32_t   instanceCount, uint32_t   firstIndex, int32_t   vertexOffset, uint32_t   firstInstance);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirect (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirect (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndQuery (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderPass (VkCommandBuffer   commandBuffer);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdExecuteCommands (VkCommandBuffer   commandBuffer, uint32_t   commandBufferCount, const  VkCommandBuffer *  pCommandBuffers);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdFillBuffer (VkCommandBuffer   commandBuffer, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   size, uint32_t   data);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdNextSubpass (VkCommandBuffer   commandBuffer, VkSubpassContents   contents);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPipelineBarrier (VkCommandBuffer   commandBuffer, VkPipelineStageFlags   srcStageMask, VkPipelineStageFlags   dstStageMask, VkDependencyFlags   dependencyFlags, uint32_t   memoryBarrierCount, const  VkMemoryBarrier *  pMemoryBarriers, uint32_t   bufferMemoryBarrierCount, const  VkBufferMemoryBarrier *  pBufferMemoryBarriers, uint32_t   imageMemoryBarrierCount, const  VkImageMemoryBarrier *  pImageMemoryBarriers);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushConstants (VkCommandBuffer   commandBuffer, VkPipelineLayout   layout, VkShaderStageFlags   stageFlags, uint32_t   offset, uint32_t   size, const  void *  pValues);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetEvent (VkCommandBuffer   commandBuffer, VkEvent   event, VkPipelineStageFlags   stageMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetQueryPool (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResolveImage (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageResolve *  pRegions);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetBlendConstants (VkCommandBuffer   commandBuffer, const  float   blendConstants [4]);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBias (VkCommandBuffer   commandBuffer, float   depthBiasConstantFactor, float   depthBiasClamp, float   depthBiasSlopeFactor);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBounds (VkCommandBuffer   commandBuffer, float   minDepthBounds, float   maxDepthBounds);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetEvent (VkCommandBuffer   commandBuffer, VkEvent   event, VkPipelineStageFlags   stageMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineWidth (VkCommandBuffer   commandBuffer, float   lineWidth);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetScissor (VkCommandBuffer   commandBuffer, uint32_t   firstScissor, uint32_t   scissorCount, const  VkRect2D *  pScissors);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilCompareMask (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   compareMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilReference (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   reference);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilWriteMask (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   writeMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewport (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewport *  pViewports);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdUpdateBuffer (VkCommandBuffer   commandBuffer, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   dataSize, const  void *  pData);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWaitEvents (VkCommandBuffer   commandBuffer, uint32_t   eventCount, const  VkEvent *  pEvents, VkPipelineStageFlags   srcStageMask, VkPipelineStageFlags   dstStageMask, uint32_t   memoryBarrierCount, const  VkMemoryBarrier *  pMemoryBarriers, uint32_t   bufferMemoryBarrierCount, const  VkBufferMemoryBarrier *  pBufferMemoryBarriers, uint32_t   imageMemoryBarrierCount, const  VkImageMemoryBarrier *  pImageMemoryBarriers);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteTimestamp (VkCommandBuffer   commandBuffer, VkPipelineStageFlagBits   pipelineStage, VkQueryPool   queryPool, uint32_t   query);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateBuffer (VkDevice   device, const  VkBufferCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBuffer *  pBuffer);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateBufferView (VkDevice   device, const  VkBufferViewCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBufferView *  pView);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCommandPool (VkDevice   device, const  VkCommandPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCommandPool *  pCommandPool);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateComputePipelines (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkComputePipelineCreateInfo *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorPool (VkDevice   device, const  VkDescriptorPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorPool *  pDescriptorPool);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorSetLayout (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorSetLayout *  pSetLayout);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDevice (VkPhysicalDevice   physicalDevice, const  VkDeviceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDevice *  pDevice);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateEvent (VkDevice   device, const  VkEventCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkEvent *  pEvent);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateFence (VkDevice   device, const  VkFenceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateFramebuffer (VkDevice   device, const  VkFramebufferCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkFramebuffer *  pFramebuffer);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateGraphicsPipelines (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkGraphicsPipelineCreateInfo *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateImage (VkDevice   device, const  VkImageCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkImage *  pImage);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateImageView (VkDevice   device, const  VkImageViewCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkImageView *  pView);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateInstance (const  VkInstanceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkInstance *  pInstance);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePipelineCache (VkDevice   device, const  VkPipelineCacheCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPipelineCache *  pPipelineCache);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePipelineLayout (VkDevice   device, const  VkPipelineLayoutCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPipelineLayout *  pPipelineLayout);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateQueryPool (VkDevice   device, const  VkQueryPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkQueryPool *  pQueryPool);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRenderPass (VkDevice   device, const  VkRenderPassCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSampler (VkDevice   device, const  VkSamplerCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSampler *  pSampler);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSemaphore (VkDevice   device, const  VkSemaphoreCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSemaphore *  pSemaphore);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateShaderModule (VkDevice   device, const  VkShaderModuleCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkShaderModule *  pShaderModule);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyBuffer (VkDevice   device, VkBuffer   buffer, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyBufferView (VkDevice   device, VkBufferView   bufferView, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCommandPool (VkDevice   device, VkCommandPool   commandPool, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorPool (VkDevice   device, VkDescriptorPool   descriptorPool, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorSetLayout (VkDevice   device, VkDescriptorSetLayout   descriptorSetLayout, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDevice (VkDevice   device, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyEvent (VkDevice   device, VkEvent   event, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyFence (VkDevice   device, VkFence   fence, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyFramebuffer (VkDevice   device, VkFramebuffer   framebuffer, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyImage (VkDevice   device, VkImage   image, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyImageView (VkDevice   device, VkImageView   imageView, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyInstance (VkInstance   instance, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPipeline (VkDevice   device, VkPipeline   pipeline, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPipelineCache (VkDevice   device, VkPipelineCache   pipelineCache, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPipelineLayout (VkDevice   device, VkPipelineLayout   pipelineLayout, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyQueryPool (VkDevice   device, VkQueryPool   queryPool, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyRenderPass (VkDevice   device, VkRenderPass   renderPass, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySampler (VkDevice   device, VkSampler   sampler, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySemaphore (VkDevice   device, VkSemaphore   semaphore, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyShaderModule (VkDevice   device, VkShaderModule   shaderModule, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDeviceWaitIdle (VkDevice   device);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEndCommandBuffer (VkCommandBuffer   commandBuffer);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateDeviceExtensionProperties (VkPhysicalDevice   physicalDevice, const  char *  pLayerName, uint32_t *  pPropertyCount, VkExtensionProperties *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateDeviceLayerProperties (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkLayerProperties *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateInstanceExtensionProperties (const  char *  pLayerName, uint32_t *  pPropertyCount, VkExtensionProperties *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateInstanceLayerProperties (uint32_t *  pPropertyCount, VkLayerProperties *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDevices (VkInstance   instance, uint32_t *  pPhysicalDeviceCount, VkPhysicalDevice *  pPhysicalDevices);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkFlushMappedMemoryRanges (VkDevice   device, uint32_t   memoryRangeCount, const  VkMappedMemoryRange *  pMemoryRanges);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkFreeCommandBuffers (VkDevice   device, VkCommandPool   commandPool, uint32_t   commandBufferCount, const  VkCommandBuffer *  pCommandBuffers);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkFreeDescriptorSets (VkDevice   device, VkDescriptorPool   descriptorPool, uint32_t   descriptorSetCount, const  VkDescriptorSet *  pDescriptorSets);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkFreeMemory (VkDevice   device, VkDeviceMemory   memory, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetBufferMemoryRequirements (VkDevice   device, VkBuffer   buffer, VkMemoryRequirements *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceMemoryCommitment (VkDevice   device, VkDeviceMemory   memory, VkDeviceSize *  pCommittedMemoryInBytes);
VKFWAPI VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
vkGetDeviceProcAddr (VkDevice   device, const  char *  pName);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceQueue (VkDevice   device, uint32_t   queueFamilyIndex, uint32_t   queueIndex, VkQueue *  pQueue);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetEventStatus (VkDevice   device, VkEvent   event);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFenceStatus (VkDevice   device, VkFence   fence);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageMemoryRequirements (VkDevice   device, VkImage   image, VkMemoryRequirements *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSparseMemoryRequirements (VkDevice   device, VkImage   image, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *  pSparseMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSubresourceLayout (VkDevice   device, VkImage   image, const  VkImageSubresource *  pSubresource, VkSubresourceLayout *  pLayout);
VKFWAPI VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
vkGetInstanceProcAddr (VkInstance   instance, const  char *  pName);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFeatures (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures *  pFeatures);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFormatProperties (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties *  pFormatProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceImageFormatProperties (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkImageTiling   tiling, VkImageUsageFlags   usage, VkImageCreateFlags   flags, VkImageFormatProperties *  pImageFormatProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMemoryProperties (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties *  pMemoryProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceProperties (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties *  pProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyProperties (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties *  pQueueFamilyProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceSparseImageFormatProperties (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkSampleCountFlagBits   samples, VkImageUsageFlags   usage, VkImageTiling   tiling, uint32_t *  pPropertyCount, VkSparseImageFormatProperties *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineCacheData (VkDevice   device, VkPipelineCache   pipelineCache, size_t *  pDataSize, void *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetQueryPoolResults (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount, size_t   dataSize, void *  pData, VkDeviceSize   stride, VkQueryResultFlags   flags);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetRenderAreaGranularity (VkDevice   device, VkRenderPass   renderPass, VkExtent2D *  pGranularity);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkInvalidateMappedMemoryRanges (VkDevice   device, uint32_t   memoryRangeCount, const  VkMappedMemoryRange *  pMemoryRanges);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMapMemory (VkDevice   device, VkDeviceMemory   memory, VkDeviceSize   offset, VkDeviceSize   size, VkMemoryMapFlags   flags, void **  ppData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMergePipelineCaches (VkDevice   device, VkPipelineCache   dstCache, uint32_t   srcCacheCount, const  VkPipelineCache *  pSrcCaches);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueBindSparse (VkQueue   queue, uint32_t   bindInfoCount, const  VkBindSparseInfo *  pBindInfo, VkFence   fence);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSubmit (VkQueue   queue, uint32_t   submitCount, const  VkSubmitInfo *  pSubmits, VkFence   fence);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueWaitIdle (VkQueue   queue);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetCommandBuffer (VkCommandBuffer   commandBuffer, VkCommandBufferResetFlags   flags);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetCommandPool (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolResetFlags   flags);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetDescriptorPool (VkDevice   device, VkDescriptorPool   descriptorPool, VkDescriptorPoolResetFlags   flags);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetEvent (VkDevice   device, VkEvent   event);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkResetFences (VkDevice   device, uint32_t   fenceCount, const  VkFence *  pFences);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetEvent (VkDevice   device, VkEvent   event);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUnmapMemory (VkDevice   device, VkDeviceMemory   memory);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUpdateDescriptorSets (VkDevice   device, uint32_t   descriptorWriteCount, const  VkWriteDescriptorSet *  pDescriptorWrites, uint32_t   descriptorCopyCount, const  VkCopyDescriptorSet *  pDescriptorCopies);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitForFences (VkDevice   device, uint32_t   fenceCount, const  VkFence *  pFences, VkBool32   waitAll, uint64_t   timeout);
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindBufferMemory2 (VkDevice   device, uint32_t   bindInfoCount, const  VkBindBufferMemoryInfo *  pBindInfos);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindImageMemory2 (VkDevice   device, uint32_t   bindInfoCount, const  VkBindImageMemoryInfo *  pBindInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchBase (VkCommandBuffer   commandBuffer, uint32_t   baseGroupX, uint32_t   baseGroupY, uint32_t   baseGroupZ, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDeviceMask (VkCommandBuffer   commandBuffer, uint32_t   deviceMask);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorUpdateTemplate (VkDevice   device, const  VkDescriptorUpdateTemplateCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorUpdateTemplate *  pDescriptorUpdateTemplate);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSamplerYcbcrConversion (VkDevice   device, const  VkSamplerYcbcrConversionCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSamplerYcbcrConversion *  pYcbcrConversion);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorUpdateTemplate (VkDevice   device, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySamplerYcbcrConversion (VkDevice   device, VkSamplerYcbcrConversion   ycbcrConversion, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumerateInstanceVersion (uint32_t *  pApiVersion);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDeviceGroups (VkInstance   instance, uint32_t *  pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *  pPhysicalDeviceGroupProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetBufferMemoryRequirements2 (VkDevice   device, const  VkBufferMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutSupport (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, VkDescriptorSetLayoutSupport *  pSupport);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceGroupPeerMemoryFeatures (VkDevice   device, uint32_t   heapIndex, uint32_t   localDeviceIndex, uint32_t   remoteDeviceIndex, VkPeerMemoryFeatureFlags *  pPeerMemoryFeatures);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceQueue2 (VkDevice   device, const  VkDeviceQueueInfo2 *  pQueueInfo, VkQueue *  pQueue);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageMemoryRequirements2 (VkDevice   device, const  VkImageMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSparseMemoryRequirements2 (VkDevice   device, const  VkImageSparseMemoryRequirementsInfo2 *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalBufferProperties (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalBufferInfo *  pExternalBufferInfo, VkExternalBufferProperties *  pExternalBufferProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalFenceProperties (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalFenceInfo *  pExternalFenceInfo, VkExternalFenceProperties *  pExternalFenceProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalSemaphoreProperties (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalSemaphoreInfo *  pExternalSemaphoreInfo, VkExternalSemaphoreProperties *  pExternalSemaphoreProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFeatures2 (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures2 *  pFeatures);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFormatProperties2 (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties2 *  pFormatProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceImageFormatProperties2 (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceImageFormatInfo2 *  pImageFormatInfo, VkImageFormatProperties2 *  pImageFormatProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMemoryProperties2 (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties2 *  pMemoryProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceProperties2 (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties2 *  pProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyProperties2 (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *  pQueueFamilyProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceSparseImageFormatProperties2 (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSparseImageFormatInfo2 *  pFormatInfo, uint32_t *  pPropertyCount, VkSparseImageFormatProperties2 *  pProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkTrimCommandPool (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolTrimFlags   flags);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUpdateDescriptorSetWithTemplate (VkDevice   device, VkDescriptorSet   descriptorSet, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  void *  pData);
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderPass2 (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *       pRenderPassBegin, const  VkSubpassBeginInfo *       pSubpassBeginInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirectCount (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectCount (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderPass2 (VkCommandBuffer   commandBuffer, const  VkSubpassEndInfo *         pSubpassEndInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdNextSubpass2 (VkCommandBuffer   commandBuffer, const  VkSubpassBeginInfo *       pSubpassBeginInfo, const  VkSubpassEndInfo *         pSubpassEndInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRenderPass2 (VkDevice   device, const  VkRenderPassCreateInfo2 *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass);
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetBufferDeviceAddress (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetBufferOpaqueCaptureAddress (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetDeviceMemoryOpaqueCaptureAddress (VkDevice   device, const  VkDeviceMemoryOpaqueCaptureAddressInfo *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreCounterValue (VkDevice   device, VkSemaphore   semaphore, uint64_t *  pValue);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkResetQueryPool (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSignalSemaphore (VkDevice   device, const  VkSemaphoreSignalInfo *  pSignalInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitSemaphores (VkDevice   device, const  VkSemaphoreWaitInfo *  pWaitInfo, uint64_t   timeout);
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRendering (VkCommandBuffer                     commandBuffer, const  VkRenderingInfo *                               pRenderingInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindVertexBuffers2 (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes, const  VkDeviceSize *  pStrides);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBlitImage2 (VkCommandBuffer   commandBuffer, const  VkBlitImageInfo2 *  pBlitImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBuffer2 (VkCommandBuffer   commandBuffer, const  VkCopyBufferInfo2 *  pCopyBufferInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBufferToImage2 (VkCommandBuffer   commandBuffer, const  VkCopyBufferToImageInfo2 *  pCopyBufferToImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImage2 (VkCommandBuffer   commandBuffer, const  VkCopyImageInfo2 *  pCopyImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImageToBuffer2 (VkCommandBuffer   commandBuffer, const  VkCopyImageToBufferInfo2 *  pCopyImageToBufferInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRendering (VkCommandBuffer                     commandBuffer);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPipelineBarrier2 (VkCommandBuffer                     commandBuffer, const  VkDependencyInfo *                              pDependencyInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetEvent2 (VkCommandBuffer                     commandBuffer, VkEvent                                               event, VkPipelineStageFlags2                 stageMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResolveImage2 (VkCommandBuffer   commandBuffer, const  VkResolveImageInfo2 *  pResolveImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCullMode (VkCommandBuffer   commandBuffer, VkCullModeFlags   cullMode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBiasEnable (VkCommandBuffer   commandBuffer, VkBool32   depthBiasEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBoundsTestEnable (VkCommandBuffer   commandBuffer, VkBool32   depthBoundsTestEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthCompareOp (VkCommandBuffer   commandBuffer, VkCompareOp   depthCompareOp);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthTestEnable (VkCommandBuffer   commandBuffer, VkBool32   depthTestEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthWriteEnable (VkCommandBuffer   commandBuffer, VkBool32   depthWriteEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetEvent2 (VkCommandBuffer                     commandBuffer, VkEvent                                               event, const  VkDependencyInfo *                              pDependencyInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFrontFace (VkCommandBuffer   commandBuffer, VkFrontFace   frontFace);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveRestartEnable (VkCommandBuffer   commandBuffer, VkBool32   primitiveRestartEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveTopology (VkCommandBuffer   commandBuffer, VkPrimitiveTopology   primitiveTopology);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizerDiscardEnable (VkCommandBuffer   commandBuffer, VkBool32   rasterizerDiscardEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetScissorWithCount (VkCommandBuffer   commandBuffer, uint32_t   scissorCount, const  VkRect2D *  pScissors);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilOp (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, VkStencilOp   failOp, VkStencilOp   passOp, VkStencilOp   depthFailOp, VkCompareOp   compareOp);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilTestEnable (VkCommandBuffer   commandBuffer, VkBool32   stencilTestEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWithCount (VkCommandBuffer   commandBuffer, uint32_t   viewportCount, const  VkViewport *  pViewports);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWaitEvents2 (VkCommandBuffer                     commandBuffer, uint32_t                                              eventCount, const  VkEvent *                      pEvents, const  VkDependencyInfo *             pDependencyInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteTimestamp2 (VkCommandBuffer                     commandBuffer, VkPipelineStageFlags2                 stage, VkQueryPool                                           queryPool, uint32_t                                              query);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePrivateDataSlot (VkDevice   device, const  VkPrivateDataSlotCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPrivateDataSlot *  pPrivateDataSlot);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPrivateDataSlot (VkDevice   device, VkPrivateDataSlot   privateDataSlot, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceBufferMemoryRequirements (VkDevice   device, const  VkDeviceBufferMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageMemoryRequirements (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageSparseMemoryRequirements (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceToolProperties (VkPhysicalDevice   physicalDevice, uint32_t *  pToolCount, VkPhysicalDeviceToolProperties *  pToolProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPrivateData (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSubmit2 (VkQueue                             queue, uint32_t                              submitCount, const  VkSubmitInfo2 *               pSubmits, VkFence             fence);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetPrivateData (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t   data);
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_AMDX_shader_enqueue)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchGraphAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch, const  VkDispatchGraphCountInfoAMDX *               pCountInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchGraphIndirectAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch, const  VkDispatchGraphCountInfoAMDX *               pCountInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchGraphIndirectCountAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch, VkDeviceAddress                                   countInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdInitializeGraphScratchMemoryAMDX (VkCommandBuffer                                   commandBuffer, VkDeviceAddress                                   scratch);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateExecutionGraphPipelinesAMDX (VkDevice                                          device, VkPipelineCache                   pipelineCache, uint32_t                                          createInfoCount, const  VkExecutionGraphPipelineCreateInfoAMDX *  pCreateInfos, const  VkAllocationCallbacks *     pAllocator, VkPipeline *                pPipelines);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetExecutionGraphPipelineNodeIndexAMDX (VkDevice                                          device, VkPipeline                                        executionGraph, const  VkPipelineShaderStageNodeCreateInfoAMDX *    pNodeInfo, uint32_t *                                        pNodeIndex);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetExecutionGraphPipelineScratchSizeAMDX (VkDevice                                          device, VkPipeline                                        executionGraph, VkExecutionGraphPipelineScratchSizeAMDX *          pSizeInfo);
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_AMD_buffer_marker)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteBufferMarkerAMD (VkCommandBuffer   commandBuffer, VkPipelineStageFlagBits   pipelineStage, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, uint32_t   marker);
#endif /* defined(VK_AMD_buffer_marker) */
#if defined(VK_AMD_display_native_hdr)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetLocalDimmingAMD (VkDevice   device, VkSwapchainKHR   swapChain, VkBool32   localDimmingEnable);
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_AMD_draw_indirect_count)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirectCountAMD (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectCountAMD (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
#endif /* defined(VK_AMD_draw_indirect_count) */
#if defined(VK_AMD_shader_info)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetShaderInfoAMD (VkDevice   device, VkPipeline   pipeline, VkShaderStageFlagBits   shaderStage, VkShaderInfoTypeAMD   infoType, size_t *  pInfoSize, void *  pInfo);
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetAndroidHardwareBufferPropertiesANDROID (VkDevice   device, const struct  AHardwareBuffer *  buffer, VkAndroidHardwareBufferPropertiesANDROID *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryAndroidHardwareBufferANDROID (VkDevice   device, const  VkMemoryGetAndroidHardwareBufferInfoANDROID *  pInfo, struct  AHardwareBuffer **  pBuffer);
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_EXT_acquire_drm_display)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireDrmDisplayEXT (VkPhysicalDevice   physicalDevice, int32_t   drmFd, VkDisplayKHR   display);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDrmDisplayEXT (VkPhysicalDevice   physicalDevice, int32_t   drmFd, uint32_t   connectorId, VkDisplayKHR *  display);
#endif /* defined(VK_EXT_acquire_drm_display) */
#if defined(VK_EXT_acquire_xlib_display)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireXlibDisplayEXT (VkPhysicalDevice   physicalDevice, Display *  dpy, VkDisplayKHR   display);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRandROutputDisplayEXT (VkPhysicalDevice   physicalDevice, Display *  dpy, RROutput   rrOutput, VkDisplayKHR *  pDisplay);
#endif /* defined(VK_EXT_acquire_xlib_display) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetAttachmentFeedbackLoopEnableEXT (VkCommandBuffer   commandBuffer, VkImageAspectFlags   aspectMask);
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_EXT_buffer_device_address)
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetBufferDeviceAddressEXT (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_EXT_calibrated_timestamps)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetCalibratedTimestampsEXT (VkDevice   device, uint32_t   timestampCount, const  VkCalibratedTimestampInfoKHR *  pTimestampInfos, uint64_t *  pTimestamps, uint64_t *  pMaxDeviation);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (VkPhysicalDevice   physicalDevice, uint32_t *  pTimeDomainCount, VkTimeDomainKHR *  pTimeDomains);
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_EXT_color_write_enable)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorWriteEnableEXT (VkCommandBuffer         commandBuffer, uint32_t                                  attachmentCount, const  VkBool32 *    pColorWriteEnables);
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_EXT_conditional_rendering)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginConditionalRenderingEXT (VkCommandBuffer   commandBuffer, const  VkConditionalRenderingBeginInfoEXT *  pConditionalRenderingBegin);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndConditionalRenderingEXT (VkCommandBuffer   commandBuffer);
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_EXT_debug_marker)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDebugMarkerBeginEXT (VkCommandBuffer   commandBuffer, const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDebugMarkerEndEXT (VkCommandBuffer   commandBuffer);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDebugMarkerInsertEXT (VkCommandBuffer   commandBuffer, const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDebugMarkerSetObjectNameEXT (VkDevice   device, const  VkDebugMarkerObjectNameInfoEXT *  pNameInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDebugMarkerSetObjectTagEXT (VkDevice   device, const  VkDebugMarkerObjectTagInfoEXT *  pTagInfo);
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_EXT_debug_report)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDebugReportCallbackEXT (VkInstance   instance, const  VkDebugReportCallbackCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDebugReportCallbackEXT *  pCallback);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDebugReportMessageEXT (VkInstance   instance, VkDebugReportFlagsEXT   flags, VkDebugReportObjectTypeEXT   objectType, uint64_t   object, size_t   location, int32_t   messageCode, const  char *  pLayerPrefix, const  char *  pMessage);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDebugReportCallbackEXT (VkInstance   instance, VkDebugReportCallbackEXT   callback, const  VkAllocationCallbacks *  pAllocator);
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginDebugUtilsLabelEXT (VkCommandBuffer   commandBuffer, const  VkDebugUtilsLabelEXT *  pLabelInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndDebugUtilsLabelEXT (VkCommandBuffer   commandBuffer);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdInsertDebugUtilsLabelEXT (VkCommandBuffer   commandBuffer, const  VkDebugUtilsLabelEXT *  pLabelInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDebugUtilsMessengerEXT (VkInstance   instance, const  VkDebugUtilsMessengerCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDebugUtilsMessengerEXT *  pMessenger);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDebugUtilsMessengerEXT (VkInstance   instance, VkDebugUtilsMessengerEXT   messenger, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueBeginDebugUtilsLabelEXT (VkQueue   queue, const  VkDebugUtilsLabelEXT *  pLabelInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueEndDebugUtilsLabelEXT (VkQueue   queue);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueInsertDebugUtilsLabelEXT (VkQueue   queue, const  VkDebugUtilsLabelEXT *  pLabelInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetDebugUtilsObjectNameEXT (VkDevice   device, const  VkDebugUtilsObjectNameInfoEXT *  pNameInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetDebugUtilsObjectTagEXT (VkDevice   device, const  VkDebugUtilsObjectTagInfoEXT *  pTagInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSubmitDebugUtilsMessageEXT (VkInstance   instance, VkDebugUtilsMessageSeverityFlagBitsEXT   messageSeverity, VkDebugUtilsMessageTypeFlagsEXT   messageTypes, const  VkDebugUtilsMessengerCallbackDataEXT *  pCallbackData);
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_depth_bias_control)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBias2EXT (VkCommandBuffer   commandBuffer, const  VkDepthBiasInfoEXT *          pDepthBiasInfo);
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_descriptor_buffer)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorBufferEmbeddedSamplersEXT (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   set);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorBuffersEXT (VkCommandBuffer   commandBuffer, uint32_t   bufferCount, const  VkDescriptorBufferBindingInfoEXT *  pBindingInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDescriptorBufferOffsetsEXT (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   firstSet, uint32_t   setCount, const  uint32_t *  pBufferIndices, const  VkDeviceSize *  pOffsets);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetBufferOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkBufferCaptureDescriptorDataInfoEXT *  pInfo, void *  pData);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorEXT (VkDevice   device, const  VkDescriptorGetInfoEXT *  pDescriptorInfo, size_t   dataSize, void *  pDescriptor);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutBindingOffsetEXT (VkDevice   device, VkDescriptorSetLayout   layout, uint32_t   binding, VkDeviceSize *  pOffset);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutSizeEXT (VkDevice   device, VkDescriptorSetLayout   layout, VkDeviceSize *  pLayoutSizeInBytes);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkImageCaptureDescriptorDataInfoEXT *  pInfo, void *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageViewOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkImageViewCaptureDescriptorDataInfoEXT *  pInfo, void *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSamplerOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkSamplerCaptureDescriptorDataInfoEXT *  pInfo, void *  pData);
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT (VkDevice   device, const  VkAccelerationStructureCaptureDescriptorDataInfoEXT *  pInfo, void *  pData);
#endif /* defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)) */
#if defined(VK_EXT_device_fault)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceFaultInfoEXT (VkDevice   device, VkDeviceFaultCountsEXT *  pFaultCounts, VkDeviceFaultInfoEXT *  pFaultInfo);
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_EXT_direct_mode_display)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleaseDisplayEXT (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display);
#endif /* defined(VK_EXT_direct_mode_display) */
#if defined(VK_EXT_directfb_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDirectFBSurfaceEXT (VkInstance   instance, const  VkDirectFBSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceDirectFBPresentationSupportEXT (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, IDirectFB *  dfb);
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_EXT_discard_rectangles)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDiscardRectangleEXT (VkCommandBuffer   commandBuffer, uint32_t   firstDiscardRectangle, uint32_t   discardRectangleCount, const  VkRect2D *  pDiscardRectangles);
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDiscardRectangleEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   discardRectangleEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDiscardRectangleModeEXT (VkCommandBuffer   commandBuffer, VkDiscardRectangleModeEXT   discardRectangleMode);
#endif /* defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2 */
#if defined(VK_EXT_display_control)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDisplayPowerControlEXT (VkDevice   device, VkDisplayKHR   display, const  VkDisplayPowerInfoEXT *  pDisplayPowerInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSwapchainCounterEXT (VkDevice   device, VkSwapchainKHR   swapchain, VkSurfaceCounterFlagBitsEXT   counter, uint64_t *  pCounterValue);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkRegisterDeviceEventEXT (VkDevice   device, const  VkDeviceEventInfoEXT *  pDeviceEventInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkRegisterDisplayEventEXT (VkDevice   device, VkDisplayKHR   display, const  VkDisplayEventInfoEXT *  pDisplayEventInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence);
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_EXT_display_surface_counter)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceCapabilities2EXT (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, VkSurfaceCapabilities2EXT *  pSurfaceCapabilities);
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_EXT_external_memory_host)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryHostPointerPropertiesEXT (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, const  void *  pHostPointer, VkMemoryHostPointerPropertiesEXT *  pMemoryHostPointerProperties);
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_EXT_full_screen_exclusive)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireFullScreenExclusiveModeEXT (VkDevice   device, VkSwapchainKHR   swapchain);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfacePresentModes2EXT (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, uint32_t *  pPresentModeCount, VkPresentModeKHR *  pPresentModes);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleaseFullScreenExclusiveModeEXT (VkDevice   device, VkSwapchainKHR   swapchain);
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_hdr_metadata)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetHdrMetadataEXT (VkDevice   device, uint32_t   swapchainCount, const  VkSwapchainKHR *  pSwapchains, const  VkHdrMetadataEXT *  pMetadata);
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_EXT_headless_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateHeadlessSurfaceEXT (VkInstance   instance, const  VkHeadlessSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_EXT_host_image_copy)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyImageToImageEXT (VkDevice   device, const  VkCopyImageToImageInfoEXT *  pCopyImageToImageInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyImageToMemoryEXT (VkDevice   device, const  VkCopyImageToMemoryInfoEXT *  pCopyImageToMemoryInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMemoryToImageEXT (VkDevice   device, const  VkCopyMemoryToImageInfoEXT *  pCopyMemoryToImageInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkTransitionImageLayoutEXT (VkDevice   device, uint32_t   transitionCount, const  VkHostImageLayoutTransitionInfoEXT *  pTransitions);
#endif /* defined(VK_EXT_host_image_copy) */
#if defined(VK_EXT_host_query_reset)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkResetQueryPoolEXT (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount);
#endif /* defined(VK_EXT_host_query_reset) */
#if defined(VK_EXT_image_drm_format_modifier)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageDrmFormatModifierPropertiesEXT (VkDevice   device, VkImage   image, VkImageDrmFormatModifierPropertiesEXT *  pProperties);
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_line_rasterization)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineStippleEXT (VkCommandBuffer   commandBuffer, uint32_t   lineStippleFactor, uint16_t   lineStipplePattern);
#endif /* defined(VK_EXT_line_rasterization) */
#if defined(VK_EXT_mesh_shader)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksEXT (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectCountEXT (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectEXT (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_EXT_metal_objects)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkExportMetalObjectsEXT (VkDevice   device, VkExportMetalObjectsInfoEXT *  pMetalObjectsInfo);
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_EXT_metal_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateMetalSurfaceEXT (VkInstance   instance, const  VkMetalSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_EXT_multi_draw)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMultiEXT (VkCommandBuffer   commandBuffer, uint32_t   drawCount, const  VkMultiDrawInfoEXT *  pVertexInfo, uint32_t   instanceCount, uint32_t   firstInstance, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMultiIndexedEXT (VkCommandBuffer   commandBuffer, uint32_t   drawCount, const  VkMultiDrawIndexedInfoEXT *  pIndexInfo, uint32_t   instanceCount, uint32_t   firstInstance, uint32_t   stride, const  int32_t *  pVertexOffset);
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_opacity_micromap)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBuildMicromapsEXT (VkDevice                                             device, VkDeferredOperationKHR   deferredOperation, uint32_t   infoCount, const  VkMicromapBuildInfoEXT *  pInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildMicromapsEXT (VkCommandBuffer                                      commandBuffer, uint32_t   infoCount, const  VkMicromapBuildInfoEXT *  pInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryToMicromapEXT (VkCommandBuffer   commandBuffer, const  VkCopyMemoryToMicromapInfoEXT *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMicromapEXT (VkCommandBuffer   commandBuffer, const  VkCopyMicromapInfoEXT *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMicromapToMemoryEXT (VkCommandBuffer   commandBuffer, const  VkCopyMicromapToMemoryInfoEXT *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteMicromapsPropertiesEXT (VkCommandBuffer   commandBuffer, uint32_t   micromapCount, const  VkMicromapEXT *  pMicromaps, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMemoryToMicromapEXT (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMemoryToMicromapInfoEXT *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMicromapEXT (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMicromapInfoEXT *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMicromapToMemoryEXT (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMicromapToMemoryInfoEXT *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateMicromapEXT (VkDevice                                             device, const  VkMicromapCreateInfoEXT *         pCreateInfo, const  VkAllocationCallbacks *        pAllocator, VkMicromapEXT *                         pMicromap);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyMicromapEXT (VkDevice   device, VkMicromapEXT   micromap, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceMicromapCompatibilityEXT (VkDevice   device, const  VkMicromapVersionInfoEXT *  pVersionInfo, VkAccelerationStructureCompatibilityKHR *  pCompatibility);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetMicromapBuildSizesEXT (VkDevice                                              device, VkAccelerationStructureBuildTypeKHR                   buildType, const  VkMicromapBuildInfoEXT *   pBuildInfo, VkMicromapBuildSizesInfoEXT *            pSizeInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWriteMicromapsPropertiesEXT (VkDevice   device, uint32_t   micromapCount, const  VkMicromapEXT *  pMicromaps, VkQueryType    queryType, size_t         dataSize, void *  pData, size_t   stride);
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_pageable_device_local_memory)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetDeviceMemoryPriorityEXT (VkDevice         device, VkDeviceMemory   memory, float            priority);
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_EXT_pipeline_properties)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelinePropertiesEXT (VkDevice   device, const  VkPipelineInfoEXT *  pPipelineInfo, VkBaseOutStructure *  pPipelineProperties);
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_EXT_private_data)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreatePrivateDataSlotEXT (VkDevice   device, const  VkPrivateDataSlotCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPrivateDataSlot *  pPrivateDataSlot);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyPrivateDataSlotEXT (VkDevice   device, VkPrivateDataSlot   privateDataSlot, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPrivateDataEXT (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetPrivateDataEXT (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlot   privateDataSlot, uint64_t   data);
#endif /* defined(VK_EXT_private_data) */
#if defined(VK_EXT_sample_locations)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetSampleLocationsEXT (VkCommandBuffer   commandBuffer, const  VkSampleLocationsInfoEXT *  pSampleLocationsInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMultisamplePropertiesEXT (VkPhysicalDevice   physicalDevice, VkSampleCountFlagBits   samples, VkMultisamplePropertiesEXT *  pMultisampleProperties);
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_shader_module_identifier)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetShaderModuleCreateInfoIdentifierEXT (VkDevice   device, const  VkShaderModuleCreateInfo *  pCreateInfo, VkShaderModuleIdentifierEXT *  pIdentifier);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetShaderModuleIdentifierEXT (VkDevice   device, VkShaderModule   shaderModule, VkShaderModuleIdentifierEXT *  pIdentifier);
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_shader_object)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindShadersEXT (VkCommandBuffer   commandBuffer, uint32_t   stageCount, const  VkShaderStageFlagBits *  pStages, const  VkShaderEXT *  pShaders);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateShadersEXT (VkDevice   device, uint32_t   createInfoCount, const  VkShaderCreateInfoEXT *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkShaderEXT *  pShaders);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyShaderEXT (VkDevice   device, VkShaderEXT   shader, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetShaderBinaryDataEXT (VkDevice   device, VkShaderEXT   shader, size_t *  pDataSize, void *  pData);
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_EXT_swapchain_maintenance1)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleaseSwapchainImagesEXT (VkDevice   device, const  VkReleaseSwapchainImagesInfoEXT *  pReleaseInfo);
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_EXT_tooling_info)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceToolPropertiesEXT (VkPhysicalDevice   physicalDevice, uint32_t *  pToolCount, VkPhysicalDeviceToolProperties *  pToolProperties);
#endif /* defined(VK_EXT_tooling_info) */
#if defined(VK_EXT_transform_feedback)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginQueryIndexedEXT (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, VkQueryControlFlags   flags, uint32_t   index);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginTransformFeedbackEXT (VkCommandBuffer   commandBuffer, uint32_t   firstCounterBuffer, uint32_t   counterBufferCount, const  VkBuffer *  pCounterBuffers, const  VkDeviceSize *  pCounterBufferOffsets);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindTransformFeedbackBuffersEXT (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectByteCountEXT (VkCommandBuffer   commandBuffer, uint32_t   instanceCount, uint32_t   firstInstance, VkBuffer   counterBuffer, VkDeviceSize   counterBufferOffset, uint32_t   counterOffset, uint32_t   vertexStride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndQueryIndexedEXT (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, uint32_t   index);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndTransformFeedbackEXT (VkCommandBuffer   commandBuffer, uint32_t   firstCounterBuffer, uint32_t   counterBufferCount, const  VkBuffer *  pCounterBuffers, const  VkDeviceSize *  pCounterBufferOffsets);
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_EXT_validation_cache)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateValidationCacheEXT (VkDevice   device, const  VkValidationCacheCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkValidationCacheEXT *  pValidationCache);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyValidationCacheEXT (VkDevice   device, VkValidationCacheEXT   validationCache, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetValidationCacheDataEXT (VkDevice   device, VkValidationCacheEXT   validationCache, size_t *  pDataSize, void *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMergeValidationCachesEXT (VkDevice   device, VkValidationCacheEXT   dstCache, uint32_t   srcCacheCount, const  VkValidationCacheEXT *  pSrcCaches);
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_FUCHSIA_buffer_collection)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateBufferCollectionFUCHSIA (VkDevice   device, const  VkBufferCollectionCreateInfoFUCHSIA *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBufferCollectionFUCHSIA *  pCollection);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyBufferCollectionFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetBufferCollectionPropertiesFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, VkBufferCollectionPropertiesFUCHSIA *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetBufferCollectionBufferConstraintsFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, const  VkBufferConstraintsInfoFUCHSIA *  pBufferConstraintsInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetBufferCollectionImageConstraintsFUCHSIA (VkDevice   device, VkBufferCollectionFUCHSIA   collection, const  VkImageConstraintsInfoFUCHSIA *  pImageConstraintsInfo);
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_FUCHSIA_external_memory)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryZirconHandleFUCHSIA (VkDevice   device, const  VkMemoryGetZirconHandleInfoFUCHSIA *  pGetZirconHandleInfo, zx_handle_t *  pZirconHandle);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryZirconHandlePropertiesFUCHSIA (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, zx_handle_t   zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA *  pMemoryZirconHandleProperties);
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_FUCHSIA_external_semaphore)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreZirconHandleFUCHSIA (VkDevice   device, const  VkSemaphoreGetZirconHandleInfoFUCHSIA *  pGetZirconHandleInfo, zx_handle_t *  pZirconHandle);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportSemaphoreZirconHandleFUCHSIA (VkDevice   device, const  VkImportSemaphoreZirconHandleInfoFUCHSIA *  pImportSemaphoreZirconHandleInfo);
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_FUCHSIA_imagepipe_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateImagePipeSurfaceFUCHSIA (VkInstance   instance, const  VkImagePipeSurfaceCreateInfoFUCHSIA *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_GGP_stream_descriptor_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateStreamDescriptorSurfaceGGP (VkInstance   instance, const  VkStreamDescriptorSurfaceCreateInfoGGP *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_GOOGLE_display_timing)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPastPresentationTimingGOOGLE (VkDevice   device, VkSwapchainKHR   swapchain, uint32_t *  pPresentationTimingCount, VkPastPresentationTimingGOOGLE *  pPresentationTimings);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRefreshCycleDurationGOOGLE (VkDevice   device, VkSwapchainKHR   swapchain, VkRefreshCycleDurationGOOGLE *  pDisplayTimingProperties);
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_HUAWEI_cluster_culling_shader)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawClusterHUAWEI (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawClusterIndirectHUAWEI (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset);
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_HUAWEI_invocation_mask)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindInvocationMaskHUAWEI (VkCommandBuffer   commandBuffer, VkImageView   imageView, VkImageLayout   imageLayout);
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_HUAWEI_subpass_shading)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSubpassShadingHUAWEI (VkCommandBuffer   commandBuffer);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI (VkDevice   device, VkRenderPass   renderpass, VkExtent2D *  pMaxWorkgroupSize);
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_INTEL_performance_query)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquirePerformanceConfigurationINTEL (VkDevice   device, const  VkPerformanceConfigurationAcquireInfoINTEL *  pAcquireInfo, VkPerformanceConfigurationINTEL *  pConfiguration);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCmdSetPerformanceMarkerINTEL (VkCommandBuffer   commandBuffer, const  VkPerformanceMarkerInfoINTEL *  pMarkerInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCmdSetPerformanceOverrideINTEL (VkCommandBuffer   commandBuffer, const  VkPerformanceOverrideInfoINTEL *  pOverrideInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCmdSetPerformanceStreamMarkerINTEL (VkCommandBuffer   commandBuffer, const  VkPerformanceStreamMarkerInfoINTEL *  pMarkerInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPerformanceParameterINTEL (VkDevice   device, VkPerformanceParameterTypeINTEL   parameter, VkPerformanceValueINTEL *  pValue);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkInitializePerformanceApiINTEL (VkDevice   device, const  VkInitializePerformanceApiInfoINTEL *  pInitializeInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSetPerformanceConfigurationINTEL (VkQueue   queue, VkPerformanceConfigurationINTEL   configuration);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkReleasePerformanceConfigurationINTEL (VkDevice   device, VkPerformanceConfigurationINTEL   configuration);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUninitializePerformanceApiINTEL (VkDevice   device);
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_acceleration_structure)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBuildAccelerationStructuresKHR (VkDevice                                             device, VkDeferredOperationKHR   deferredOperation, uint32_t   infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkAccelerationStructureBuildRangeInfoKHR * const*  ppBuildRangeInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildAccelerationStructuresIndirectKHR (VkCommandBuffer                    commandBuffer, uint32_t                                             infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkDeviceAddress *              pIndirectDeviceAddresses, const  uint32_t *                     pIndirectStrides, const  uint32_t * const*              ppMaxPrimitiveCounts);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildAccelerationStructuresKHR (VkCommandBuffer                                      commandBuffer, uint32_t   infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkAccelerationStructureBuildRangeInfoKHR * const*  ppBuildRangeInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyAccelerationStructureKHR (VkCommandBuffer   commandBuffer, const  VkCopyAccelerationStructureInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyAccelerationStructureToMemoryKHR (VkCommandBuffer   commandBuffer, const  VkCopyAccelerationStructureToMemoryInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryToAccelerationStructureKHR (VkCommandBuffer   commandBuffer, const  VkCopyMemoryToAccelerationStructureInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteAccelerationStructuresPropertiesKHR (VkCommandBuffer   commandBuffer, uint32_t   accelerationStructureCount, const  VkAccelerationStructureKHR *  pAccelerationStructures, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyAccelerationStructureKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyAccelerationStructureInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyAccelerationStructureToMemoryKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyAccelerationStructureToMemoryInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCopyMemoryToAccelerationStructureKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMemoryToAccelerationStructureInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateAccelerationStructureKHR (VkDevice                                             device, const  VkAccelerationStructureCreateInfoKHR *         pCreateInfo, const  VkAllocationCallbacks *        pAllocator, VkAccelerationStructureKHR *                         pAccelerationStructure);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyAccelerationStructureKHR (VkDevice   device, VkAccelerationStructureKHR   accelerationStructure, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetAccelerationStructureBuildSizesKHR (VkDevice                                              device, VkAccelerationStructureBuildTypeKHR                   buildType, const  VkAccelerationStructureBuildGeometryInfoKHR *   pBuildInfo, const  uint32_t *   pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR *            pSizeInfo);
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetAccelerationStructureDeviceAddressKHR (VkDevice   device, const  VkAccelerationStructureDeviceAddressInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceAccelerationStructureCompatibilityKHR (VkDevice   device, const  VkAccelerationStructureVersionInfoKHR *  pVersionInfo, VkAccelerationStructureCompatibilityKHR *  pCompatibility);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWriteAccelerationStructuresPropertiesKHR (VkDevice   device, uint32_t   accelerationStructureCount, const  VkAccelerationStructureKHR *  pAccelerationStructures, VkQueryType    queryType, size_t         dataSize, void *  pData, size_t   stride);
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_android_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateAndroidSurfaceKHR (VkInstance   instance, const  VkAndroidSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_KHR_bind_memory2)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindBufferMemory2KHR (VkDevice   device, uint32_t   bindInfoCount, const  VkBindBufferMemoryInfo *  pBindInfos);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindImageMemory2KHR (VkDevice   device, uint32_t   bindInfoCount, const  VkBindImageMemoryInfo *  pBindInfos);
#endif /* defined(VK_KHR_bind_memory2) */
#if defined(VK_KHR_buffer_device_address)
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetBufferDeviceAddressKHR (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetBufferOpaqueCaptureAddressKHR (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
VKFWAPI VKAPI_ATTR uint64_t VKAPI_CALL
vkGetDeviceMemoryOpaqueCaptureAddressKHR (VkDevice   device, const  VkDeviceMemoryOpaqueCaptureAddressInfo *  pInfo);
#endif /* defined(VK_KHR_buffer_device_address) */
#if defined(VK_KHR_calibrated_timestamps)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetCalibratedTimestampsKHR (VkDevice   device, uint32_t   timestampCount, const  VkCalibratedTimestampInfoKHR *  pTimestampInfos, uint64_t *  pTimestamps, uint64_t *  pMaxDeviation);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCalibrateableTimeDomainsKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pTimeDomainCount, VkTimeDomainKHR *  pTimeDomains);
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_KHR_cooperative_matrix)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkCooperativeMatrixPropertiesKHR *  pProperties);
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_KHR_copy_commands2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBlitImage2KHR (VkCommandBuffer   commandBuffer, const  VkBlitImageInfo2 *  pBlitImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBuffer2KHR (VkCommandBuffer   commandBuffer, const  VkCopyBufferInfo2 *  pCopyBufferInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyBufferToImage2KHR (VkCommandBuffer   commandBuffer, const  VkCopyBufferToImageInfo2 *  pCopyBufferToImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImage2KHR (VkCommandBuffer   commandBuffer, const  VkCopyImageInfo2 *  pCopyImageInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyImageToBuffer2KHR (VkCommandBuffer   commandBuffer, const  VkCopyImageToBufferInfo2 *  pCopyImageToBufferInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResolveImage2KHR (VkCommandBuffer   commandBuffer, const  VkResolveImageInfo2 *  pResolveImageInfo);
#endif /* defined(VK_KHR_copy_commands2) */
#if defined(VK_KHR_create_renderpass2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderPass2KHR (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *       pRenderPassBegin, const  VkSubpassBeginInfo *       pSubpassBeginInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderPass2KHR (VkCommandBuffer   commandBuffer, const  VkSubpassEndInfo *         pSubpassEndInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdNextSubpass2KHR (VkCommandBuffer   commandBuffer, const  VkSubpassBeginInfo *       pSubpassBeginInfo, const  VkSubpassEndInfo *         pSubpassEndInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRenderPass2KHR (VkDevice   device, const  VkRenderPassCreateInfo2 *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass);
#endif /* defined(VK_KHR_create_renderpass2) */
#if defined(VK_KHR_deferred_host_operations)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDeferredOperationKHR (VkDevice   device, const  VkAllocationCallbacks *  pAllocator, VkDeferredOperationKHR *  pDeferredOperation);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkDeferredOperationJoinKHR (VkDevice   device, VkDeferredOperationKHR   operation);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDeferredOperationKHR (VkDevice   device, VkDeferredOperationKHR   operation, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR uint32_t VKAPI_CALL
vkGetDeferredOperationMaxConcurrencyKHR (VkDevice   device, VkDeferredOperationKHR   operation);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeferredOperationResultKHR (VkDevice   device, VkDeferredOperationKHR   operation);
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_descriptor_update_template)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDescriptorUpdateTemplateKHR (VkDevice   device, const  VkDescriptorUpdateTemplateCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorUpdateTemplate *  pDescriptorUpdateTemplate);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyDescriptorUpdateTemplateKHR (VkDevice   device, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkUpdateDescriptorSetWithTemplateKHR (VkDevice   device, VkDescriptorSet   descriptorSet, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  void *  pData);
#endif /* defined(VK_KHR_descriptor_update_template) */
#if defined(VK_KHR_device_group)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDispatchBaseKHR (VkCommandBuffer   commandBuffer, uint32_t   baseGroupX, uint32_t   baseGroupY, uint32_t   baseGroupZ, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDeviceMaskKHR (VkCommandBuffer   commandBuffer, uint32_t   deviceMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceGroupPeerMemoryFeaturesKHR (VkDevice   device, uint32_t   heapIndex, uint32_t   localDeviceIndex, uint32_t   remoteDeviceIndex, VkPeerMemoryFeatureFlags *  pPeerMemoryFeatures);
#endif /* defined(VK_KHR_device_group) */
#if defined(VK_KHR_device_group_creation)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDeviceGroupsKHR (VkInstance   instance, uint32_t *  pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *  pPhysicalDeviceGroupProperties);
#endif /* defined(VK_KHR_device_group_creation) */
#if defined(VK_KHR_display)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDisplayModeKHR (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, const  VkDisplayModeCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDisplayModeKHR *  pMode);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateDisplayPlaneSurfaceKHR (VkInstance   instance, const  VkDisplaySurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayModePropertiesKHR (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, uint32_t *  pPropertyCount, VkDisplayModePropertiesKHR *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayPlaneCapabilitiesKHR (VkPhysicalDevice   physicalDevice, VkDisplayModeKHR   mode, uint32_t   planeIndex, VkDisplayPlaneCapabilitiesKHR *  pCapabilities);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayPlaneSupportedDisplaysKHR (VkPhysicalDevice   physicalDevice, uint32_t   planeIndex, uint32_t *  pDisplayCount, VkDisplayKHR *  pDisplays);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayPlanePropertiesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPlanePropertiesKHR *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayPropertiesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPropertiesKHR *  pProperties);
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_display_swapchain)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSharedSwapchainsKHR (VkDevice   device, uint32_t   swapchainCount, const  VkSwapchainCreateInfoKHR *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkSwapchainKHR *  pSwapchains);
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_KHR_draw_indirect_count)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndexedIndirectCountKHR (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawIndirectCountKHR (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
#endif /* defined(VK_KHR_draw_indirect_count) */
#if defined(VK_KHR_dynamic_rendering)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginRenderingKHR (VkCommandBuffer                     commandBuffer, const  VkRenderingInfo *                               pRenderingInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndRenderingKHR (VkCommandBuffer                     commandBuffer);
#endif /* defined(VK_KHR_dynamic_rendering) */
#if defined(VK_KHR_dynamic_rendering_local_read)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRenderingAttachmentLocationsKHR (VkCommandBuffer   commandBuffer, const  VkRenderingAttachmentLocationInfoKHR *  pLocationInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRenderingInputAttachmentIndicesKHR (VkCommandBuffer   commandBuffer, const  VkRenderingInputAttachmentIndexInfoKHR *  pLocationInfo);
#endif /* defined(VK_KHR_dynamic_rendering_local_read) */
#if defined(VK_KHR_external_fence_capabilities)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalFencePropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalFenceInfo *  pExternalFenceInfo, VkExternalFenceProperties *  pExternalFenceProperties);
#endif /* defined(VK_KHR_external_fence_capabilities) */
#if defined(VK_KHR_external_fence_fd)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFenceFdKHR (VkDevice   device, const  VkFenceGetFdInfoKHR *  pGetFdInfo, int *  pFd);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportFenceFdKHR (VkDevice   device, const  VkImportFenceFdInfoKHR *  pImportFenceFdInfo);
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFenceWin32HandleKHR (VkDevice   device, const  VkFenceGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportFenceWin32HandleKHR (VkDevice   device, const  VkImportFenceWin32HandleInfoKHR *  pImportFenceWin32HandleInfo);
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_KHR_external_memory_capabilities)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalBufferPropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalBufferInfo *  pExternalBufferInfo, VkExternalBufferProperties *  pExternalBufferProperties);
#endif /* defined(VK_KHR_external_memory_capabilities) */
#if defined(VK_KHR_external_memory_fd)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryFdKHR (VkDevice   device, const  VkMemoryGetFdInfoKHR *  pGetFdInfo, int *  pFd);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryFdPropertiesKHR (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, int   fd, VkMemoryFdPropertiesKHR *  pMemoryFdProperties);
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_KHR_external_memory_win32)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryWin32HandleKHR (VkDevice   device, const  VkMemoryGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryWin32HandlePropertiesKHR (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, HANDLE   handle, VkMemoryWin32HandlePropertiesKHR *  pMemoryWin32HandleProperties);
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_KHR_external_semaphore_capabilities)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalSemaphoreInfo *  pExternalSemaphoreInfo, VkExternalSemaphoreProperties *  pExternalSemaphoreProperties);
#endif /* defined(VK_KHR_external_semaphore_capabilities) */
#if defined(VK_KHR_external_semaphore_fd)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreFdKHR (VkDevice   device, const  VkSemaphoreGetFdInfoKHR *  pGetFdInfo, int *  pFd);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportSemaphoreFdKHR (VkDevice   device, const  VkImportSemaphoreFdInfoKHR *  pImportSemaphoreFdInfo);
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreWin32HandleKHR (VkDevice   device, const  VkSemaphoreGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkImportSemaphoreWin32HandleKHR (VkDevice   device, const  VkImportSemaphoreWin32HandleInfoKHR *  pImportSemaphoreWin32HandleInfo);
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_KHR_fragment_shading_rate)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFragmentShadingRateKHR (VkCommandBuffer             commandBuffer, const  VkExtent2D *                            pFragmentSize, const  VkFragmentShadingRateCombinerOpKHR      combinerOps [2]);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceFragmentShadingRatesKHR (VkPhysicalDevice   physicalDevice, uint32_t *  pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR *  pFragmentShadingRates);
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_KHR_get_display_properties2)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayModeProperties2KHR (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, uint32_t *  pPropertyCount, VkDisplayModeProperties2KHR *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDisplayPlaneCapabilities2KHR (VkPhysicalDevice   physicalDevice, const  VkDisplayPlaneInfo2KHR *  pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR *  pCapabilities);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayPlaneProperties2KHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPlaneProperties2KHR *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceDisplayProperties2KHR (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayProperties2KHR *  pProperties);
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_get_memory_requirements2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetBufferMemoryRequirements2KHR (VkDevice   device, const  VkBufferMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageMemoryRequirements2KHR (VkDevice   device, const  VkImageMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSparseMemoryRequirements2KHR (VkDevice   device, const  VkImageSparseMemoryRequirementsInfo2 *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements);
#endif /* defined(VK_KHR_get_memory_requirements2) */
#if defined(VK_KHR_get_physical_device_properties2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFeatures2KHR (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures2 *  pFeatures);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceFormatProperties2KHR (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties2 *  pFormatProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceImageFormatProperties2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceImageFormatInfo2 *  pImageFormatInfo, VkImageFormatProperties2 *  pImageFormatProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceMemoryProperties2KHR (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties2 *  pMemoryProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceProperties2KHR (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties2 *  pProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyProperties2KHR (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *  pQueueFamilyProperties);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceSparseImageFormatProperties2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSparseImageFormatInfo2 *  pFormatInfo, uint32_t *  pPropertyCount, VkSparseImageFormatProperties2 *  pProperties);
#endif /* defined(VK_KHR_get_physical_device_properties2) */
#if defined(VK_KHR_get_surface_capabilities2)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceCapabilities2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, VkSurfaceCapabilities2KHR *  pSurfaceCapabilities);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceFormats2KHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, uint32_t *  pSurfaceFormatCount, VkSurfaceFormat2KHR *  pSurfaceFormats);
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_KHR_line_rasterization)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineStippleKHR (VkCommandBuffer   commandBuffer, uint32_t   lineStippleFactor, uint16_t   lineStipplePattern);
#endif /* defined(VK_KHR_line_rasterization) */
#if defined(VK_KHR_maintenance1)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkTrimCommandPoolKHR (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolTrimFlags   flags);
#endif /* defined(VK_KHR_maintenance1) */
#if defined(VK_KHR_maintenance3)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutSupportKHR (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, VkDescriptorSetLayoutSupport *  pSupport);
#endif /* defined(VK_KHR_maintenance3) */
#if defined(VK_KHR_maintenance4)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceBufferMemoryRequirementsKHR (VkDevice   device, const  VkDeviceBufferMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageMemoryRequirementsKHR (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageSparseMemoryRequirementsKHR (VkDevice   device, const  VkDeviceImageMemoryRequirements *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements);
#endif /* defined(VK_KHR_maintenance4) */
#if defined(VK_KHR_maintenance5)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindIndexBuffer2KHR (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkDeviceSize   size, VkIndexType   indexType);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDeviceImageSubresourceLayoutKHR (VkDevice   device, const  VkDeviceImageSubresourceInfoKHR *  pInfo, VkSubresourceLayout2KHR *  pLayout);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSubresourceLayout2KHR (VkDevice   device, VkImage   image, const  VkImageSubresource2KHR *  pSubresource, VkSubresourceLayout2KHR *  pLayout);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetRenderingAreaGranularityKHR (VkDevice   device, const  VkRenderingAreaInfoKHR *  pRenderingAreaInfo, VkExtent2D *  pGranularity);
#endif /* defined(VK_KHR_maintenance5) */
#if defined(VK_KHR_maintenance6)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorSets2KHR (VkCommandBuffer   commandBuffer, const  VkBindDescriptorSetsInfoKHR *  pBindDescriptorSetsInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushConstants2KHR (VkCommandBuffer   commandBuffer, const  VkPushConstantsInfoKHR *  pPushConstantsInfo);
#endif /* defined(VK_KHR_maintenance6) */
#if defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSet2KHR (VkCommandBuffer   commandBuffer, const  VkPushDescriptorSetInfoKHR *  pPushDescriptorSetInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSetWithTemplate2KHR (VkCommandBuffer   commandBuffer, const  VkPushDescriptorSetWithTemplateInfoKHR *  pPushDescriptorSetWithTemplateInfo);
#endif /* defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindDescriptorBufferEmbeddedSamplers2EXT (VkCommandBuffer   commandBuffer, const  VkBindDescriptorBufferEmbeddedSamplersInfoEXT *  pBindDescriptorBufferEmbeddedSamplersInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDescriptorBufferOffsets2EXT (VkCommandBuffer   commandBuffer, const  VkSetDescriptorBufferOffsetsInfoEXT *  pSetDescriptorBufferOffsetsInfo);
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_KHR_map_memory2)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkMapMemory2KHR (VkDevice   device, const  VkMemoryMapInfoKHR *  pMemoryMapInfo, void **  ppData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkUnmapMemory2KHR (VkDevice   device, const  VkMemoryUnmapInfoKHR *  pMemoryUnmapInfo);
#endif /* defined(VK_KHR_map_memory2) */
#if defined(VK_KHR_performance_query)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireProfilingLockKHR (VkDevice   device, const  VkAcquireProfilingLockInfoKHR *  pInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, uint32_t *  pCounterCount, VkPerformanceCounterKHR *  pCounters, VkPerformanceCounterDescriptionKHR *  pCounterDescriptions);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR (VkPhysicalDevice   physicalDevice, const  VkQueryPoolPerformanceCreateInfoKHR *  pPerformanceQueryCreateInfo, uint32_t *  pNumPasses);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkReleaseProfilingLockKHR (VkDevice   device);
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_pipeline_executable_properties)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineExecutableInternalRepresentationsKHR (VkDevice                          device, const  VkPipelineExecutableInfoKHR *   pExecutableInfo, uint32_t *  pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *  pInternalRepresentations);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineExecutablePropertiesKHR (VkDevice                          device, const  VkPipelineInfoKHR *         pPipelineInfo, uint32_t *  pExecutableCount, VkPipelineExecutablePropertiesKHR *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPipelineExecutableStatisticsKHR (VkDevice                          device, const  VkPipelineExecutableInfoKHR *   pExecutableInfo, uint32_t *  pStatisticCount, VkPipelineExecutableStatisticKHR *  pStatistics);
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_KHR_present_wait)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitForPresentKHR (VkDevice   device, VkSwapchainKHR   swapchain, uint64_t   presentId, uint64_t   timeout);
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_KHR_push_descriptor)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSetKHR (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   set, uint32_t   descriptorWriteCount, const  VkWriteDescriptorSet *  pDescriptorWrites);
#endif /* defined(VK_KHR_push_descriptor) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysIndirect2KHR (VkCommandBuffer   commandBuffer, VkDeviceAddress   indirectDeviceAddress);
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_pipeline)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRayTracingPipelineStackSizeKHR (VkCommandBuffer   commandBuffer, uint32_t   pipelineStackSize);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysIndirectKHR (VkCommandBuffer   commandBuffer, const  VkStridedDeviceAddressRegionKHR *  pRaygenShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pMissShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pHitShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pCallableShaderBindingTable, VkDeviceAddress   indirectDeviceAddress);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysKHR (VkCommandBuffer   commandBuffer, const  VkStridedDeviceAddressRegionKHR *  pRaygenShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pMissShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pHitShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pCallableShaderBindingTable, uint32_t   width, uint32_t   height, uint32_t   depth);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRayTracingPipelinesKHR (VkDevice   device, VkDeferredOperationKHR   deferredOperation, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkRayTracingPipelineCreateInfoKHR *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRayTracingCaptureReplayShaderGroupHandlesKHR (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRayTracingShaderGroupHandlesKHR (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData);
VKFWAPI VKAPI_ATTR VkDeviceSize VKAPI_CALL
vkGetRayTracingShaderGroupStackSizeKHR (VkDevice   device, VkPipeline   pipeline, uint32_t   group, VkShaderGroupShaderKHR   groupShader);
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_sampler_ycbcr_conversion)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSamplerYcbcrConversionKHR (VkDevice   device, const  VkSamplerYcbcrConversionCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSamplerYcbcrConversion *  pYcbcrConversion);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySamplerYcbcrConversionKHR (VkDevice   device, VkSamplerYcbcrConversion   ycbcrConversion, const  VkAllocationCallbacks *  pAllocator);
#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */
#if defined(VK_KHR_shared_presentable_image)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSwapchainStatusKHR (VkDevice   device, VkSwapchainKHR   swapchain);
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_KHR_surface)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySurfaceKHR (VkInstance   instance, VkSurfaceKHR   surface, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceCapabilitiesKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, VkSurfaceCapabilitiesKHR *  pSurfaceCapabilities);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceFormatsKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pSurfaceFormatCount, VkSurfaceFormatKHR *  pSurfaceFormats);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfacePresentModesKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pPresentModeCount, VkPresentModeKHR *  pPresentModes);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSurfaceSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, VkSurfaceKHR   surface, VkBool32 *  pSupported);
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_swapchain)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireNextImageKHR (VkDevice   device, VkSwapchainKHR   swapchain, uint64_t   timeout, VkSemaphore   semaphore, VkFence   fence, uint32_t *  pImageIndex);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateSwapchainKHR (VkDevice   device, const  VkSwapchainCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSwapchainKHR *  pSwapchain);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroySwapchainKHR (VkDevice   device, VkSwapchainKHR   swapchain, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSwapchainImagesKHR (VkDevice   device, VkSwapchainKHR   swapchain, uint32_t *  pSwapchainImageCount, VkImage *  pSwapchainImages);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueuePresentKHR (VkQueue   queue, const  VkPresentInfoKHR *  pPresentInfo);
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_synchronization2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPipelineBarrier2KHR (VkCommandBuffer                     commandBuffer, const  VkDependencyInfo *                              pDependencyInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdResetEvent2KHR (VkCommandBuffer                     commandBuffer, VkEvent                                               event, VkPipelineStageFlags2                 stageMask);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetEvent2KHR (VkCommandBuffer                     commandBuffer, VkEvent                                               event, const  VkDependencyInfo *                              pDependencyInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWaitEvents2KHR (VkCommandBuffer                     commandBuffer, uint32_t                                              eventCount, const  VkEvent *                      pEvents, const  VkDependencyInfo *             pDependencyInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteTimestamp2KHR (VkCommandBuffer                     commandBuffer, VkPipelineStageFlags2                 stage, VkQueryPool                                           queryPool, uint32_t                                              query);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkQueueSubmit2KHR (VkQueue                             queue, uint32_t                              submitCount, const  VkSubmitInfo2 *               pSubmits, VkFence             fence);
#endif /* defined(VK_KHR_synchronization2) */
#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteBufferMarker2AMD (VkCommandBuffer                     commandBuffer, VkPipelineStageFlags2                 stage, VkBuffer                                              dstBuffer, VkDeviceSize                                          dstOffset, uint32_t                                              marker);
#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */
#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetQueueCheckpointData2NV (VkQueue   queue, uint32_t *  pCheckpointDataCount, VkCheckpointData2NV *  pCheckpointData);
#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_KHR_timeline_semaphore)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetSemaphoreCounterValueKHR (VkDevice   device, VkSemaphore   semaphore, uint64_t *  pValue);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSignalSemaphoreKHR (VkDevice   device, const  VkSemaphoreSignalInfo *  pSignalInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkWaitSemaphoresKHR (VkDevice   device, const  VkSemaphoreWaitInfo *  pWaitInfo, uint64_t   timeout);
#endif /* defined(VK_KHR_timeline_semaphore) */
#if defined(VK_KHR_video_decode_queue)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDecodeVideoKHR (VkCommandBuffer   commandBuffer, const  VkVideoDecodeInfoKHR *  pDecodeInfo);
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_encode_queue)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEncodeVideoKHR (VkCommandBuffer   commandBuffer, const  VkVideoEncodeInfoKHR *  pEncodeInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetEncodedVideoSessionParametersKHR (VkDevice   device, const  VkVideoEncodeSessionParametersGetInfoKHR *  pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR *  pFeedbackInfo, size_t *  pDataSize, void *  pData);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *  pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR *  pQualityLevelProperties);
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindVideoSessionMemoryKHR (VkDevice   device, VkVideoSessionKHR   videoSession, uint32_t   bindSessionMemoryInfoCount, const  VkBindVideoSessionMemoryInfoKHR *  pBindSessionMemoryInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBeginVideoCodingKHR (VkCommandBuffer   commandBuffer, const  VkVideoBeginCodingInfoKHR *  pBeginInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdControlVideoCodingKHR (VkCommandBuffer   commandBuffer, const  VkVideoCodingControlInfoKHR *  pCodingControlInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdEndVideoCodingKHR (VkCommandBuffer   commandBuffer, const  VkVideoEndCodingInfoKHR *  pEndCodingInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateVideoSessionKHR (VkDevice   device, const  VkVideoSessionCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkVideoSessionKHR *  pVideoSession);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateVideoSessionParametersKHR (VkDevice   device, const  VkVideoSessionParametersCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkVideoSessionParametersKHR *  pVideoSessionParameters);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyVideoSessionKHR (VkDevice   device, VkVideoSessionKHR   videoSession, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyVideoSessionParametersKHR (VkDevice   device, VkVideoSessionParametersKHR   videoSessionParameters, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceVideoCapabilitiesKHR (VkPhysicalDevice   physicalDevice, const  VkVideoProfileInfoKHR *  pVideoProfile, VkVideoCapabilitiesKHR *  pCapabilities);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceVideoFormatPropertiesKHR (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceVideoFormatInfoKHR *  pVideoFormatInfo, uint32_t *  pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR *  pVideoFormatProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetVideoSessionMemoryRequirementsKHR (VkDevice   device, VkVideoSessionKHR   videoSession, uint32_t *  pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkUpdateVideoSessionParametersKHR (VkDevice   device, VkVideoSessionParametersKHR   videoSessionParameters, const  VkVideoSessionParametersUpdateInfoKHR *  pUpdateInfo);
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_wayland_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateWaylandSurfaceKHR (VkInstance   instance, const  VkWaylandSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceWaylandPresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, struct  wl_display *  display);
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_win32_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateWin32SurfaceKHR (VkInstance   instance, const  VkWin32SurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceWin32PresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex);
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_KHR_xcb_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateXcbSurfaceKHR (VkInstance   instance, const  VkXcbSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceXcbPresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, xcb_connection_t *  connection, xcb_visualid_t   visual_id);
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_xlib_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateXlibSurfaceKHR (VkInstance   instance, const  VkXlibSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceXlibPresentationSupportKHR (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, Display *  dpy, VisualID   visualID);
#endif /* defined(VK_KHR_xlib_surface) */
#if defined(VK_MVK_ios_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateIOSSurfaceMVK (VkInstance   instance, const  VkIOSSurfaceCreateInfoMVK *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MVK_macos_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateMacOSSurfaceMVK (VkInstance   instance, const  VkMacOSSurfaceCreateInfoMVK *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_NN_vi_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateViSurfaceNN (VkInstance   instance, const  VkViSurfaceCreateInfoNN *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_NVX_binary_import)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCuLaunchKernelNVX (VkCommandBuffer   commandBuffer, const  VkCuLaunchInfoNVX *  pLaunchInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCuFunctionNVX (VkDevice   device, const  VkCuFunctionCreateInfoNVX *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCuFunctionNVX *  pFunction);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCuModuleNVX (VkDevice   device, const  VkCuModuleCreateInfoNVX *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCuModuleNVX *  pModule);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCuFunctionNVX (VkDevice   device, VkCuFunctionNVX   function, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCuModuleNVX (VkDevice   device, VkCuModuleNVX   module, const  VkAllocationCallbacks *  pAllocator);
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NVX_image_view_handle)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetImageViewAddressNVX (VkDevice   device, VkImageView   imageView, VkImageViewAddressPropertiesNVX *  pProperties);
VKFWAPI VKAPI_ATTR uint32_t VKAPI_CALL
vkGetImageViewHandleNVX (VkDevice   device, const  VkImageViewHandleInfoNVX *  pInfo);
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_NV_acquire_winrt_display)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireWinrtDisplayNV (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetWinrtDisplayNV (VkPhysicalDevice   physicalDevice, uint32_t   deviceRelativeId, VkDisplayKHR *  pDisplay);
#endif /* defined(VK_NV_acquire_winrt_display) */
#if defined(VK_NV_clip_space_w_scaling)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWScalingNV (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewportWScalingNV *  pViewportWScalings);
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_NV_cooperative_matrix)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkCooperativeMatrixPropertiesNV *  pProperties);
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_copy_memory_indirect)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryIndirectNV (VkCommandBuffer   commandBuffer, VkDeviceAddress   copyBufferAddress, uint32_t   copyCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyMemoryToImageIndirectNV (VkCommandBuffer   commandBuffer, VkDeviceAddress   copyBufferAddress, uint32_t   copyCount, uint32_t   stride, VkImage   dstImage, VkImageLayout   dstImageLayout, const  VkImageSubresourceLayers *  pImageSubresources);
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_coverage_reduction_mode)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (VkPhysicalDevice   physicalDevice, uint32_t *  pCombinationCount, VkFramebufferMixedSamplesCombinationNV *  pCombinations);
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_NV_cuda_kernel_launch)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCudaLaunchKernelNV (VkCommandBuffer   commandBuffer, const  VkCudaLaunchInfoNV *  pLaunchInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCudaFunctionNV (VkDevice   device, const  VkCudaFunctionCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCudaFunctionNV *  pFunction);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateCudaModuleNV (VkDevice   device, const  VkCudaModuleCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCudaModuleNV *  pModule);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCudaFunctionNV (VkDevice   device, VkCudaFunctionNV   function, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyCudaModuleNV (VkDevice   device, VkCudaModuleNV   module, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetCudaModuleCacheNV (VkDevice   device, VkCudaModuleNV   module, size_t *  pCacheSize, void *  pCacheData);
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_NV_device_diagnostic_checkpoints)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCheckpointNV (VkCommandBuffer   commandBuffer, const  void *  pCheckpointMarker);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetQueueCheckpointDataNV (VkQueue   queue, uint32_t *  pCheckpointDataCount, VkCheckpointDataNV *  pCheckpointData);
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_NV_device_generated_commands)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindPipelineShaderGroupNV (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipeline   pipeline, uint32_t   groupIndex);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdExecuteGeneratedCommandsNV (VkCommandBuffer   commandBuffer, VkBool32   isPreprocessed, const  VkGeneratedCommandsInfoNV *  pGeneratedCommandsInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPreprocessGeneratedCommandsNV (VkCommandBuffer   commandBuffer, const  VkGeneratedCommandsInfoNV *  pGeneratedCommandsInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateIndirectCommandsLayoutNV (VkDevice   device, const  VkIndirectCommandsLayoutCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkIndirectCommandsLayoutNV *  pIndirectCommandsLayout);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyIndirectCommandsLayoutNV (VkDevice   device, VkIndirectCommandsLayoutNV   indirectCommandsLayout, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetGeneratedCommandsMemoryRequirementsNV (VkDevice   device, const  VkGeneratedCommandsMemoryRequirementsInfoNV *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_NV_device_generated_commands_compute)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdUpdatePipelineIndirectBufferNV (VkCommandBuffer   commandBuffer, VkPipelineBindPoint             pipelineBindPoint, VkPipeline                      pipeline);
VKFWAPI VKAPI_ATTR VkDeviceAddress VKAPI_CALL
vkGetPipelineIndirectDeviceAddressNV (VkDevice   device, const  VkPipelineIndirectDeviceAddressInfoNV *  pInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetPipelineIndirectMemoryRequirementsNV (VkDevice   device, const  VkComputePipelineCreateInfo *  pCreateInfo, VkMemoryRequirements2 *  pMemoryRequirements);
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_NV_external_memory_capabilities)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceExternalImageFormatPropertiesNV (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkImageTiling   tiling, VkImageUsageFlags   usage, VkImageCreateFlags   flags, VkExternalMemoryHandleTypeFlagsNV   externalHandleType, VkExternalImageFormatPropertiesNV *  pExternalImageFormatProperties);
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_NV_external_memory_rdma)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryRemoteAddressNV (VkDevice   device, const  VkMemoryGetRemoteAddressInfoNV *  pMemoryGetRemoteAddressInfo, VkRemoteAddressNV *  pAddress);
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_NV_external_memory_win32)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetMemoryWin32HandleNV (VkDevice   device, VkDeviceMemory   memory, VkExternalMemoryHandleTypeFlagsNV   handleType, HANDLE *  pHandle);
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_NV_fragment_shading_rate_enums)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFragmentShadingRateEnumNV (VkCommandBuffer             commandBuffer, VkFragmentShadingRateNV                       shadingRate, const  VkFragmentShadingRateCombinerOpKHR      combinerOps [2]);
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_NV_low_latency2)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetLatencyTimingsNV (VkDevice   device, VkSwapchainKHR   swapchain, VkGetLatencyMarkerInfoNV *  pLatencyMarkerInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkLatencySleepNV (VkDevice   device, VkSwapchainKHR   swapchain, const  VkLatencySleepInfoNV *  pSleepInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkQueueNotifyOutOfBandNV (VkQueue   queue, const  VkOutOfBandQueueTypeInfoNV *  pQueueTypeInfo);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkSetLatencyMarkerNV (VkDevice   device, VkSwapchainKHR   swapchain, const  VkSetLatencyMarkerInfoNV *  pLatencyMarkerInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkSetLatencySleepModeNV (VkDevice   device, VkSwapchainKHR   swapchain, const  VkLatencySleepModeInfoNV *  pSleepModeInfo);
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_memory_decompression)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDecompressMemoryIndirectCountNV (VkCommandBuffer   commandBuffer, VkDeviceAddress   indirectCommandsAddress, VkDeviceAddress   indirectCommandsCountAddress, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDecompressMemoryNV (VkCommandBuffer   commandBuffer, uint32_t   decompressRegionCount, const  VkDecompressMemoryRegionNV *  pDecompressMemoryRegions);
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_mesh_shader)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectCountNV (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksIndirectNV (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdDrawMeshTasksNV (VkCommandBuffer   commandBuffer, uint32_t   taskCount, uint32_t   firstTask);
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_NV_optical_flow)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindOpticalFlowSessionImageNV (VkDevice   device, VkOpticalFlowSessionNV   session, VkOpticalFlowSessionBindingPointNV   bindingPoint, VkImageView   view, VkImageLayout   layout);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdOpticalFlowExecuteNV (VkCommandBuffer   commandBuffer, VkOpticalFlowSessionNV   session, const  VkOpticalFlowExecuteInfoNV *  pExecuteInfo);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateOpticalFlowSessionNV (VkDevice   device, const  VkOpticalFlowSessionCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkOpticalFlowSessionNV *  pSession);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyOpticalFlowSessionNV (VkDevice   device, VkOpticalFlowSessionNV   session, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDeviceOpticalFlowImageFormatsNV (VkPhysicalDevice   physicalDevice, const  VkOpticalFlowImageFormatInfoNV *  pOpticalFlowImageFormatInfo, uint32_t *  pFormatCount, VkOpticalFlowImageFormatPropertiesNV *  pImageFormatProperties);
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_ray_tracing)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkBindAccelerationStructureMemoryNV (VkDevice   device, uint32_t   bindInfoCount, const  VkBindAccelerationStructureMemoryInfoNV *  pBindInfos);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBuildAccelerationStructureNV (VkCommandBuffer   commandBuffer, const  VkAccelerationStructureInfoNV *  pInfo, VkBuffer   instanceData, VkDeviceSize   instanceOffset, VkBool32   update, VkAccelerationStructureNV   dst, VkAccelerationStructureNV   src, VkBuffer   scratch, VkDeviceSize   scratchOffset);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdCopyAccelerationStructureNV (VkCommandBuffer   commandBuffer, VkAccelerationStructureNV   dst, VkAccelerationStructureNV   src, VkCopyAccelerationStructureModeKHR   mode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdTraceRaysNV (VkCommandBuffer   commandBuffer, VkBuffer   raygenShaderBindingTableBuffer, VkDeviceSize   raygenShaderBindingOffset, VkBuffer   missShaderBindingTableBuffer, VkDeviceSize   missShaderBindingOffset, VkDeviceSize   missShaderBindingStride, VkBuffer   hitShaderBindingTableBuffer, VkDeviceSize   hitShaderBindingOffset, VkDeviceSize   hitShaderBindingStride, VkBuffer   callableShaderBindingTableBuffer, VkDeviceSize   callableShaderBindingOffset, VkDeviceSize   callableShaderBindingStride, uint32_t   width, uint32_t   height, uint32_t   depth);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdWriteAccelerationStructuresPropertiesNV (VkCommandBuffer   commandBuffer, uint32_t   accelerationStructureCount, const  VkAccelerationStructureNV *  pAccelerationStructures, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCompileDeferredNV (VkDevice   device, VkPipeline   pipeline, uint32_t   shader);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateAccelerationStructureNV (VkDevice   device, const  VkAccelerationStructureCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkAccelerationStructureNV *  pAccelerationStructure);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateRayTracingPipelinesNV (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkRayTracingPipelineCreateInfoNV *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkDestroyAccelerationStructureNV (VkDevice   device, VkAccelerationStructureNV   accelerationStructure, const  VkAllocationCallbacks *  pAllocator);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetAccelerationStructureHandleNV (VkDevice   device, VkAccelerationStructureNV   accelerationStructure, size_t   dataSize, void *  pData);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetAccelerationStructureMemoryRequirementsNV (VkDevice   device, const  VkAccelerationStructureMemoryRequirementsInfoNV *  pInfo, VkMemoryRequirements2KHR *  pMemoryRequirements);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetRayTracingShaderGroupHandlesNV (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData);
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetExclusiveScissorEnableNV (VkCommandBuffer   commandBuffer, uint32_t   firstExclusiveScissor, uint32_t   exclusiveScissorCount, const  VkBool32 *  pExclusiveScissorEnables);
#endif /* defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2 */
#if defined(VK_NV_scissor_exclusive)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetExclusiveScissorNV (VkCommandBuffer   commandBuffer, uint32_t   firstExclusiveScissor, uint32_t   exclusiveScissorCount, const  VkRect2D *  pExclusiveScissors);
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_shading_rate_image)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindShadingRateImageNV (VkCommandBuffer   commandBuffer, VkImageView   imageView, VkImageLayout   imageLayout);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoarseSampleOrderNV (VkCommandBuffer   commandBuffer, VkCoarseSampleOrderTypeNV   sampleOrderType, uint32_t   customSampleOrderCount, const  VkCoarseSampleOrderCustomNV *  pCustomSampleOrders);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportShadingRatePaletteNV (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkShadingRatePaletteNV *  pShadingRatePalettes);
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_QCOM_tile_properties)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDynamicRenderingTilePropertiesQCOM (VkDevice   device, const  VkRenderingInfo *  pRenderingInfo, VkTilePropertiesQCOM *  pProperties);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetFramebufferTilePropertiesQCOM (VkDevice   device, VkFramebuffer   framebuffer, uint32_t *  pPropertiesCount, VkTilePropertiesQCOM *  pProperties);
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_QNX_external_memory_screen_buffer)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetScreenBufferPropertiesQNX (VkDevice   device, const struct  _screen_buffer *  buffer, VkScreenBufferPropertiesQNX *  pProperties);
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_QNX_screen_surface)
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkCreateScreenSurfaceQNX (VkInstance   instance, const  VkScreenSurfaceCreateInfoQNX *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
VKFWAPI VKAPI_ATTR VkBool32 VKAPI_CALL
vkGetPhysicalDeviceScreenPresentationSupportQNX (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, struct  _screen_window *  window);
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetHostMappingVALVE (VkDevice   device, VkDescriptorSet   descriptorSet, void **  ppData);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetDescriptorSetLayoutHostMappingInfoVALVE (VkDevice   device, const  VkDescriptorSetBindingReferenceVALVE *  pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE *  pHostMapping);
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdBindVertexBuffers2EXT (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes, const  VkDeviceSize *  pStrides);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCullModeEXT (VkCommandBuffer   commandBuffer, VkCullModeFlags   cullMode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBoundsTestEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthBoundsTestEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthCompareOpEXT (VkCommandBuffer   commandBuffer, VkCompareOp   depthCompareOp);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthTestEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthTestEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthWriteEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthWriteEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetFrontFaceEXT (VkCommandBuffer   commandBuffer, VkFrontFace   frontFace);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveTopologyEXT (VkCommandBuffer   commandBuffer, VkPrimitiveTopology   primitiveTopology);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetScissorWithCountEXT (VkCommandBuffer   commandBuffer, uint32_t   scissorCount, const  VkRect2D *  pScissors);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilOpEXT (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, VkStencilOp   failOp, VkStencilOp   passOp, VkStencilOp   depthFailOp, VkCompareOp   compareOp);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetStencilTestEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   stencilTestEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWithCountEXT (VkCommandBuffer   commandBuffer, uint32_t   viewportCount, const  VkViewport *  pViewports);
#endif /* (defined(VK_EXT_extended_dynamic_state)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthBiasEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthBiasEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLogicOpEXT (VkCommandBuffer   commandBuffer, VkLogicOp   logicOp);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPatchControlPointsEXT (VkCommandBuffer   commandBuffer, uint32_t   patchControlPoints);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPrimitiveRestartEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   primitiveRestartEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizerDiscardEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   rasterizerDiscardEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state2)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetAlphaToCoverageEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   alphaToCoverageEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetAlphaToOneEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   alphaToOneEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorBlendEnableEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkBool32 *  pColorBlendEnables);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorBlendEquationEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkColorBlendEquationEXT *  pColorBlendEquations);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorWriteMaskEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkColorComponentFlags *  pColorWriteMasks);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthClampEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthClampEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLogicOpEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   logicOpEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetPolygonModeEXT (VkCommandBuffer   commandBuffer, VkPolygonMode   polygonMode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizationSamplesEXT (VkCommandBuffer   commandBuffer, VkSampleCountFlagBits    rasterizationSamples);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetSampleMaskEXT (VkCommandBuffer   commandBuffer, VkSampleCountFlagBits    samples, const  VkSampleMask *     pSampleMask);
#endif /* (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetTessellationDomainOriginEXT (VkCommandBuffer   commandBuffer, VkTessellationDomainOrigin   domainOrigin);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRasterizationStreamEXT (VkCommandBuffer   commandBuffer, uint32_t   rasterizationStream);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetConservativeRasterizationModeEXT (VkCommandBuffer   commandBuffer, VkConservativeRasterizationModeEXT   conservativeRasterizationMode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetExtraPrimitiveOverestimationSizeEXT (VkCommandBuffer   commandBuffer, float   extraPrimitiveOverestimationSize);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthClipEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   depthClipEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetSampleLocationsEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   sampleLocationsEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetColorBlendAdvancedEXT (VkCommandBuffer   commandBuffer, uint32_t   firstAttachment, uint32_t   attachmentCount, const  VkColorBlendAdvancedEXT *  pColorBlendAdvanced);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetProvokingVertexModeEXT (VkCommandBuffer   commandBuffer, VkProvokingVertexModeEXT   provokingVertexMode);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineRasterizationModeEXT (VkCommandBuffer   commandBuffer, VkLineRasterizationModeEXT   lineRasterizationMode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetLineStippleEnableEXT (VkCommandBuffer   commandBuffer, VkBool32   stippledLineEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetDepthClipNegativeOneToOneEXT (VkCommandBuffer   commandBuffer, VkBool32   negativeOneToOne);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) || (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportWScalingEnableNV (VkCommandBuffer   commandBuffer, VkBool32   viewportWScalingEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetViewportSwizzleNV (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewportSwizzleNV *  pViewportSwizzles);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageToColorEnableNV (VkCommandBuffer   commandBuffer, VkBool32   coverageToColorEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageToColorLocationNV (VkCommandBuffer   commandBuffer, uint32_t   coverageToColorLocation);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageModulationModeNV (VkCommandBuffer   commandBuffer, VkCoverageModulationModeNV   coverageModulationMode);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageModulationTableEnableNV (VkCommandBuffer   commandBuffer, VkBool32   coverageModulationTableEnable);
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageModulationTableNV (VkCommandBuffer   commandBuffer, uint32_t   coverageModulationTableCount, const  float *  pCoverageModulationTable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetShadingRateImageEnableNV (VkCommandBuffer   commandBuffer, VkBool32   shadingRateImageEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetRepresentativeFragmentTestEnableNV (VkCommandBuffer   commandBuffer, VkBool32   representativeFragmentTestEnable);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetCoverageReductionModeNV (VkCommandBuffer   commandBuffer, VkCoverageReductionModeNV   coverageReductionMode);
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */
#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceGroupSurfacePresentModes2EXT (VkDevice   device, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR *  pModes);
#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */
#if (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkGetImageSubresourceLayout2EXT (VkDevice   device, VkImage   image, const  VkImageSubresource2KHR *  pSubresource, VkSubresourceLayout2KHR *  pLayout);
#endif /* (defined(VK_EXT_host_image_copy)) || (defined(VK_EXT_image_compression_control)) */
#if (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdSetVertexInputEXT (VkCommandBuffer   commandBuffer, uint32_t   vertexBindingDescriptionCount, const  VkVertexInputBindingDescription2EXT *  pVertexBindingDescriptions, uint32_t   vertexAttributeDescriptionCount, const  VkVertexInputAttributeDescription2EXT *  pVertexAttributeDescriptions);
#endif /* (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state)) */
#if (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template))
VKFWAPI VKAPI_ATTR void VKAPI_CALL
vkCmdPushDescriptorSetWithTemplateKHR (VkCommandBuffer   commandBuffer, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, VkPipelineLayout   layout, uint32_t   set, const  void *  pData);
#endif /* (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) || (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceGroupPresentCapabilitiesKHR (VkDevice   device, VkDeviceGroupPresentCapabilitiesKHR *  pDeviceGroupPresentCapabilities);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetDeviceGroupSurfacePresentModesKHR (VkDevice   device, VkSurfaceKHR   surface, VkDeviceGroupPresentModeFlagsKHR *  pModes);
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkGetPhysicalDevicePresentRectanglesKHR (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pRectCount, VkRect2D *  pRects);
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
VKFWAPI VKAPI_ATTR VkResult VKAPI_CALL
vkAcquireNextImage2KHR (VkDevice   device, const  VkAcquireNextImageInfoKHR *  pAcquireInfo, uint32_t *  pImageIndex);
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
/* VKFW_GEN_PROTOTYPES_H */
